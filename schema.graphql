"""
Directs the executor to deliver this part of the result after the initial result.
"""
directive @defer(
  """
  If false, this field _won't_ be deferred.
  """
  if: Boolean = true

  """
  A unique label to identify the deferred payload.
  """
  label: String
) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT

"""
Autogenerated return type of AcceptTermsMutation.
"""
type AcceptTermsMutationPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  currentUser: CurrentUser
  errors: [UserError!]!

  """
  Generate a JWT Token. null if, and only if, currentUser is null.
  """
  jwtToken(
    """
    Audience claim identifies the intended audience for this token. Consider
    using a value that uniquely identifies your use case.
    """
    aud: String!
  ): JwtToken
  result: String!
}

"""
The acceptor settlement info
"""
input AcceptorSettlementInfoInput {
  additionalPaymentInfo: AdditionalPaymentInfoInput
  conversionCreditIds: [ID!]
  creditCardType: CreditCardType
  currency: SupportedCurrency!
  exchangeRateId: String!
  paymentMethod: TokenPaymentMethod!
  platform: Platform
  returnUrl: String
  savePaymentMethod: Boolean = false
  walletChallengeSignature: StarkwareSignatureInput
}

"""
An Account
"""
type Account implements Node {
  accountable: Accountable!
  id: ID!
  owner: AccountOwner
  sorareManaged: Boolean!
}

"""
Object that can be an account owner
"""
union AccountOwner = Contract | User

"""
Object that can be an account accountable
"""
union Accountable = CommonAccount | EthereumAccount | FiatWalletAccount | LoomAccount | StarkexV6Account | StarkwareAccount

enum Action {
  ACTIVITY
  GLOBAL_CUP_22_REFERRAL
}

"""
An action reward
"""
type ActionReward implements Node {
  action: Action!
  id: ID!
  pickSize: Int!

  """
  The `pickable_players` field cannot be nested within a list.
  """
  pickablePlayers: [PickablePlayer!]!

  """
  The `reward_cards` field cannot be nested within a list.
  """
  rewardCards: [RewardCard!]!
  shippingState: ShippingState!
}

interface ActivitiesInterface {
  celebratable: Boolean!
  createdAt: ISO8601DateTime!
  id: ID!
  reactions: [ActivityReactionType!]!
}

type ActivityReactionType {
  count: Int!
  emoji: Emoji!
  reacted: Boolean!
  reactingUsers(page: Int, pageSize: Int): [User!]!
}

input AddCardInput {
  signedPrice: String!
}

enum AdditionalKycRequestRequestType {
  BLOCKED_USER
  KYC_RENEWAL
}

enum AdditionalKycRequestState {
  CREATED
  OUT_OF_DATE
  REFUSED
  VALIDATED
  VALIDATION_ASKED
}

"""
Type for additional payment information
"""
input AdditionalPaymentInfoInput {
  klarna: KlarnaAdditionalInfoInput
}

type Age {
  cutOffDate: ISO8601Date!
  max: Int
  min: Int
}

"""
An airdrop promotional event taking place
"""
type AirdropPromotionalEvent implements Node & PromotionalEventInterface {
  algoliaFilters: String!
  blogUrl: String
  claimed: Boolean!
  description: String!
  eligibilityRules: EligibilityRules!
  endDate: ISO8601DateTime!
  id: ID!
  logoUrl: String
  marketBannerTitle: String!
  myReward: AnyRewardInterface
  name: String!
  pictureUrl: String
  probableRewardConfigs: [ProbableRewardConfig!]!
  promotionType: PromotionType!
  rewardsProbabilisticBundleConfig: [ProbabilisticBundleConfig!]!
  slug: String!
  sport: Sport!
  startDate: ISO8601DateTime!
  termsAndConditionsUrl: String
  title: String!
}

type AlternativeRewardConfig {
  rewardConfigs: [AnyRewardConfigInterface!]!
  signedAlternativeRewardConfigs: String!
  validUntil: ISO8601DateTime!
}

"""
An amount in cents or wei and its currency
"""
input AmountInput {
  amount: String!
  currency: SupportedCurrency!
}

"""
An announcement
"""
type Announcement implements Node {
  content: String!
  createdAt: ISO8601DateTime!
  id: ID!
  logoUrl(derivative: String): String
  pictureUrl: String
  sport: Sport
  title: String!
  url: String
  webviewUrl: String!
}

"""
The connection type for Announcement.
"""
type AnnouncementConnection {
  """
  A list of edges.
  """
  edges: [AnnouncementEdge!]!

  """
  A list of nodes.
  """
  nodes: [Announcement!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type AnnouncementEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Announcement
}

"""
A user notification regarding an Announcement
"""
type AnnouncementNotification implements Node & NotificationInterface {
  announcement: Announcement!
  body: String!
  createdAt: ISO8601DateTime!
  deeplinkUrl: String!
  iconUrl: String!
  id: ID!
  important: Boolean!
  markdownBody: String!
  name: String!
  pictureUrl: String
  read: Boolean!
  sport: SportOrShared
  title: String!
  user: CurrentUser!
}

"""
An anonymous User
"""
type AnonymousUser implements BlockchainUserInterface & Node {
  cardsCount: Int!
  ethVaultId: Int
  ethereumAddress: EthereumAddress!
  id: ID!
  sorareAddress: EthereumAddress
  starkKey: String
}

"""
AverageStatWithValue
"""
interface AnyAverageStatWithValueInterface {
  lastValues: [Float!]
  value: Float
}

"""
Card
"""
interface AnyCardInterface implements WithSubscriptionsInterface {
  activeSuspensions(so5LeaderboardSlug: String!): [Suspension!]!
  activeTaskAppearances: [TaskAppearanceInterface!]!
  anyPlayer: AnyPlayerInterface!
  anyPositions: [Position!]!
  anyTeam: TeamInterface!
  assetId: ID!
  availableCardBoosts: [CardBoost!]!
  averageScore(type: AveragePlayerScore!): Float
  backPictureUrl: String!
  blueprint: Blueprint
  bonuses(so5LeaderboardSlug: String): [So5AppearanceBonusInterface!]!
  bonusesAfterTransfer(so5LeaderboardSlug: String): [So5AppearanceBonusInterface!]!
  borderRadius: Int!
  cardCollectionCards: [CardCollectionCard!]!
  cardEditionName: String
  cardPrice: Int
  cardStats: CardStats
  collection: Collection
  collectionIncreaseScoreBreakdownAfterTransfer: CardCollectionCardScoreBreakdown
  collectionScoringMatrix: [CardCollectionScoringMatrix!]!
  concurrentSo5Lineups(so5FixtureSlug: String, so5LeaderboardSlug: String): [So5Lineup!]!
  contractAddress: EthereumAddress
  currentUserSubscription: EmailSubscription
  decks: [Deck!]!
  delayedReveal: Boolean
  displayRarity: String!
  dropRank: Int
  eligiblePlayerGameScores(so5LeaderboardSlug: String): [PlayerGameScoreInterface!]!
  eligibleUpcomingLeagueTracks: [So5LeagueTrack!]!
  ethereumId: String!
  ethereumOwner: TokenOwner
  formattedCardEditionName: String

  """
  Current card level
  """
  grade: Int!
  gradeAfterTransfer: Int!
  id: ID!
  inSeasonEligible: Boolean!
  inSeasonUntil: ISO8601DateTime
  ipfsPictureUrl: String
  ipfsUrl: String
  lastLeveledUpAt: ISO8601DateTime
  latestEnglishAuction: TokenAuction
  latestPrimaryOffer: TokenPrimaryOffer
  levelUpAppliedCount: Int!
  liveSingleBuyOffers: [TokenOffer!]!
  liveSingleSaleOffer: TokenOffer

  """
  So5Lineup that this card is being used in for the live So5Fixture
  """
  liveSo5Lineup: So5Lineup
  loanedToken: LoanedToken

  """
  Returns the lowest price card of the same player, rarity and season
  """
  lowestPriceCard: AnyCardInterface

  """
  Returns the lowest price card of the same player and rarity
  """
  lowestPriceCardAnySeason: AnyCardInterface
  maxLevelUpAppliedCount: Int!
  myMintedSingleSaleOffer: TokenOffer
  name: String!
  nextLevelUpAvailableAt: ISO8601DateTime

  """
  So5Lineups that this card is being used in for the opened So5Fixtures
  """
  openedSo5Lineups: [So5Lineup!]!
  ownerSince: ISO8601DateTime
  ownershipHistory: [TokenOwner!]!
  pendingWithdrawal: TokenWithdrawal
  pictureUrl(derivative: String = "tinified"): String
  playerLoyaltyBoost: RewardBoost!

  """
  Total card bonus (XP + Season bonus)
  """
  power(so5LeaderboardSlug: String = null): String!

  """
  Total card bonus after transfer
  """
  powerAfterTransfer(so5LeaderboardSlug: String = null): String!
  powerBreakdown(so5LeaderboardSlug: String = null): PowerBreakdown!
  powerMalusAfterTransfer: String!
  previouslyOwnedCard: Boolean
  priceRange: Range
  privateMinPrices: MonetaryAmount
  publicMinPrices: MonetaryAmount
  rarityTyped: Rarity!
  revealableCardCampaign: RevealableCardCampaign
  sealable: Boolean!
  sealableFor: Int
  sealed: Boolean!
  sealedAt: ISO8601DateTime
  sealedFor: Int
  sealedPlayerLoyaltyBoost: RewardBoost!
  seasonYear: Int!
  secondaryMarketFeeEnabled: Boolean!

  """
  Returns all live or minted offers where this token is included in the sender
  side. Returns only if authenticated and sender of the offers.
  """
  sentInLiveOffers: [TokenOffer!]
  serialNumber: Int!
  signedAddCardPrice: SignedCardPrice
  signedDropCardPrice: SignedCardPrice
  singleCivilYear: Boolean!
  slug: String!
  specialEdition: String
  sport: Sport!
  sportSeason: SportSeason!
  subscriptionsCount: Int!
  supply: Int!
  threeDimensional: Boolean!
  threeDimensionalAsset: ThreeDimensionalAsset
  tokenOwner: TokenOwner
  tradeableStatus: Tradeable!
  unsealableAt: ISO8601DateTime
  unsealedAt: ISO8601DateTime
  unsealedPlayerLoyaltyBoost: RewardBoost!
  user: User
  videoUrl(derivative: String = null): String
  walletStatus: WalletStatus!
  xp: Int!
  xpAfterTransfer: Int!

  """
  XP start range of current card level
  """
  xpNeededForCurrentGrade: Int!

  """
  XP end range of current card level
  """
  xpNeededForNextGrade: Int
}

"""
The connection type for AnyCardInterface.
"""
type AnyCardInterfaceConnection {
  """
  A list of edges.
  """
  edges: [AnyCardInterfaceEdge!]!
  hasAny: Boolean!

  """
  A list of nodes.
  """
  nodes: [AnyCardInterface!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type AnyCardInterfaceEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: AnyCardInterface
}

"""
A Card Reward
"""
type AnyCardReward implements AnyRewardInterface & Node {
  aasmState: RewardState!
  backPictureUrl: String
  card: AnyCardInterface!
  config: CardRewardConfig!
  id: ID!
  pictureUrl: String
  quality: String
}

type AnyCardSubscription {
  card: AnyCardInterface!
  eventType: CardWasUpdatedEvent!
}

type AnyCardWithPlayerGameScore {
  card: AnyCardInterface!
  id: String!
  playerGameScore: PlayerGameScoreInterface
}

"""
The connection type for AnyCardWithPlayerGameScore.
"""
type AnyCardWithPlayerGameScoreConnection {
  """
  A list of edges.
  """
  edges: [AnyCardWithPlayerGameScoreEdge!]!
  hasAny: Boolean!

  """
  A list of nodes.
  """
  nodes: [AnyCardWithPlayerGameScore!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type AnyCardWithPlayerGameScoreEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: AnyCardWithPlayerGameScore
}

"""
Any team in a competition
"""
interface AnyContestantInterface {
  gamesDrawn: Int!
  gamesLost: Int!
  gamesPlayed: Int!
  gamesWon: Int!
  id: ID!
  rank: Int
  rankStatus: String
  rankType: TournamentCalendarRankType
  team: TeamInterface!
}

"""
A ConversionCredit Reward
"""
type AnyConversionCreditReward implements AnyRewardInterface & Node {
  aasmState: RewardState!
  config: ConversionCreditRewardConfig!
  conversionCredit: ConversionCredit!
  id: ID!
}

"""
Game
"""
interface AnyGameInterface {
  """
  The `any_players` field cannot be nested within a list.
  """
  anyPlayers: [AnyPlayerInterface!]!
  awayScore: Int!
  awayStats: TeamGameStatsInterface
  awayTeam: TeamInterface
  competition: Competition!
  date: ISO8601DateTime!
  homeScore: Int!
  homeStats: TeamGameStatsInterface
  homeTeam: TeamInterface
  id: ID!
  lowCoverage: Boolean!

  """
  The `my_best_by_player_cards` field cannot be nested within a list.
  """
  myBestByPlayerCards(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    rarities: [Rarity!]
  ): AnyCardWithPlayerGameScoreConnection!

  """
  The `my_cards` field cannot be nested within a list.
  """
  myCards(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String
    age: Int
    assetIds: [String!]

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    classicOnly: Boolean
    customCardEditionName: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int
    inActiveCompetitions: [String!]
    inOrderOfRarities: Boolean @deprecated(reason: "Use `sorts` instead")
    inSeasonEligible: Boolean

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    owned: Boolean
    ownedByMe: Boolean
    ownedSinceAfter: ISO8601DateTime
    playerSlugs: [String!]

    """
    positions of the card capitalized
    """
    positions: [Position!]

    """
    rarities of the card in lowercase
    """
    rarities: [Rarity!]
    recentlyOwnedFirst: Boolean @deprecated(reason: "Use `sorts` instead")
    revealable: Boolean
    revealableFirst: Boolean @deprecated(reason: "Use `sorts` instead")
    seasonStartYears: [Int!]
    serialNumber: Int
    shirtNumber: Int
    slugs: [String!]
    sorts: [CardSort!]
    sport: Sport
    teamSlugs: [String!]
    withinDeckFirst: String
  ): AnyCardInterfaceConnection!
  mySo5Appearances: [So5Appearance!]!
  mySo5AppearancesPaginated(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): So5AppearanceConnection!
  mySo5LeaderboardContenders: [So5LeaderboardContender!]!
  mySo5Lineups: [So5Lineup!]!

  """
  Score for a Game for a specific player and his current position
  """
  playerGameScore(playerSlug: String!, position: Position): PlayerGameScoreInterface

  """
  The `player_game_scores` field cannot be nested within a list.
  """
  playerGameScores(includingLegends: Boolean = false): [PlayerGameScoreInterface!]!
  scored: Boolean!
  so5Fixture(so5FixtureType: So5FixtureEvent = CLASSIC): So5Fixture
  sport: Sport!
  statusTyped: GameStatus!
  venue: String
  winner: TeamInterface
}

"""
The connection type for AnyGameInterface.
"""
type AnyGameInterfaceConnection {
  """
  A list of edges.
  """
  edges: [AnyGameInterfaceEdge!]!

  """
  A list of nodes.
  """
  nodes: [AnyGameInterface!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type AnyGameInterfaceEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: AnyGameInterface
}

"""
Any player
"""
union AnyPlayer = BaseballPlayer | NBAPlayer | Player

"""
Player game stats
"""
interface AnyPlayerGameStatsInterface {
  anyGame: AnyGameInterface!
  anyPlayer: AnyPlayerInterface!
  anyTeam: TeamInterface!
  id: ID!
  live: Boolean!
  myBestSo5Appearance: So5Appearance
  onGameSheet: Boolean!
  playedInGame: Boolean!
  playerGameScore(
    """
    Position of the player game score
    """
    position: String
  ): PlayerGameScoreInterface
  reviewed: Boolean!
}

interface AnyPlayerInterface implements WithSubscriptionsInterface {
  abbreviatedName: String!
  activeClub: Club
  activeClubMembership: Membership
  activeInjuries: [Injury!]!
  activeNationalTeam: NationalTeam
  activeSuspensions: [Suspension!]!
  age: Int!

  """
  All player So5Scores ordered by descending game date
  """
  allPlayerGameScores(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int
    from: ISO8601DateTime

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    position: Position
    to: ISO8601DateTime
  ): PlayerGameScoreInterfaceConnection!
  anyCardWithLivePrimaryOffer(rarity: Rarity): AnyCardInterface

  """
  The `any_cards` field cannot be nested within a list.
  """
  anyCards(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String
    age: Int
    assetIds: [String!]

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    classicOnly: Boolean
    customCardEditionName: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int
    inActiveCompetitions: [String!]
    inOrderOfRarities: Boolean @deprecated(reason: "Use `sorts` instead")
    inSeasonEligible: Boolean

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    owned: Boolean
    ownedByMe: Boolean
    ownedSinceAfter: ISO8601DateTime
    playerSlugs: [String!]

    """
    positions of the card capitalized
    """
    positions: [Position!]

    """
    rarities of the card in lowercase
    """
    rarities: [Rarity!]
    recentlyOwnedFirst: Boolean @deprecated(reason: "Use `sorts` instead")
    revealable: Boolean
    revealableFirst: Boolean @deprecated(reason: "Use `sorts` instead")
    seasonStartYears: [Int!]
    serialNumber: Int
    shirtNumber: Int
    slugs: [String!]
    sorts: [CardSort!]
    sport: Sport
    teamSlugs: [String!]
    withinDeckFirst: String
  ): AnyCardInterfaceConnection!

  """
  The `any_future_games` field cannot be nested within a list.
  """
  anyFutureGames(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    so5FixtureEligible: Boolean = false
  ): AnyGameInterfaceConnection!
  anyGameStats(last: Int!, lowCoverage: Boolean = true, so5FixtureSlug: String): [AnyPlayerGameStatsInterface]!
  anyGamesForFixture(so5FixtureSlug: String!): [AnyGameInterface!]!
  anyGamesForLeaderboard(so5LeaderboardSlug: String!): [AnyGameInterface!]!

  """
  The `any_past_games` field cannot be nested within a list.
  """
  anyPastGames(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): AnyGameInterfaceConnection!
  anyPositions: [Position!]!

  """
  Returns the 3 most followed players in the player's club The `any_related_players` field cannot be nested within a list.
  """
  anyRelatedPlayers: [AnyPlayerInterface!]!

  """
  The `any_so5_average_last_score` field cannot be nested within a list.
  """
  anySo5AverageLastScore(competitionSlug: String, location: AverageLastScoreLocation, position: Position!, span: AverageLastScoreSpan!, teamSlug: String): AverageLastScoreInterface
  appearances: Int!
  avatarPictureUrl: String!
  averageScore(position: Position, type: AveragePlayerScore!): Float
  beforeLastOwningMembership: Membership
  birthDay: ISO8601Date
  cardPositions: [Position!]!
  cardPrice(rarity: Rarity!): Int

  """
  Cards of this player that are owned by a manager. Updated once a day.
  """
  cardSupply: [CardSeasonSupply!]!
  careerSeasons(
    """
    If defined only return seasons for competitions of that type
    """
    type: CompetitionType = null
  ): [Season!]!
  clubMemberships: [Membership!]!
  commonPlayer(rarity: Rarity!): CommonPlayer
  country: Country!
  currentSeason: Season
  currentUserSubscription: EmailSubscription
  displayName: String!

  """
  The `eligible_so5_competitions` field cannot be nested within a list.
  """
  eligibleSo5Competitions: [So5Competition!]!
  firstName: String!
  fullPictureUrl: String!
  hasSo5LineupForFixture(so5FixtureSlug: String!): Boolean!
  height: Int
  injuries: [Injury!]!
  lastClub: Club
  lastFifteenSo5Appearances: Int
  lastFiveSo5Appearances: Int
  lastFortySo5Appearances: Int
  lastName: String!

  """
  Get the last 2 cards you own of the player
  """
  lastOwnedCards(
    inSeasonEligible: Boolean

    """
    rarities of the card in lowercase
    """
    rarities: [Rarity!]
    rarity: Rarity @deprecated(reason: "Use rarities instead")
  ): [AnyCardInterface!]!
  lastTenSo5Appearances: Int
  lowestPriceAnyCard(inSeason: Boolean, rarity: Rarity): AnyCardInterface
  matchName: String!
  memberships: [Membership!]!
  mySo5LeaderboardContendersForFixture(so5FixtureSlug: String!): [So5LeaderboardContender!]!
  news(last: Int!): [AnyPlayerNewsUpdate!]!
  nextClassicFixtureProjectedGrade: PlayerGameScoreProjection
  nextClassicFixtureProjectedScore: Float
  nextDailyFixtureProjectedGrade: PlayerGameScoreProjection
  nextDailyFixtureProjectedScore: Float
  nextGame(so5FixtureEligible: Boolean = false): AnyGameInterface
  ownedCardsCount(rarity: Rarity, seasonEligibility: SeasonEligibility): Int!
  playerGameScore(gameId: ID!, position: Position): PlayerGameScoreInterface

  """
  Up to 15 last So5Scores used in a So5Fixture
  """
  playerGameScores(last: Int!, lowCoverage: Boolean = true, position: Position): [PlayerGameScoreInterface]!

  """
  The `public_watchlists` field cannot be nested within a list.
  """
  publicWatchlists(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): WatchlistConnection

  """
  Up to 15 last So5Scores.score used in a So5Fixture
  """
  rawPlayerGameScores(last: Int!, lowCoverage: Boolean = true, position: Position): [Float]!
  seasonAppearances: Int
  shirtNumber: Int!
  signedAddCardPrice(rarity: Rarity!): SignedCardPrice
  signedDropCardPrice(rarity: Rarity!): SignedCardPrice
  slug: String!

  """
  The `so5_average_last_score` field cannot be nested within a list.
  """
  so5AverageLastScore(competitionSlug: String, location: AverageLastScoreLocation, position: Position!, span: AverageLastScoreSpan!, teamSlug: String): AverageLastScore @deprecated(reason: "Use any_so5_average_last_score instead")
  sport: Sport!
  squaredPictureUrl: String!
  subscriptionsCount: Int!
  suspensions: [Suspension!]!

  """
  The `token_prices` field cannot be nested within a list.
  """
  tokenPrices(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int
    includePrivateSales: Boolean

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    rarity: Rarity!
    season: Int
    seasonEligibility: SeasonEligibility
    since: ISO8601DateTime
  ): TokenPriceConnection!
  user: User
  weight: Int
}

"""
The connection type for AnyPlayerInterface.
"""
type AnyPlayerInterfaceConnection {
  """
  A list of edges.
  """
  edges: [AnyPlayerInterfaceEdge!]!

  """
  A list of nodes.
  """
  nodes: [AnyPlayerInterface!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type AnyPlayerInterfaceEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: AnyPlayerInterface
}

"""
Player news
"""
type AnyPlayerNewsUpdate {
  analysis: String!
  date: ISO8601DateTime
  headline: String!
  notes: String!
}

interface AnyRewardConfigInterface {
  boostedRewardConfigs: [AnyRewardConfigInterface!]
  id: ID!
}

interface AnyRewardInterface {
  aasmState: RewardState!
  config: AnyRewardConfigInterface!
  id: ID!
}

"""
The connection type for AnyRewardInterface.
"""
type AnyRewardInterfaceConnection {
  """
  A list of edges.
  """
  edges: [AnyRewardInterfaceEdge!]!

  """
  A list of nodes.
  """
  nodes: [AnyRewardInterface!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type AnyRewardInterfaceEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: AnyRewardInterface
}

"""
Any user sport profile
"""
union AnyUserSportProfile = BaseballUserSportProfile | FootballUserSportProfile | NBAUserSportProfile

type AppearanceBoostShopItem implements Node & ShopItemInterface {
  boostBasisPoints: Int!
  cardCollectionRequirements: [CardCollectionRequirement!]!
  createdAt: ISO8601DateTime!
  description: String
  disabled: Boolean!
  expirationDate: ISO8601DateTime
  id: ID!
  infoLink: String
  limitPerUser: Int!
  myAvailableTotalPurchasesCount: Int!
  myAvailableUserShopItems: [UserShopItem!]
  myBalance: Int!
  myLimitResetAt: ISO8601DateTime
  myPurchasesCount: Int!
  name: String!
  pictureUrl(derivative: ShopItemDerivative = TINIFIED): String!
  position: ShopItemType!
  price: Int!
  rarity: Rarity!
  requirementsRulesLink: String
  salePrice: Int
  seenInManagerId: Boolean!
  shopItemsRequired: [ShopItem!]!
  threeDimensionalAssetUrl(
    """
    Defaults to GLB
    """
    format: ShopItemThreeDimensionalAssetFormat
  ): String
  unlocked: Boolean!
}

type AppearanceRule {
  displayName: String
  id: String!
  name: String!
  positions: [Position!]!
  shortName: String
}

"""
Apple Pay Payment Data
"""
input ApplePayPaymentDataInput {
  network: String!

  """
  JSON-serialized encoded payment token data
  """
  tokenData: String!
  transactionId: String!
}

"""
An Apple purchase token
"""
type ApplePurchaseToken implements Node {
  createdAt: ISO8601DateTime!
  id: ID!
  token: String!
  user: User!
}

"""
A user notification regarding an Auction
"""
type AuctionNotification implements Node & NotificationInterface {
  bidToEarnReward: BidToEarnReward
  bidToEarnRewards: [BidToEarnReward!]
  body: String!
  createdAt: ISO8601DateTime!
  deeplinkUrl: String!
  iconUrl: String!
  id: ID!
  important: Boolean!
  markdownBody: String!
  name: String!
  pictureUrl: String
  read: Boolean!
  rewards: [AnyRewardInterface!]
  sport: SportOrShared
  title: String!
  tokenAuction: TokenAuction!
  tokenBid: TokenBid
  url: String!
  user: CurrentUser!
}

"""
A reminder on an auction
"""
type AuctionReminder implements Node {
  enabled: Boolean!
  id: ID!
  tokenAuction: TokenAuction!
}

"""
The connection type for AuctionReminder.
"""
type AuctionReminderConnection {
  """
  A list of edges.
  """
  edges: [AuctionReminderEdge!]!

  """
  A list of nodes.
  """
  nodes: [AuctionReminder!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type AuctionReminderEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: AuctionReminder
}

input AuthorizationApprovalInput {
  baseWithdrawalApproval: BaseWithdrawalApprovalInput
  ethereumBankTransferApproval: EthereumBankTransferApprovalInput
  fingerprint: String!
  mangopayApplePayApproval: MangopayApplePayApprovalInput
  mangopayWalletTransferApproval: MangopayWalletTransferApprovalInput
  starkexLimitOrderApproval: StarkexApprovalInput
  starkexTransferApproval: StarkexApprovalInput
  starkexV6TokenTransferApproval: StarkexV6TokenTransferApprovalInput
}

"""
Object that can be an operation of an Authorization
"""
union AuthorizationOperation = TokenAuction | TokenBid | TokenOffer | TokenPrimaryOffer

type AuthorizationRequest implements Node {
  cancelledAt: ISO8601DateTime
  consumedAt: ISO8601DateTime
  createdAt: ISO8601DateTime
  fingerprint: String!
  id: ID!
  operation: AuthorizationOperation!
  provisionedAt: ISO8601DateTime
  request: Request!
  reservedAt: ISO8601DateTime
  status: AuthorizationStatus!
}

"""
The connection type for AuthorizationRequest.
"""
type AuthorizationRequestConnection {
  """
  A list of edges.
  """
  edges: [AuthorizationRequestEdge!]!

  """
  A list of nodes.
  """
  nodes: [AuthorizationRequest!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type AuthorizationRequestEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: AuthorizationRequest
}

enum AuthorizationStatus {
  CANCELLED
  CONSUMED
  CREATED
  PROVISIONED
  RESERVED
}

"""
A user notification regarding an auto claim.
"""
type AutoClaimNotification implements Node & NotificationInterface {
  anyCard: AnyCardInterface
  body: String!
  cardShardRewardConfig: CardShardRewardConfig
  createdAt: ISO8601DateTime!
  deeplinkUrl: String!
  iconUrl: String!
  id: ID!
  important: Boolean!
  markdownBody: String!
  name: String!
  pictureUrl: String
  read: Boolean!
  sport: SportOrShared
  task: TaskInterface
  title: String!
  user: CurrentUser!
}

"""
A player average last score
"""
type AverageLastScore implements AverageLastScoreInterface & Node {
  averageValueAllAround: Float!
  averageValueDecisive: Float!
  averageValueTotal: Float!
  id: ID!
  lastIndividualScores: [Float]!
  lastIndividualStats: [AnyAverageStatWithValueInterface!]!
  percentageOfGamesPlayed: Float!
}

interface AverageLastScoreInterface {
  id: ID!
  lastIndividualScores: [Float]!
  lastIndividualStats: [AnyAverageStatWithValueInterface!]!
  percentageOfGamesPlayed: Float!
}

enum AverageLastScoreLocation {
  AWAY
  HOME
}

enum AverageLastScoreSpan {
  LAST_FIFTEEN
  LAST_FIVE
  LAST_FORTY
  LAST_TEN
  SEASON
}

enum AverageLimit {
  LAST_10
  LAST_15
  LAST_40
  LAST_5
  SEASON
}

enum AveragePlayerScore {
  LAST_FIFTEEN_AVERAGE_ALL_AROUND_SCORE
  LAST_FIFTEEN_AVERAGE_DECISIVE_SCORE
  LAST_FIFTEEN_SO5_AVERAGE_SCORE
  LAST_FIVE_AVERAGE_ALL_AROUND_SCORE
  LAST_FIVE_AVERAGE_DECISIVE_SCORE
  LAST_FIVE_SO5_AVERAGE_SCORE
  LAST_FORTY_AVERAGE_ALL_AROUND_SCORE
  LAST_FORTY_AVERAGE_DECISIVE_SCORE
  LAST_FORTY_SO5_AVERAGE_SCORE
  LAST_TEN_PLAYED_SO5_AVERAGE_SCORE
  SEASON_AVERAGE_SCORE
}

type AverageScoreOpenBoundaries {
  averageType: AveragePlayerScore!
  count: Int!
  max: Int
  min: Int
}

type AverageScoresRule {
  immuneAppearances: Int
  max: Int!
}

enum AverageStat {
  ACCURATE_PASS
  ASSIST_PENALTY_WON
  ATT_FREEKICK_TOTAL
  ATT_PEN_GOAL
  ATT_PEN_MISS
  ATT_PEN_POST
  ATT_PEN_TARGET
  BIG_CHANCE_CREATED
  CLEAN_SHEET
  CLEAN_SHEET_60
  CLEARANCE_OFF_LINE
  CORNER_TAKEN
  CROSS_ACCURACY
  DUEL_WON
  EFFECTIVE_CLEARANCE
  ERROR_LEAD_TO_GOAL
  ERROR_LEAD_TO_SHOT
  FORMATION_PLACE
  FOULS
  FREEKICK_CROSS
  GAME_STARTED
  GOALS
  GOALS_CONCEDED
  GOAL_ASSIST
  GOAL_KICKS
  INTERCEPTION_WON
  LAST_MAN_TACKLE
  LOST_CORNERS
  MINS_PLAYED
  ONTARGET_SCORING_ATT
  OWN_GOALS
  PARRIES
  PASS_ACCURACY
  PENALTIES_SAVED
  PENALTY_CONCEDED
  PENALTY_KICK_MISSED
  PENALTY_SAVE
  PENALTY_TAKEN
  PENALTY_WON
  RED_CARD
  SAVES
  SET_PIECE_TAKEN
  SHOT_ACCURACY
  SHOT_EFFICIENCY
  SINGLE_GOAL_GAME
  THREE_GOALS_CONCEDED
  TOTAL_CLEARANCE
  TOTAL_PASS
  TOTAL_SCORING_ATT
  TOTAL_TACKLE
  WAS_FOULED
  WON_CONTEST
  WON_TACKLE
  YELLOW_CARD
}

enum Award {
  BUYER
  COACH
  SCOUT
}

enum AwardCategory {
  COLLECTOR
  GENERAL_MANAGER
  MANAGER
}

input BackupPrivateKeyRecoveryInput {
  encryptedSymmetricKey: String!
  iv: String!
  payload: String!
  rsaEncryptionKey: String
  rsaPublicKey: String!
}

"""
A Mangopay bank account type
"""
union BankAccount = CaBankAccount | GbBankAccount | IbanBankAccount | OtherBankAccount | UsBankAccount

"""
The connection type for BankAccount.
"""
type BankAccountConnection {
  """
  A list of edges.
  """
  edges: [BankAccountEdge]

  """
  A list of nodes.
  """
  nodes: [BankAccount]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type BankAccountEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: BankAccount
}

"""
Bank account interface
"""
interface BankAccountInterface {
  country: Country!
  id: ID!
  ownerAddress: MangopayBankAccountOwnerAddress
  ownerName: String
  status: MangopayBankAccountStatus
}

"""
A Mangopay Bank Account Owner Address object
"""
input BankAccountOwnerAddressInput {
  addressLine1: String!
  addressLine2: String
  city: String!
  countryCode: String!
  postalCode: String!
  region: String
}

enum BankAccountType {
  CA
  GB
  IBAN
  OTHER
  US
}

"""
A player average last score
"""
type BaseAverageLastScore implements AverageLastScoreInterface & Node {
  id: ID!
  lastIndividualScores: [Float]!
  lastIndividualStats: [AnyAverageStatWithValueInterface!]!
  percentageOfGamesPlayed: Float!
}

"""
A base withdrawal
"""
type BaseChainWithdrawal implements Node {
  createdAt: ISO8601DateTime!
  feeAmount: MonetaryAmount!
  id: ID!
  status: WithdrawalStatus!
  to: String!
  transactionHash: String
  user: User!
  withdrawalAmount: MonetaryAmount!
}

input BaseWithdrawalApprovalInput {
  deadline: String!
  feeAmount: WeiAmount!
  salt: String!
  signature: String!
}

"""
A base withdrawal authorization request
"""
type BaseWithdrawalAuthorizationRequest {
  deadline: String!
  destinationAddress: String!
  feeAmount: WeiAmount!
  id: String!
  salt: String!
  senderAddress: String!
  withdrawalAmount: WeiAmount!
}

enum BaseballAverageStatType {
  HITTING_AT_BASE
  HITTING_AT_PLATE
  HITTING_CAUGHT_STEALING
  HITTING_DOUBLES
  HITTING_HIT_BY_PITCH
  HITTING_HOME_RUNS
  HITTING_RUNS
  HITTING_RUNS_BATTED_IN
  HITTING_SINGLES
  HITTING_STOLEN_BASES
  HITTING_STRIKEOUTS
  HITTING_TRIPLES
  HITTING_WALKS
  PITCHING_EARNED_RUNS
  PITCHING_HITS_ALLOWED
  PITCHING_HIT_BATSMEN
  PITCHING_HOLDS
  PITCHING_INNINGS_PITCHED
  PITCHING_NO_HITTERS
  PITCHING_PITCH_COUNT
  PITCHING_RELIEF_APPEARANCE
  PITCHING_SAVES
  PITCHING_STRIKEOUTS
  PITCHING_WALKS
  PITCHING_WINS
}

type BaseballAverageStatWithValueType implements AnyAverageStatWithValueInterface {
  lastValues: [Float!]
  stat: BaseballAverageStatType!
  value: Float
}

"""
A baseball card
"""
type BaseballCard implements AnyCardInterface & Node & WithSubscriptionsInterface {
  activeSuspensions(so5LeaderboardSlug: String!): [Suspension!]!
  activeTaskAppearances: [TaskAppearanceInterface!]!
  anyPlayer: AnyPlayerInterface!
  anyPositions: [Position!]!
  anyTeam: TeamInterface!
  assetId: ID!
  availableCardBoosts: [CardBoost!]!
  averageScore(type: AveragePlayerScore!): Float
  backPictureUrl: String!
  baseballPlayer: BaseballPlayer!
  blueprint: Blueprint
  bonuses(so5LeaderboardSlug: String): [So5AppearanceBonusInterface!]!
  bonusesAfterTransfer(so5LeaderboardSlug: String): [So5AppearanceBonusInterface!]!
  borderRadius: Int!
  cardCollectionCards: [CardCollectionCard!]!
  cardEditionName: String
  cardPrice: Int
  cardStats: CardStats
  collection: Collection
  collectionIncreaseScoreBreakdownAfterTransfer: CardCollectionCardScoreBreakdown
  collectionScoringMatrix: [CardCollectionScoringMatrix!]!
  concurrentSo5Lineups(so5FixtureSlug: String, so5LeaderboardSlug: String): [So5Lineup!]!
  contractAddress: EthereumAddress
  currentUserSubscription: EmailSubscription
  decks: [Deck!]!
  delayedReveal: Boolean
  displayRarity: String!
  dropRank: Int
  eligiblePlayerGameScores(so5LeaderboardSlug: String): [PlayerGameScoreInterface!]!
  eligibleUpcomingLeagueTracks: [So5LeagueTrack!]!
  ethereumId: String!
  ethereumOwner: TokenOwner
  formattedCardEditionName: String

  """
  Current card level
  """
  grade: Int!
  gradeAfterTransfer: Int!
  id: ID!
  inSeasonEligible: Boolean!
  inSeasonUntil: ISO8601DateTime
  ipfsPictureUrl: String
  ipfsUrl: String
  lastLeveledUpAt: ISO8601DateTime
  latestEnglishAuction: TokenAuction
  latestPrimaryOffer: TokenPrimaryOffer
  levelUpAppliedCount: Int!
  liveSingleBuyOffers: [TokenOffer!]!
  liveSingleSaleOffer: TokenOffer

  """
  So5Lineup that this card is being used in for the live So5Fixture
  """
  liveSo5Lineup: So5Lineup
  loanedToken: LoanedToken

  """
  Returns the lowest price card of the same player, rarity and season
  """
  lowestPriceCard: AnyCardInterface

  """
  Returns the lowest price card of the same player and rarity
  """
  lowestPriceCardAnySeason: AnyCardInterface
  maxLevelUpAppliedCount: Int!
  myMintedSingleSaleOffer: TokenOffer
  name: String!
  nextLevelUpAvailableAt: ISO8601DateTime

  """
  So5Lineups that this card is being used in for the opened So5Fixtures
  """
  openedSo5Lineups: [So5Lineup!]!
  ownerSince: ISO8601DateTime
  ownershipHistory: [TokenOwner!]!
  pendingWithdrawal: TokenWithdrawal
  pictureUrl(derivative: String = "tinified"): String
  playerLoyaltyBoost: RewardBoost!

  """
  Total card bonus (XP + Season bonus)
  """
  power(so5LeaderboardSlug: String = null): String!

  """
  Total card bonus after transfer
  """
  powerAfterTransfer(so5LeaderboardSlug: String = null): String!
  powerBreakdown(so5LeaderboardSlug: String = null): PowerBreakdown!
  powerMalusAfterTransfer: String!
  previouslyOwnedCard: Boolean
  priceRange: Range
  privateMinPrices: MonetaryAmount
  publicMinPrices: MonetaryAmount
  rarityTyped: Rarity!
  revealableCardCampaign: RevealableCardCampaign
  sealable: Boolean!
  sealableFor: Int
  sealed: Boolean!
  sealedAt: ISO8601DateTime
  sealedFor: Int
  sealedPlayerLoyaltyBoost: RewardBoost!
  seasonYear: Int!
  secondaryMarketFeeEnabled: Boolean!

  """
  Returns all live or minted offers where this token is included in the sender
  side. Returns only if authenticated and sender of the offers.
  """
  sentInLiveOffers: [TokenOffer!]
  serialNumber: Int!
  signedAddCardPrice: SignedCardPrice
  signedDropCardPrice: SignedCardPrice
  singleCivilYear: Boolean!
  slug: String!
  specialEdition: String
  sport: Sport!
  sportSeason: SportSeason!
  subscriptionsCount: Int!
  supply: Int!
  threeDimensional: Boolean!
  threeDimensionalAsset: ThreeDimensionalAsset
  tokenOwner: TokenOwner
  tradeableStatus: Tradeable!
  unsealableAt: ISO8601DateTime
  unsealedAt: ISO8601DateTime
  unsealedPlayerLoyaltyBoost: RewardBoost!
  user: User
  videoUrl(derivative: String = null): String
  walletStatus: WalletStatus!
  xp: Int!
  xpAfterTransfer: Int!

  """
  XP start range of current card level
  """
  xpNeededForCurrentGrade: Int!

  """
  XP end range of current card level
  """
  xpNeededForNextGrade: Int
}

"""
A Baseball team in a competition
"""
type BaseballContestantType implements AnyContestantInterface & Node {
  gamesDrawn: Int!
  gamesLost: Int!
  gamesPlayed: Int!
  gamesWon: Int!
  id: ID!
  rank: Int
  rankStatus: String
  rankType: TournamentCalendarRankType
  team: TeamInterface!
}

"""
A baseball player
"""
type BaseballPlayer implements AnyPlayerInterface & WithSubscriptionsInterface {
  abbreviatedName: String!
  activeClub: Club
  activeClubMembership: Membership
  activeInjuries: [Injury!]!
  activeNationalTeam: NationalTeam
  activeSuspensions: [Suspension!]!
  age: Int!
  allAverageStats(limit: AverageLimit = LAST_15): [BaseballAverageStatWithValueType!]!

  """
  All player So5Scores ordered by descending game date
  """
  allPlayerGameScores(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int
    from: ISO8601DateTime

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    position: Position
    to: ISO8601DateTime
  ): PlayerGameScoreInterfaceConnection!
  allTotalStats: [BaseballAverageStatWithValueType!]!
  anyCardWithLivePrimaryOffer(rarity: Rarity): AnyCardInterface

  """
  The `any_cards` field cannot be nested within a list.
  """
  anyCards(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String
    age: Int
    assetIds: [String!]

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    classicOnly: Boolean
    customCardEditionName: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int
    inActiveCompetitions: [String!]
    inOrderOfRarities: Boolean @deprecated(reason: "Use `sorts` instead")
    inSeasonEligible: Boolean

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    owned: Boolean
    ownedByMe: Boolean
    ownedSinceAfter: ISO8601DateTime
    playerSlugs: [String!]

    """
    positions of the card capitalized
    """
    positions: [Position!]

    """
    rarities of the card in lowercase
    """
    rarities: [Rarity!]
    recentlyOwnedFirst: Boolean @deprecated(reason: "Use `sorts` instead")
    revealable: Boolean
    revealableFirst: Boolean @deprecated(reason: "Use `sorts` instead")
    seasonStartYears: [Int!]
    serialNumber: Int
    shirtNumber: Int
    slugs: [String!]
    sorts: [CardSort!]
    sport: Sport
    teamSlugs: [String!]
    withinDeckFirst: String
  ): AnyCardInterfaceConnection!

  """
  The `any_future_games` field cannot be nested within a list.
  """
  anyFutureGames(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    so5FixtureEligible: Boolean = false
  ): AnyGameInterfaceConnection!
  anyGameStats(last: Int!, lowCoverage: Boolean = true, so5FixtureSlug: String): [AnyPlayerGameStatsInterface]!
  anyGamesForFixture(so5FixtureSlug: String!): [AnyGameInterface!]!
  anyGamesForLeaderboard(so5LeaderboardSlug: String!): [AnyGameInterface!]!

  """
  The `any_past_games` field cannot be nested within a list.
  """
  anyPastGames(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): AnyGameInterfaceConnection!
  anyPositions: [Position!]!

  """
  Returns the 3 most followed players in the player's club The `any_related_players` field cannot be nested within a list.
  """
  anyRelatedPlayers: [AnyPlayerInterface!]!

  """
  The `any_so5_average_last_score` field cannot be nested within a list.
  """
  anySo5AverageLastScore(competitionSlug: String, location: AverageLastScoreLocation, position: Position!, span: AverageLastScoreSpan!, teamSlug: String): AverageLastScoreInterface
  appearances: Int!
  avatarPictureUrl: String!
  averageScore(position: Position, type: AveragePlayerScore!): Float
  averageStats(limit: AverageLimit! = LAST_15, type: BaseballAverageStatType!): Float
  batHand: PreferredSide
  beforeLastOwningMembership: Membership
  birthDay: ISO8601Date
  cardPositions: [Position!]!
  cardPrice(rarity: Rarity!): Int

  """
  Cards of this player that are owned by a manager. Updated once a day.
  """
  cardSupply: [CardSeasonSupply!]!
  careerSeasons(
    """
    If defined only return seasons for competitions of that type
    """
    type: CompetitionType = null
  ): [Season!]!
  clubMemberships: [Membership!]!
  commonPlayer(rarity: Rarity!): CommonPlayer
  country: Country!
  currentSeason: Season
  currentUserSubscription: EmailSubscription
  displayName: String!

  """
  The `eligible_so5_competitions` field cannot be nested within a list.
  """
  eligibleSo5Competitions: [So5Competition!]!
  firstName: String!
  fullPictureUrl: String!
  hasSo5LineupForFixture(so5FixtureSlug: String!): Boolean!
  height: Int
  hitterAverageScore(type: AveragePlayerScore!): Float
  hitterPlayerGameScore(gameId: ID!): BaseballPlayerGameScore
  id: UUID! @deprecated(reason: "use slug")
  injuries: [Injury!]!
  isActive: Boolean!
  lastClub: Club
  lastFifteenSo5Appearances: Int
  lastFiveSo5Appearances: Int
  lastFortySo5Appearances: Int
  lastName: String!

  """
  Get the last 2 cards you own of the player
  """
  lastOwnedCards(
    inSeasonEligible: Boolean

    """
    rarities of the card in lowercase
    """
    rarities: [Rarity!]
    rarity: Rarity @deprecated(reason: "Use rarities instead")
  ): [AnyCardInterface!]!
  lastTenSo5Appearances: Int
  lowestPriceAnyCard(inSeason: Boolean, rarity: Rarity): AnyCardInterface
  matchName: String!
  memberships: [Membership!]!
  mySo5LeaderboardContendersForFixture(so5FixtureSlug: String!): [So5LeaderboardContender!]!
  news(last: Int!): [AnyPlayerNewsUpdate!]!
  nextClassicFixtureProjectedGrade: PlayerGameScoreProjection
  nextClassicFixtureProjectedScore: Float
  nextDailyFixtureProjectedGrade: PlayerGameScoreProjection
  nextDailyFixtureProjectedScore: Float
  nextGame(so5FixtureEligible: Boolean = false): AnyGameInterface
  ownedCardsCount(rarity: Rarity, seasonEligibility: SeasonEligibility): Int!
  pitcherAverageScore(type: AveragePlayerScore!): Float
  pitcherPlayerGameScore(gameId: ID!): BaseballPlayerGameScore
  playerGameScore(gameId: ID!, position: Position): PlayerGameScoreInterface

  """
  Up to 15 last So5Scores used in a So5Fixture
  """
  playerGameScores(last: Int!, lowCoverage: Boolean = true, position: Position): [PlayerGameScoreInterface]!

  """
  The `public_watchlists` field cannot be nested within a list.
  """
  publicWatchlists(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): WatchlistConnection

  """
  Up to 15 last So5Scores.score used in a So5Fixture
  """
  rawPlayerGameScores(last: Int!, lowCoverage: Boolean = true, position: Position): [Float]!
  seasonAppearances: Int
  shirtNumber: Int!
  signedAddCardPrice(rarity: Rarity!): SignedCardPrice
  signedDropCardPrice(rarity: Rarity!): SignedCardPrice
  slug: String!

  """
  The `so5_average_last_score` field cannot be nested within a list.
  """
  so5AverageLastScore(competitionSlug: String, location: AverageLastScoreLocation, position: Position!, span: AverageLastScoreSpan!, teamSlug: String): AverageLastScore @deprecated(reason: "Use any_so5_average_last_score instead")
  sport: Sport!
  squaredPictureUrl: String!
  subscriptionsCount: Int!
  suspensions: [Suspension!]!
  throwHand: PreferredSide

  """
  The `token_prices` field cannot be nested within a list.
  """
  tokenPrices(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int
    includePrivateSales: Boolean

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    rarity: Rarity!
    season: Int
    seasonEligibility: SeasonEligibility
    since: ISO8601DateTime
  ): TokenPriceConnection!
  totalStats(type: BaseballAverageStatType!): Float
  user: User
  weight: Int
}

"""
Stats of a player for a game
"""
type BaseballPlayerGameScore implements Node & PlayerGameScoreInterface {
  anyGame: AnyGameInterface!
  anyPlayer: AnyPlayerInterface!
  anyPlayerGameStats: AnyPlayerGameStatsInterface!
  baseballGame: GameOfBaseball!
  baseballPlayer: BaseballPlayer!
  baseballPlayerGameStats: PlayerGameStatsBaseball!
  detailedScore: [StatScore!]!
  id: ID!
  position: String!
  positionTyped: Position!
  projectedScore: Float!
  projection: PlayerGameScoreProjection
  score: Float!
  scoreStatus: ScoreStatus!
  scoringVersion: Int!
}

enum BaseballPosition {
  CATCHER
  DESIGNATED_HITTER
  FIRST_BASE
  OUTFIELD
  RELIEF_PITCHER
  SECOND_BASE
  SHORTSTOP
  STARTING_PITCHER
  THIRD_BASE
  UNKNOWN
}

"""
Stats of a team in a game
"""
type BaseballTeamGameStats implements TeamGameStatsInterface {
  id: ID!
  stats: [SportStat!]
}

"""
A Sorare Baseball user sport specific profile
"""
type BaseballUserSportProfile implements Node & UserSportProfileInterface {
  achievementBadges: [SkinShopItem]
  availableOnboardingLeaderboards(rarity: Rarity): Boolean!
  background: SkinShopItem
  bannerColor: String
  bannerUrl: String
  blueprintCardsCount: Int!
  clubBadge: SkinShopItem
  clubName: String
  commonGameOnboarded: Boolean!

  """
  The `daily_claim_tasks` field cannot be nested within a list.
  """
  dailyClaimTasks: [FootballManagerTask!]!

  """
  Get a deck of cards
  """
  deck(name: String, slug: String): Deck

  """
  The `decks` field cannot be nested within a list.
  """
  decks(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Full text search query to filter decks
    """
    query: String
  ): DeckConnection!
  favoriteTeam: TeamInterface

  """
  The `forced_onboarding_so5_leaderboard` field cannot be nested within a list.
  """
  forcedOnboardingSo5Leaderboard: So5Leaderboard @deprecated(reason: "Not used anymore")
  gallerySocialPictureUrls: SocialPictureDerivative!

  """
  The `highlighted_deck` field cannot be nested within a list.
  """
  highlightedDeck: Deck
  id: ID!
  managerProfileSocialPictureUrls: SocialPictureDerivative!

  """
  The `my_favorite_team_onboarding_so5_leaderboard` field cannot be nested within a list.
  """
  myFavoriteTeamOnboardingSo5Leaderboard: So5Leaderboard @deprecated(reason: "Not used anymore")
  onboarded: Boolean!
  onboardingLeaderboards(rarity: Rarity): [OnboardingLeaderboard!]!
  onboardingSo5Fixture: So5Fixture

  """
  The `onboarding_so5_leaderboard` field cannot be nested within a list.
  """
  onboardingSo5Leaderboard: So5Leaderboard
  onboardingStatus: UserSportProfileOnboardingStatus! @deprecated(reason: "Not used anymore")

  """
  A frame to apply on top of user profile picture
  """
  pictureFrame: PictureFrameShopItem
  pictureFrameUrl(derivative: String = "tinified"): String @deprecated(reason: "Use pictureFrame")
  playerLoyaltyBoost(editedSeasonsCount: Int!, sealedCards: Int!): RewardBoost!
  rarityVaultBoost(rarity: Rarity!, sport: Sport!, unseals: Int = 0): RewardBoost!
  remainingUnsealsInPeriod(rarity: Rarity!): Int!
  selectedUserSportStatistics: [UserSportStatistic]!
  shieldUrl: String
  socialPictureFingerprint: String!
  tournamentEligibilities: [TournamentEligibility!]!
  userSportStatistics: [UserSportStatistic!]!
  variant: UserSportProfileVariant!
}

enum BasketballAverageStatType {
  ASSISTS
  BLOCKS
  DOUBLE_DOUBLE
  MINS_PLAYED
  POINTS
  REBOUNDS
  STEALS
  THREE_POINTS_MADE
  TRIPLE_DOUBLE
  TURNOVERS
}

type BasketballAverageStatWithValueType implements AnyAverageStatWithValueInterface {
  lastValues: [Float!]
  stat: BasketballAverageStatType!
  value: Float
}

"""
A Basketball team in a competition
"""
type BasketballContestantType implements AnyContestantInterface & Node {
  gamesDrawn: Int!
  gamesLost: Int!
  gamesPlayed: Int!
  gamesWon: Int!
  id: ID!
  rank: Int
  rankStatus: String
  rankType: TournamentCalendarRankType
  team: TeamInterface!
}

"""
Stats of a player for a game
"""
type BasketballPlayerGameScore implements Node & PlayerGameScoreInterface {
  anyGame: AnyGameInterface!
  anyPlayer: AnyPlayerInterface!
  anyPlayerGameStats: AnyPlayerGameStatsInterface!
  basketballGame: GameOfBasketball!
  basketballPlayer: NBAPlayer!
  basketballPlayerGameStats: PlayerGameStatsBasketball!
  detailedScore: [StatScore!]!
  id: ID!
  position: String!
  positionTyped: Position!
  projectedScore: Float!
  projection: PlayerGameScoreProjection
  score: Float!
  scoreStatus: ScoreStatus!
  scoringVersion: Int!
}

"""
Stats of a team in a game
"""
type BasketballTeamGameStats implements TeamGameStatsInterface {
  id: ID!
  stats: [SportStat!]
}

input BenchFilterInput {
  deckId: String

  """
  The card grades to filter on
  """
  grades: RangeInput
  inSeasonEligible: Boolean

  """
  Whether to include cards with no game in this fixture (default false)
  """
  includeNoGame: Boolean

  """
  Whether to filter on cards with players injured or suspended (default false)
  """
  includeUnavailablePlayers: Boolean

  """
  Whether to include cards already used in this fixture (default false)
  """
  includeUsed: Boolean
  lastFifteenSo5AverageScore: RangeInput
  lastTenPlayedSo5AverageScore: RangeInput

  """
  Whether to include cards that plays from home
  """
  playingHomeOnly: Boolean

  """
  The card positions to filter on
  """
  positions: [Position!]

  """
  Full text search query to filter cards
  """
  query: String

  """
  The card rarities to filter on (default to all rarities)
  """
  rarities: [Rarity!]

  """
  Objects already selected in the current lineup. It can be a So5Appearance or a ComposeTeamBenchObject.
  """
  selectedObjectIds: [String!]
  so5LineupId: String
  sortType: EligibleCardsSort

  """
  The player starting prediction to filter on
  """
  starterOddsBasisPointsRange: RangeInput
}

enum BenchPlayerScore {
  LAST_FIFTEEN_AVERAGE_ALL_AROUND_SCORE
  LAST_FIFTEEN_AVERAGE_DECISIVE_SCORE
  LAST_FIFTEEN_SO5_AVERAGE_SCORE
  LAST_FIVE_AVERAGE_ALL_AROUND_SCORE
  LAST_FIVE_AVERAGE_DECISIVE_SCORE
  LAST_FIVE_SO5_AVERAGE_SCORE
  LAST_FORTY_AVERAGE_ALL_AROUND_SCORE
  LAST_FORTY_AVERAGE_DECISIVE_SCORE
  LAST_FORTY_SO5_AVERAGE_SCORE
  LAST_TEN_PLAYED_SO5_AVERAGE_SCORE
  PROJECTED_GRADE
  PROJECTED_SCORE
  SEASON_AVERAGE_SCORE
}

type BenchSort {
  direction: SortingOption!
  typeData: SortingType!
}

enum BenchSortType {
  LAST_FIFTEEN_AVERAGE_ALL_AROUND_SCORE
  LAST_FIFTEEN_AVERAGE_DECISIVE_SCORE
  LAST_FIFTEEN_SO5_AVERAGE_SCORE
  LAST_FIVE_AVERAGE_ALL_AROUND_SCORE
  LAST_FIVE_AVERAGE_DECISIVE_SCORE
  LAST_FIVE_SO5_AVERAGE_SCORE
  LAST_FORTY_AVERAGE_ALL_AROUND_SCORE
  LAST_FORTY_AVERAGE_DECISIVE_SCORE
  LAST_FORTY_SO5_AVERAGE_SCORE
  LAST_TEN_PLAYED_SO5_AVERAGE_SCORE
  POPULARITY
  POPULAR_STARTERS
  PROJECTED_GRADE
  PROJECTED_SCORE
  SEASON_AVERAGE_SCORE
}

type BidToEarnReward implements Node {
  bid: TokenBid
  bidderRank: Int!
  id: ID!
  reward: AnyRewardInterface!
}

"""
a billing address
"""
input BillingAddressInput {
  addressLine1: String!
  addressLine2: String
  city: String!
  countryCode: String!
  postalCode: String!
  region: String
}

enum Blockchain {
  BASE
  ETHEREUM
  LOOM
  NO_BLOCKCHAIN
  STARKEX_V6
  STARKWARE
}

"""
Object that have a blockchain address to interact with the platform
"""
union BlockchainUser = AnonymousUser | User

"""
Blockchain info
"""
interface BlockchainUserInterface {
  cardsCount: Int!
  ethVaultId: Int
  ethereumAddress: EthereumAddress
  sorareAddress: EthereumAddress
  starkKey: String
}

type Blueprint {
  gltfUrl: String!
  id: String!
  launchDate: ISO8601DateTime
  newPositionsWarning: [Position!]
  pictureUrl(derivative: String = "tinified"): String
  revealDate: ISO8601DateTime
  revealStatus: BlueprintRevealStatus!
  revealVideoUrl(orientation: Orientation!): String
  shinyRevealeableOdds: Float
  teamTransferWarning: Boolean!
}

enum BlueprintRevealStatus {
  """
  Blueprint reveal is delayed and reveal date is unknown
  """
  DELAYED

  """
  Blueprint will be revealable at the reveal date
  """
  NOT_YET_REVEALABLE

  """
  Blueprint can now be revealed
  """
  REVEALABLE

  """
  Blueprint has already been revealed
  """
  REVEALED

  """
  Blueprint will never be revealable
  """
  UNREVEALABLE
}

enum BonusOrdinalRatingEnum {
  EXCEPTIONAL
  HIGH
  LOW
  MEDIUM
  VERY_HIGH
  VERY_LOW
}

type BoostLevel {
  boostBasisPoints: Int!
  milestone: Int!
  points: Int!
}

"""
A Mangopay BrowserInfo object
"""
input BrowserInfoInput {
  colorDepth: Int!
  language: String!
  screenHeight: Int!
  screenWidth: Int!
  timeZoneOffset: Int!
}

"""
A bucket
"""
type Bucket {
  count: Int!
  max: Int!
  min: Int!
}

"""
A Mangopay Canadian bank account type
"""
type CaBankAccount implements BankAccountInterface & Node {
  """
  Account number (last 4 digits)
  """
  accountNumber: String!
  bankName: String

  """
  3-digit number assigned to branches of Canadian financial institutions
  """
  branchCode: String
  country: Country!
  id: ID!

  """
  3-digit number assigned to Canadian financial institutions
  """
  institutionNumber: String!
  ownerAddress: MangopayBankAccountOwnerAddress
  ownerName: String
  status: MangopayBankAccountStatus
}

"""
A card representing a professional football player
"""
type Card implements AnyCardInterface & CardGameInterface & Node & WithSubscriptionsInterface {
  activeSuspensions(so5LeaderboardSlug: String!): [Suspension!]!
  activeTaskAppearances: [TaskAppearanceInterface!]!
  age: Int

  """
  All player So5Scores ordered by descending game date
  """
  allSo5Scores(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): So5ScoreConnection!
  anyPlayer: AnyPlayerInterface!
  anyPositions: [Position!]!
  anyTeam: TeamInterface!
  assetId: ID!
  availableCardBoosts: [CardBoost!]!
  averageScore(type: AveragePlayerScore!): Float
  backPictureUrl: String!
  birthTxHash: String
  blockchain: String!
  blockchainId: String
  blueprint: Blueprint
  bonuses(so5LeaderboardSlug: String): [So5AppearanceBonusInterface!]!
  bonusesAfterTransfer(so5LeaderboardSlug: String): [So5AppearanceBonusInterface!]!
  borderRadius: Int!
  cardCollectionCards: [CardCollectionCard!]!
  cardEditionName: String
  cardPrice: Int
  cardStats: CardStats
  collection: Collection
  collectionIncreaseScoreBreakdownAfterTransfer: CardCollectionCardScoreBreakdown
  collectionScoringMatrix: [CardCollectionScoringMatrix!]!
  concurrentSo5Lineups(so5FixtureSlug: String, so5LeaderboardSlug: String): [So5Lineup!]!
  contractAddress: EthereumAddress
  coverageStatus: CardCoverageStatus!
  createdAt: ISO8601DateTime!
  currentUserSubscription: EmailSubscription
  customCardEditionName: String
  decks: [Deck!]!
  delayedReveal: Boolean
  displayRarity: String!
  dropRank: Int
  eligiblePlayerGameScores(so5LeaderboardSlug: String): [PlayerGameScoreInterface!]!
  eligibleUpcomingLeagueTracks: [So5LeagueTrack!]!
  ethereumId: String!
  ethereumOwner: TokenOwner
  footballPlayer: Player!
  formattedCardEditionName: String
  gameForLeague(so5LeaderboardSlug: String = null, so5LeagueSlug: String = null): Game

  """
  Current card level
  """
  grade: Int!
  gradeAfterTransfer: Int!
  id: ID!
  inRollup: Boolean!
  inSeasonEligible: Boolean!
  inSeasonUntil: ISO8601DateTime
  ipfsPictureUrl: String
  ipfsUrl: String
  lastLeveledUpAt: ISO8601DateTime
  latestEnglishAuction: TokenAuction
  latestPrimaryOffer: TokenPrimaryOffer
  levelUpAppliedCount: Int!
  liveSingleBuyOffers: [TokenOffer!]!
  liveSingleSaleOffer: TokenOffer

  """
  So5Lineup that this card is being used in for the live So5Fixture
  """
  liveSo5Lineup: So5Lineup
  loanedToken: LoanedToken

  """
  Returns the lowest price card of the same player, rarity and season
  """
  lowestPriceCard: AnyCardInterface

  """
  Returns the lowest price card of the same player and rarity
  """
  lowestPriceCardAnySeason: AnyCardInterface
  maxLevelUpAppliedCount: Int!
  myMintedSingleSaleOffer: TokenOffer
  name: String!
  nextLevelUpAvailableAt: ISO8601DateTime
  notContractOwners: [OwnerWithRates!]!
  openForDomesticStats: Boolean!
  openForGameStats: Boolean!
  openForGameStatsCompetitions: [Competition!]!

  """
  So5Lineups that this card is being used in for the opened So5Fixtures
  """
  openedSo5Lineups: [So5Lineup!]!
  ownerSince: ISO8601DateTime
  ownershipHistory: [TokenOwner!]!
  pendingWithdrawal: TokenWithdrawal
  pictureUrl(derivative: String = "tinified"): String
  player: Player!
  playerLoyaltyBoost: RewardBoost!
  position: String! @deprecated(reason: "Use the typed version instead: positionTyped")
  positionTyped: Position!

  """
  Total card bonus (XP + Season bonus)
  """
  power(so5LeaderboardSlug: String = null): String!

  """
  Total card bonus after transfer
  """
  powerAfterTransfer(so5LeaderboardSlug: String = null): String!
  powerBreakdown(so5LeaderboardSlug: String = null): PowerBreakdown!
  powerMalusAfterTransfer: String!
  previouslyOwnedCard: Boolean
  priceRange: Range
  privateMinPrices: MonetaryAmount
  publicMinPrices: MonetaryAmount
  rarity: String!
  rarityTyped: Rarity!

  """
  Up to 10 last So5Scores.score used in a So5Fixture
  """
  rawSo5Scores(last: Int!, lowCoverage: Boolean = true): [Float]!
  revealableCardCampaign: RevealableCardCampaign
  sealable: Boolean!
  sealableFor: Int
  sealed: Boolean!
  sealedAt: ISO8601DateTime
  sealedFor: Int
  sealedPlayerLoyaltyBoost: RewardBoost!
  season: Season!
  seasonYear: Int!
  secondaryMarketFeeEnabled: Boolean!

  """
  Returns all live or minted offers where this token is included in the sender
  side. Returns only if authenticated and sender of the offers.
  """
  sentInLiveOffers: [TokenOffer!]
  serialNumber: Int!
  shirtNumber: Int
  signedAddCardPrice: SignedCardPrice
  signedDropCardPrice: SignedCardPrice
  singleCivilYear: Boolean!
  slug: String!

  """
  Up to 10 last So5Scores used in a So5Fixture
  """
  so5Scores(last: Int!, lowCoverage: Boolean = true): [So5Score]!
  specialEdition: String
  sport: Sport!
  sportSeason: SportSeason!
  starkwareTokenId: String
  subscriptionsCount: Int!
  supply: Int!
  threeDimensional: Boolean!
  threeDimensionalAsset: ThreeDimensionalAsset
  tokenOwner: TokenOwner
  tradeableStatus: Tradeable!
  u23Eligible: Boolean!
  u23EligibleUntil: ISO8601Date
  unsealableAt: ISO8601DateTime
  unsealedAt: ISO8601DateTime
  unsealedPlayerLoyaltyBoost: RewardBoost!
  user: User
  userOwner: UserOwner
  videoUrl(derivative: String = null): String
  visible: Boolean! @deprecated(reason: "Always true")
  walletStatus: WalletStatus!
  xp: Int!
  xpAfterTransfer: Int!

  """
  XP start range of current card level
  """
  xpNeededForCurrentGrade: Int!

  """
  XP end range of current card level
  """
  xpNeededForNextGrade: Int
}

type CardBoost {
  id: String!
  levelToReach: Int!
  shopItem: ClubShopItem!
  xpToGain: Int!
}

"""
CardBoostConfigType is the graphQL Type for a card boost on a leaderboard.
"""
type CardBoostConfig {
  allSeasonsBasisPoints: Int!
  inSeasonBasisPoints: Int!
  rarity: Rarity!
}

"""
A collection of cards
"""
type CardCollection implements Node {
  anyTeam: TeamInterface
  backgroundPictureUrl: String
  bannerPictureUrl: String

  """
  The `best_by_completed_at` field cannot be nested within a list.
  """
  bestByCompletedAt(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserCardCollectionConnection!

  """
  The `best_by_score` field cannot be nested within a list.
  """
  bestByScore(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserCardCollectionConnection!
  bonusThresholds: [CardCollectionBonusThreshold!]!
  emptySlotBackgroundPictureUrl: String
  id: ID!
  inSeason: Boolean!

  """
  The `my_cards_recommendation` field cannot be nested within a list.
  """
  myCardsRecommendation: [AnyCardInterface!]
  name: String!
  rarity: Rarity

  """
  The `related_shield` field cannot be nested within a list.
  """
  relatedShield: SkinShopItem
  scoreRankingSize: Int!
  scoringMatrix: [CardCollectionScoringMatrix!]!
  season: Season
  slots: [CardCollectionSlot!]!
  slotsCount: Int!
  slotsPreview(first: Int, forUserSlug: String!): [UserCardCollectionSlot!]!
  slug: String!
  snapshotted: Boolean!

  """
  The `social_picture_fingerprint` field cannot be nested within a list.
  """
  socialPictureFingerprint(forUserSlug: String!): String!

  """
  The `social_picture_urls` field cannot be nested within a list.
  """
  socialPictureUrls(forUserSlug: String!): SocialPictureDerivative!
  sportSeason: SportSeason
  subtitle: String!
  userCardCollection(forUserSlug: String!): UserCardCollection
}

"""
A card collection bonus threshold
"""
type CardCollectionBonusThreshold {
  bonus: Float!
  threshold: Float!
}

"""
A card in a collection of cards
"""
type CardCollectionCard implements Node {
  anyCard: AnyCardInterface!
  cardCollection: CardCollection!
  heldSince: ISO8601DateTime!
  highlighted: Boolean
  holdingThresholdDays: Int!
  id: ID!
  scoreBreakdown: CardCollectionCardScoreBreakdown!
  userCardCollection: UserCardCollection
}

"""
An object representing the breakdown of the score of a Card in a Card Collection
"""
type CardCollectionCardScoreBreakdown {
  firstOwner: Int!
  firstSerialNumber: Int!
  firstTimeOwnedPlayerCard: Int!
  holding: Int!
  owner: Int!
  rookie: Int!
  shirtMatchingSerialNumber: Int!
  specialEdition: Int!
  total: Int!
}

"""
The connection type for CardCollection.
"""
type CardCollectionConnection {
  competitionsCount: [CompetitionCount!]!

  """
  A list of edges.
  """
  edges: [CardCollectionEdge!]!

  """
  A list of nodes.
  """
  nodes: [CardCollection!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  raritiesCount: [RarityCount!]!
  seasonsCount: [SeasonCount!]!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type CardCollectionEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: CardCollection
}

"""
A user notification regarding a Card Collection
"""
type CardCollectionNotification implements Node & NotificationInterface {
  anyCard: Card
  body: String!
  cardCollection: CardCollection!
  cardCollectionSlot: CardCollectionSlot
  createdAt: ISO8601DateTime!
  deeplinkUrl: String!
  iconUrl: String!
  id: ID!
  important: Boolean!
  markdownBody: String!
  name: String!
  pictureUrl: String
  read: Boolean!
  shieldShopItem: SkinShopItem
  sport: SportOrShared
  title: String!
  user: CurrentUser!
}

"""
A card collection requirement on a shop item
"""
type CardCollectionRequirement {
  cardCollection: CardCollection!
  score: Int!
}

"""
A score increase of a card collection
"""
type CardCollectionScoreIncrease {
  bonusIncrease: Float!
  cardCollection: CardCollection!
  id: String!
  scoreIncrease: Int!
  userCardCollection: UserCardCollection
}

type CardCollectionScoringMatrix {
  explanation: String!
  label: String!
  name: String!
  pictureUrl: String!
  value: Int!
}

"""
A slot in a collection of cards
"""
type CardCollectionSlot implements Node {
  anyPlayer: AnyPlayerInterface!
  anyTeam: TeamInterface
  cardCollectionCards(forUserSlug: String!): [CardCollectionCard!]!
  cardPictureUrl: String!
  customCardEditionName: String
  displayedRequirements: String
  id: ID!
  player: Player!
  rarity: Rarity
  season: Season
  serialNumber: Int
  transferMarketFilters: String!
}

enum CardCollectionSortingOption {
  HIGHEST_SCORE
  LAST_CARD_ADDED
}

"""
The connection type for Card.
"""
type CardConnection {
  """
  A list of edges.
  """
  edges: [CardEdge!]!
  hasAny: Boolean!

  """
  A list of nodes.
  """
  nodes: [Card!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
A user card count breakdown
"""
type CardCount {
  common: Int!
  customSeries: Int!
  limited: Int!
  rare: Int!
  superRare: Int!
  total: Int!
  unique: Int!
}

enum CardCoverageStatus {
  FULL
  LEGEND
  NOT_COVERED
  NOT_ELIGIBLE
  PARTIAL
  SPECIAL
}

enum CardDesign {
  BASEBALL_2022
  BASEBALL_2023
  BASEBALL_2024
  BASEBALL_2025
  BASEBALL_AWARDS_2023
  FOOTBALL_2018
  FOOTBALL_2019
  FOOTBALL_2020
  FOOTBALL_2021
  FOOTBALL_2022
  FOOTBALL_2022_2023
  FOOTBALL_2023
  FOOTBALL_2024
  FOOTBALL_2025
  FOOTBALL_BLUEPRINT_2024
  FOOTBALL_EARLY_ACCESS_2025
  FOOTBALL_GC_2022
  FOOTBALL_GC_SILHOUETTE_2022
  FOOTBALL_LEGACY_LEGEND
  FOOTBALL_LEGEND
  FOOTBALL_RIVALS_2023
  FOOTBALL_SILHOUETTE_RIVALS_UNLICENSED_2024
  FOOTBALL_SILHOUETTE_UNLICENSED_2023
  FOOTBALL_SILHOUETTE_UNLICENSED_2024
  FOOTBALL_VINTAGE_2024
  NBA_2022
  NBA_2023
  NBA_2023_DRAFT
  NBA_2024
  NBA_2025
  NBA_BLUEPRINT_2024
  NBA_DRAFT_2025
  NBA_EARLY_ACCESS_2025
  NBA_RIVALS_2023
}

"""
An edge in a connection.
"""
type CardEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Card
}

"""
Enforces restrictions on specific card editions of submitted lineups
"""
type CardEditionCount {
  """
  The display name of the card edition on which this rule would apply
  """
  displayName: String!
  max: Int
  min: Int

  """
  The name of the card edition on which this rule would apply
  """
  name: String!
}

"""
Enforces restrictions on card editions of submitted lineups
"""
type CardEditionsCount {
  displayedEditions: [CardEditionCount!]!

  """
  Card editions on which restrictions are applied with their additional restrictions, if any
  """
  editions: [CardEditionCount!]!
  max: Int
  min: Int
}

"""
Card Game Interface
"""
interface CardGameInterface {
  cardCollectionCards: [CardCollectionCard!]!
  coverageStatus: CardCoverageStatus!
  gameForLeague(so5LeaderboardSlug: String = null, so5LeagueSlug: String = null): Game
  u23Eligible: Boolean!
  u23EligibleUntil: ISO8601Date
}

"""
Represents a card layout
"""
type CardLayout {
  backgroundLayers: [String!]!
  backgroundMaskUrl: String
  backgroundUrl: String
  cardDesign: CardDesign
  layers: [String!]!
  licensorUrl: String
  playerMaskUrl: String
  videoBackgroundUrl: String
}

"""
A user notification regarding a Card
"""
type CardNotification implements Node & NotificationInterface {
  anyCard: AnyCardInterface
  body: String!
  createdAt: ISO8601DateTime!
  deeplinkUrl: String!
  iconUrl: String!
  id: ID!
  important: Boolean!
  markdownBody: String!
  name: String!
  pictureUrl: String
  read: Boolean!
  sport: SportOrShared
  title: String!
  tokenWithdrawal: TokenWithdrawal
  user: CurrentUser!
  withdrawal: StarkwareWithdrawal
}

"""
A card pack
"""
type CardPack {
  cardsCount: Int!
  color(
    """
    Default to secondary
    """
    variant: ColorVariant
  ): String!
  competition: Competition
  currency: CardPackCurrency!
  pictureUrl: String!
  price: Int!
  sections: [CardPackSection!]!
  slots: [CardPackSlot!]!
  slug: String!
  teams: [TeamInterface!]!
  title: String!
}

enum CardPackCurrency {
  COMMON_ESSENCE
  COMMON_GEM
}

"""
A group of card packs
"""
type CardPackGroup {
  cardPacks: [CardPack!]!
  dailyDeal: Boolean!
  favorite: Boolean!
  featured: Boolean!
  id: String!
  nextPackRotationAt: ISO8601DateTime
  pictureUrl: String!
  title: String!
}

type CardPackReward implements AnyRewardInterface & Node {
  aasmState: RewardState!
  config: AnyRewardConfigInterface!
  id: ID!
  pack: Pack
}

"""
A card pack section
"""
type CardPackSection {
  description: String!
  iconUrl: String!
}

"""
A card pack slot
"""
type CardPackSlot {
  playingStatusOdds: [CardPackSlotPlayingStatusOdd!]!
  positionName: String!
  positionShortName: String!
  positions: [Position!]!
  rankOdds: [CardPackSlotRankOdd!]!
}

"""
A card pack slot rank odd
"""
type CardPackSlotPlayingStatusOdd {
  probabilityBasisPoint: Int!
  starter: Boolean!
}

"""
A card pack slot rank odd
"""
type CardPackSlotRankOdd {
  dropRank: Int!
  probabilityBasisPoint: Int!
}

"""
A CardPack Reward Config
"""
type CardPacksRewardConfig implements AnyRewardConfigInterface {
  boostedRewardConfigs: [AnyRewardConfigInterface!]
  cardPack: CardPack
  id: ID!
}

"""
A card pull
"""
type CardPull implements Node {
  chest: CardShardsChest!
  expiresAt: ISO8601DateTime!
  id: ID!

  """
  The `pool_key_shards_counts` field cannot be nested within a list.
  """
  poolKeyShardsCounts: [PoolKeyShardsCount!]!
  pullConfig: CardPullConfig!
  pulledCards: [CardPullCard!]!
  rarity: Rarity!
  refundAmountInShards: Int!
  sport: Sport!
}

"""
A card pulled from a card pull
"""
type CardPullCard implements Node {
  competition: Competition
  country: Country
  fiftyFiftySelected: Boolean
  id: ID!
  picked: Boolean!
  revealedCard: AnyCardInterface
  starRank: Int
}

"""
A card pull config
"""
type CardPullConfig {
  description: String!
  name: String!
  revealCosts: [RevealCost!]!
}

type CardPullSource implements HistoryTransactionInterface {
  date: ISO8601DateTime!
  description: String
  id: String!
  label: String!
  logoUrl: String
  quantityByFlavour: [PoolKeyShardsCount!]!
  totalQuantity: Int!
}

enum CardQuality {
  TIER_0
  TIER_1
  TIER_2
  TIER_3
  TIER_4
  TIER_5
}

"""
A Card Reward Config
"""
type CardRewardConfig implements AnyRewardConfigInterface {
  boostedRewardConfigs: [AnyRewardConfigInterface!]
  configRarity: RewardConfigRarity!
  customCardEditionNames: [String!]
  id: ID!
  playerSlugs: [String!]
  qualities: [CardQuality!]
  quality: String
  qualityTyped: CardQuality
  rarity: Rarity!
  teamSlugs: [String!]
}

"""
Information needed for a card screenshot
"""
type CardSample implements Node {
  id: ID!
  offsetX: Int!
  offsetY: Int!
  positioning: PicturePositioning!
  zoom: Float
}

"""
The supply of cards for a Player in a Season
"""
type CardSeasonSupply {
  anyPlayer: AnyPlayerInterface!
  limited: Int!
  player: Player!
  rare: Int!
  season: Season!
  superRare: Int!
  unique: Int!
}

"""
A Card Shards Reward Config
"""
type CardShardRewardConfig implements AnyRewardConfigInterface {
  boostedRewardConfigs: [AnyRewardConfigInterface!]
  configRarity: RewardConfigRarity!
  id: ID!
  quantity: Int!
  rarity: Rarity!
}

"""
A crafting promotional event
"""
type CardShardThresholdsPromotionalEvent implements Node & PromotionalEventInterface {
  algoliaFilters: String!
  blogUrl: String
  description: String!
  eligibilityRules: EligibilityRules!
  endDate: ISO8601DateTime!
  id: ID!
  logoUrl: String
  marketBannerTitle: String!
  name: String!
  pictureUrl: String
  probableRewardConfigs: [ProbableRewardConfig!]!
  promotionType: PromotionType!
  rewardsProbabilisticBundleConfig: [ProbabilisticBundleConfig!]!
  slug: String!
  sport: Sport!
  startDate: ISO8601DateTime!
  termsAndConditionsUrl: String
  title: String!
}

"""
A chest of card shards
"""
type CardShardsChest implements Node {
  availableCompetitions: [Competition!]!
  card: AnyCardInterface
  cardShardsCount: Int!
  id: ID!
  maxCardShardsCount: Int!
  newThresholdUnlocked: Boolean!

  """
  The `pool_key_shards_counts` field cannot be nested within a list.
  """
  poolKeyShardsCounts: [PoolKeyShardsCount!]!
  rarity: Rarity!
  revealVideoUrl(orientation: Orientation!): String
  sport: Sport!
  thresholds: [CardShardsChestThreshold!]!
}

"""
A threshold of a chest of card shards
"""
type CardShardsChestThreshold {
  draws: [CardShardsChestThresholdDraw!]!
  name: String!
  probabilities: [CardShardsChestThresholdProbability!]! @deprecated(reason: "Use draws instead")

  """
  The probability of having this threshold
  """
  probability: Int!
  threshold: Int!
}

type CardShardsChestThresholdDraw {
  nbCards: Int!
  probabilities: [CardShardsChestThresholdProbability!]!
}

type CardShardsChestThresholdProbability {
  basisPoints: Int!
  quality: CardQuality!
}

enum CardShardsHistoryTransactionFilter {
  CREDIT
  DEBIT
  UNSPENT_CREDIT
}

"""
A Card Shards Reward
"""
type CardShardsReward implements AnyRewardInterface & Node {
  aasmState: RewardState!
  config: CardShardRewardConfig!
  id: ID!
  quantity: Int!
  rarity: Rarity!
}

enum CardSort {
  IN_ORDER_OF_IDENTIFIERS
  POPULAR_FIRST
  RARITIES
  RECENTLY_OWNED_FIRST
  REVEALABLE_FIRST
}

type CardSource implements HistoryTransactionInterface {
  date: ISO8601DateTime!
  description: String
  id: String!
  label: String!
  logoUrl: String
  quantityByFlavour: [PoolKeyShardsCount!]!
  totalQuantity: Int!
}

"""
Stats of a card
"""
type CardStats implements Node {
  bestSo5Appearance: So5Appearance
  highlightedStats: [HighlightedStat!]!
  id: ID!
  so5LineupsCount: Int!
  so5RewardsCount: Int!
}

enum CardWasUpdatedEvent {
  """
  When a bid was created on an auction
  """
  auction_event_bid

  """
  When the bid value is increased
  """
  auction_event_bid_increased

  """
  When an auction is cancelled
  """
  auction_event_cancelled

  """
  When an auction closes without bids
  """
  auction_event_closed

  """
  When an auction is flagged as fraudulent
  """
  auction_event_flagged

  """
  When an auction was successfully closed
  """
  auction_event_successfull

  """
  When a card is revealed
  """
  card_event_revealed

  """
  When an XP event is added to a card
  """
  card_event_xp_event_added

  """
  When an offer is settled
  """
  offer_event_accepted

  """
  When an offer is cancelled
  """
  offer_event_cancelled

  """
  When an offer is flagged as fraudulent
  """
  offer_event_flagged

  """
  When an offer becomes live
  """
  offer_event_opened

  """
  When a card levels up
  """
  so5_fixture_event_cards_leveled_up

  """
  When the bonus of a user card collection changes
  """
  user_card_collection_event_bonus_changed
}

"""
A card xp grade threshold
"""
type CardXPGradeThreshold {
  level: Int!
  threshold: Int
}

type CardsCountTask implements ManagerTaskInterface & TaskInterface {
  aasmState: ManagerProgressionTaskState!
  alternativeRewardConfigs: [AlternativeRewardConfig!]
  cards: [AnyCardInterface!]!
  claimedAt: ISO8601DateTime
  color: String
  completedAt: ISO8601DateTime
  declarative: Boolean! @deprecated(reason: "Not used anymore")
  description: String!
  genre: TaskGenre!
  group: TaskGroup
  iconUrl: String
  id: String!
  liveScore: Int!
  name: ManagerProgressionTaskSlug!
  periodicity: ManagerTaskPeriodicity
  possibleRewardConfigsIconUrl: String
  probabilisticBundles: [ProbabilisticBundle!]!
  progress: Int!
  rarity: Rarity
  rewardConfigs(mergedConfigsByType: Boolean = false): [AnyRewardConfigInterface!]!
  scoreToReach: Int!
  target: Int!
  taskConfigSlug: String!
  templateIconUrl: String!
  thresholds: [CollectionTaskThreshold!]!
  title: String!
}

type CardsPreview {
  cards: [Card!]! @deprecated(reason: "Not used anymore")
  totalCount: Int! @deprecated(reason: "Not used anymore")
}

"""
A cart
"""
type Cart implements Node {
  activePromotionalEvents: [CartPurchaseRewardPromotionalEvent!]!
  affectedCardCollections: [CardCollectionScoreIncrease!]
  currentPrimaryOffer: TokenPrimaryOffer
  id: ID!
  mainCartItems: [CartItem!]!
  price: MonetaryAmount
  savedForLaterCartItems: [CartItem!]!
  signedAmount: String
  sport: Sport!
}

"""
A cart item
"""
type CartItem implements Node {
  card: AnyCardInterface!
  cart: Cart!
  id: ID!
  price: MonetaryAmount
  savedForLater: Boolean!
  state: CartItemState
}

enum CartItemState {
  CURRENT
  REMOVED
  REPLACED
}

"""
A promotional event related to a cart purchase
"""
type CartPurchaseRewardPromotionalEvent implements Node & PromotionalEventInterface {
  algoliaFilters: String!
  blogUrl: String
  deliverableItemsVariantsStocks: [DeliverableItemVariantsStocks!]
  description: String!
  eligibilityRules: EligibilityRules!
  endDate: ISO8601DateTime!
  id: ID!
  logoUrl: String
  marketBannerTitle: String!
  name: String!
  pictureUrl: String
  probableRewardConfigs: [ProbableRewardConfig!]!
  progression(cartId: ID, primaryOfferId: ID): ProgressionForRewardConfigThresholds
  promotionType: PromotionType!
  rewardsProbabilisticBundleConfig: [ProbabilisticBundleConfig!]!
  slug: String!
  sport: Sport!
  startDate: ISO8601DateTime!
  termsAndConditionsUrl: String
  title: String!
}

"""
A Checkout credit card authorization request
"""
type CheckoutCreditCardAuthorizationRequest {
  amount: Int!
  currency: FiatCurrency!
  id: String!
}

type Club implements Node & TeamInterface & WithSubscriptionsInterface {
  activeCompetitions: [Competition!]!
  activeContestant: AnyContestantInterface

  """
  The `active_memberships` field cannot be nested within a list.
  """
  activeMemberships(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): MembershipConnection!

  """
  The `active_players` field cannot be nested within a list.
  """
  activePlayers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PlayerConnection!

  """
  The `any_active_players` field cannot be nested within a list.
  """
  anyActivePlayers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): AnyPlayerInterfaceConnection!

  """
  The `any_cards` field cannot be nested within a list.
  """
  anyCards(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String
    age: Int
    assetIds: [String!]

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    classicOnly: Boolean
    customCardEditionName: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int
    inActiveCompetitions: [String!]
    inOrderOfRarities: Boolean @deprecated(reason: "Use `sorts` instead")
    inSeasonEligible: Boolean

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    owned: Boolean
    ownedByMe: Boolean
    ownedSinceAfter: ISO8601DateTime
    playerSlugs: [String!]

    """
    positions of the card capitalized
    """
    positions: [Position!]

    """
    rarities of the card in lowercase
    """
    rarities: [Rarity!]
    recentlyOwnedFirst: Boolean @deprecated(reason: "Use `sorts` instead")
    revealable: Boolean
    revealableFirst: Boolean @deprecated(reason: "Use `sorts` instead")
    seasonStartYears: [Int!]
    serialNumber: Int
    shirtNumber: Int
    slugs: [String!]
    sorts: [CardSort!]
    sport: Sport
    teamSlugs: [String!]
    withinDeckFirst: String
  ): AnyCardInterfaceConnection!

  """
  The `any_games` field cannot be nested within a list.
  """
  anyGames(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    End time (inclusive) of the game.
    """
    endDate: ISO8601DateTime!

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Start time (inclusive) of the game.
    """
    startDate: ISO8601DateTime!
  ): AnyGameInterfaceConnection!

  """
  The `any_players` field cannot be nested within a list.
  """
  anyPlayers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): AnyPlayerInterfaceConnection!

  """
  The `any_recent_departures` field cannot be nested within a list.
  """
  anyRecentDepartures(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): AnyPlayerInterfaceConnection!

  """
  Returns top 5 players of the club based on L15
  """
  anyTopPlayers: [AnyPlayerInterface!]!
  code: String
  country: Country!
  currentUserSubscription: EmailSubscription
  dataPartner: DataPartner
  domesticLeague: Competition
  domesticLeagueRanking: Int
  domesticLeagueRankingRatioRange: RankingRatioRange
  founded: String

  """
  The `games` field cannot be nested within a list.
  """
  games(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    End time (inclusive) of the game.
    """
    endDate: ISO8601DateTime!

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Start time (inclusive) of the game.
    """
    startDate: ISO8601DateTime!
  ): GameConnection!
  id: ID!
  lastFiveAnyGames: [AnyGameInterface!]!
  lastFiveGames: [Game!]!

  """
  The `latest_any_games` field cannot be nested within a list.
  """
  latestAnyGames(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int
    includingLive: Boolean

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): AnyGameInterfaceConnection!

  """
  The `latest_games` field cannot be nested within a list.
  """
  latestGames(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int
    includingLive: Boolean

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): GameConnection!
  name: String!
  officialName: String!
  optaId: String
  pictureSecondaryUrl: String
  pictureUrl(derivative: String = "low_res"): String

  """
  The `players` field cannot be nested within a list.
  """
  players(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PlayerConnection!
  ready: Boolean!

  """
  The `recent_departures` field cannot be nested within a list.
  """
  recentDepartures(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PlayerConnection!

  """
  Returns the top 3 of the league, excluding the current club
  """
  relatedClubs: [Club!]
  shortName: String!
  slug: String!
  styleGuideColor: String
  subscriptionsCount: Int!

  """
  Returns top 5 players of the club based on L15
  """
  topPlayers: [Player!]!
  upcomingAnyGames(first: Int!): [AnyGameInterface]!
  upcomingGames(first: Int!): [Game]!
  withSellablePlayers(withSingleSales: Boolean): Boolean!
}

"""
The connection type for Club.
"""
type ClubConnection {
  """
  A list of edges.
  """
  edges: [ClubEdge!]!

  """
  A list of nodes.
  """
  nodes: [Club!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type ClubEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Club
}

"""
Object that can be a shop item
"""
union ClubShopItem = AppearanceBoostShopItem | CommonCardSwapShopItem | DeliverableWithCustomVariantShopItem | DeliverableWithNoVariantShopItem | ExtraSwapShopItem | JerseyShopItem | LevelUpShopItem | RaffleShopItem | ShopItem | SkinShopItem

"""
The connection type for ClubShopItem.
"""
type ClubShopItemConnection {
  """
  A list of edges.
  """
  edges: [ClubShopItemEdge!]!
  hasAny: Boolean!

  """
  A list of nodes.
  """
  nodes: [ClubShopItem!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ClubShopItemEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ClubShopItem
}

"""
A Coin Reward
"""
type CoinReward implements AnyRewardInterface & Node {
  aasmState: RewardState!
  coinAmount: Int!
  config: CoinRewardConfig!
  id: ID!
}

"""
A Coin Reward Config
"""
type CoinRewardConfig implements AnyRewardConfigInterface {
  amount: Int!
  boostedRewardConfigs: [AnyRewardConfigInterface!]
  currency: InGameCurrency!
  id: ID!
}

enum Collection {
  BASEBALL
  FOOTBALL
  FOOTBALL_NATIONAL_SERIES
  NBA
}

type CollectionTaskThreshold {
  count: Int!
  current: Boolean!
  rewardConfigs: [AnyRewardConfigInterface!]!
}

enum ColorVariant {
  OPTIONAL
  PRIMARY
  SECONDARY
}

"""
A Common Account
"""
type CommonAccount implements Node {
  id: ID!
}

type CommonCardSwapShopItem implements Node & ShopItemInterface {
  cardCollectionRequirements: [CardCollectionRequirement!]!
  createdAt: ISO8601DateTime!
  description: String
  disabled: Boolean!
  expirationDate: ISO8601DateTime
  id: ID!
  infoLink: String
  limitPerUser: Int!
  myAvailableTotalPurchasesCount: Int!
  myAvailableUserShopItems: [UserShopItem!]
  myBalance: Int!
  myLimitResetAt: ISO8601DateTime
  myPurchasesCount: Int!
  name: String!
  pictureUrl(derivative: ShopItemDerivative = TINIFIED): String!
  position: ShopItemType!
  price: Int!
  requirementsRulesLink: String
  salePrice: Int
  seenInManagerId: Boolean!
  shopItemsRequired: [ShopItem!]!
  threeDimensionalAssetUrl(
    """
    Defaults to GLB
    """
    format: ShopItemThreeDimensionalAssetFormat
  ): String
  unlocked: Boolean!
}

type CommonGameEndOfSeasonCountdown {
  countdownUntil: ISO8601DateTime!
  milestones: [TaskInterface!]!
}

"""
A Sorare player
"""
type CommonPlayer implements Node {
  anyPlayer: AnyPlayerInterface!
  id: ID!
  pictureUrl(derivative: String = "full"): String
}

"""
The connection type for CommonPlayer.
"""
type CommonPlayerConnection {
  """
  A list of edges.
  """
  edges: [CommonPlayerEdge!]!

  """
  A list of nodes.
  """
  nodes: [CommonPlayer!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type CommonPlayerEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: CommonPlayer
}

"""
A professional football competition
"""
type Competition implements CompetitionGraphicalIdentityInterface & Node & WithSubscriptionsInterface {
  backgroundColor: String @deprecated(reason: "Use pictureUrl instead")
  backgroundPictureUrl: String

  """
  The `clubs` field cannot be nested within a list.
  """
  clubs(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ClubConnection!

  """
  The `contestants` field cannot be nested within a list.
  """
  contestants(seasonStartYear: Int!): [Contestant!]!
  country: Country
  currentUserSubscription: EmailSubscription
  displayName: String!
  featuredCardPictureUrls: [String!] @deprecated(reason: "Not used anymore")
  featuredPlayer: PickablePlayer @deprecated(reason: "Not used anymore")
  format: CompetitionFormat!

  """
  The `future_games` field cannot be nested within a list.
  """
  futureGames(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): GameConnection!
  id: ID!
  licensed: Boolean!
  logoUrl: String @deprecated(reason: "Use pictureUrl instead")
  name: String!
  openForGameStats: Boolean!

  """
  Returns the players ordered by average stat (default last five average
  so5_score) The `ordered_players` field cannot be nested within a list.
  """
  orderedPlayers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String
    averageStat: AverageStat

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    limit: AverageLimit
  ): PlayerConnection!

  """
  The `past_games` field cannot be nested within a list.
  """
  pastGames(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): GameConnection!
  pictureSecondaryUrl: String
  pictureUrl(derivative: String = "low_res"): String

  """
  The `players_by_last_five_average` field cannot be nested within a list.
  """
  playersByLastFiveAverage(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PlayerConnection!
  released: Boolean!

  """
  The `seasons` field cannot be nested within a list.
  """
  seasons: [Season!]!
  slug: String!
  stages(seasonStartYear: Int!): [TournamentCalendarStage!]!
  subscriptionsCount: Int!
  type: CompetitionType!
}

type CompetitionCount {
  competition: Competition!
  count: Int!
}

enum CompetitionFormat {
  DOMESTIC_CUP
  DOMESTIC_LEAGUE
  DOMESTIC_SUPER_CUP
  INTERNATIONAL_CUP
  INTERNATIONAL_SUPER_CUP
}

type CompetitionGames {
  competition: Competition!
  games: [AnyGameInterface!]!
  gamesWithMyCardPreview(rarities: [Rarity!], withCards: Boolean): [GameWithCardsPreview!]!
}

interface CompetitionGraphicalIdentityInterface {
  backgroundColor: String @deprecated(reason: "Use pictureUrl instead")
  featuredCardPictureUrls: [String!] @deprecated(reason: "Not used anymore")
  featuredPlayer: PickablePlayer @deprecated(reason: "Not used anymore")
  logoUrl: String @deprecated(reason: "Use pictureUrl instead")
}

enum CompetitionType {
  CLUB
  INTERNATIONAL
}

"""
A promotional event who can be completed
"""
type CompletablePromotionalEvent implements CompletablePromotionalEventInterface & Node & PromotionalEventInterface {
  algoliaFilters: String!
  blogUrl: String
  completionAmount: MonetaryAmount
  completionRules: JSON!
  description: String!
  eligibilityRules: EligibilityRules!
  endDate: ISO8601DateTime!
  id: ID!
  logoUrl: String
  marketBannerTitle: String!
  name: String!
  pictureUrl: String
  probableRewardConfigs: [ProbableRewardConfig!]!
  promotionDetailsRewardDescription: String
  promotionDetailsRewardPictureUrl: String
  promotionType: PromotionType!
  promotionalEventCompletion: PromotionalEventCompletion
  rewardsProbabilisticBundleConfig: [ProbabilisticBundleConfig!]!
  slug: String!
  sport: Sport
  startDate: ISO8601DateTime!
  termsAndConditionsUrl: String
  title: String!
}

interface CompletablePromotionalEventInterface implements PromotionalEventInterface {
  algoliaFilters: String!
  blogUrl: String
  completionAmount: MonetaryAmount
  completionRules: JSON!
  description: String!
  eligibilityRules: EligibilityRules!
  endDate: ISO8601DateTime!
  id: ID!
  logoUrl: String
  marketBannerTitle: String!
  name: String!
  pictureUrl: String
  probableRewardConfigs: [ProbableRewardConfig!]!
  promotionDetailsRewardDescription: String
  promotionDetailsRewardPictureUrl: String
  promotionType: PromotionType!
  promotionalEventCompletion: PromotionalEventCompletion
  rewardsProbabilisticBundleConfig: [ProbabilisticBundleConfig!]!
  slug: String!
  sport: Sport
  startDate: ISO8601DateTime!
  termsAndConditionsUrl: String
  title: String!
}

type CompleteCollectionsCountTask implements ManagerTaskInterface & TaskInterface {
  aasmState: ManagerProgressionTaskState!
  alternativeRewardConfigs: [AlternativeRewardConfig!]
  cards: [AnyCardInterface!]!
  claimedAt: ISO8601DateTime
  color: String
  completedAt: ISO8601DateTime
  declarative: Boolean! @deprecated(reason: "Not used anymore")
  description: String!
  genre: TaskGenre!
  group: TaskGroup
  iconUrl: String
  id: String!
  liveScore: Int!
  name: ManagerProgressionTaskSlug!
  periodicity: ManagerTaskPeriodicity
  possibleRewardConfigsIconUrl: String
  probabilisticBundles: [ProbabilisticBundle!]!
  progress: Int!
  rarity: Rarity
  rewardConfigs(mergedConfigsByType: Boolean = false): [AnyRewardConfigInterface!]!
  scoreToReach: Int!
  target: Int!
  taskConfigSlug: String!
  templateIconUrl: String!
  thresholds: [CollectionTaskThreshold!]!
  title: String!
  userCollectionClosestToCompletion: UserCardCollection
}

enum ComposeLineupSource {
  RIVALS
  USER_GROUP
}

"""
A Sorare card on the bench
"""
type ComposeTeamBenchCard implements ComposeTeamBenchObjectInterface {
  activeSuspensions(so5LeaderboardSlug: String!): [Suspension!]!
  anyCard: AnyCardInterface!
  anyPlayer: AnyPlayerInterface!
  averageScore(type: AveragePlayerScore!): Float
  bonus: Float
  cardBorderRadius: Int!
  eligiblePlayerGameScores(so5LeaderboardSlug: String): [PlayerGameScoreInterface!]!
  id: ID!
  licensed: Boolean!

  """
  When a bench object will be locked for a leaderboard
  """
  lockedAt(so5LeaderboardSlug: String): ISO8601DateTime!

  """
  Wether a bench object can be updated for a leaderboard
  """
  lockedForLeaderboard(so5LeaderboardSlug: String): Boolean!
  pictureUrl(derivative: String = "tinified"): String
  player: Player!
  position: Position!
  positions: [Position!]!
  projectedScore(so5LeaderboardSlug: String!): Float
  rarity: Rarity!
  videoUrl(derivative: String): String
}

"""
A Sorare player on the bench
"""
type ComposeTeamBenchCommonPlayer implements ComposeTeamBenchObjectInterface {
  activeSuspensions(so5LeaderboardSlug: String!): [Suspension!]!
  anyPlayer: AnyPlayerInterface!
  averageScore(type: AveragePlayerScore!): Float
  bonus: Float
  cardBorderRadius: Int!
  eligiblePlayerGameScores(so5LeaderboardSlug: String): [PlayerGameScoreInterface!]!
  id: ID!
  licensed: Boolean!

  """
  When a bench object will be locked for a leaderboard
  """
  lockedAt(so5LeaderboardSlug: String): ISO8601DateTime!

  """
  Wether a bench object can be updated for a leaderboard
  """
  lockedForLeaderboard(so5LeaderboardSlug: String): Boolean!
  pictureUrl(derivative: String = "full"): String
  player: Player!
  position: Position!
  positions: [Position!]!
  projectedScore(so5LeaderboardSlug: String!): Float
  rarity: Rarity!
  videoUrl(derivative: String): String
}

"""
Compose team Bench object interface
"""
interface ComposeTeamBenchObjectInterface {
  activeSuspensions(so5LeaderboardSlug: String!): [Suspension!]!
  anyPlayer: AnyPlayerInterface!
  averageScore(type: AveragePlayerScore!): Float
  bonus: Float
  cardBorderRadius: Int!
  eligiblePlayerGameScores(so5LeaderboardSlug: String): [PlayerGameScoreInterface!]!
  id: ID!
  licensed: Boolean!

  """
  When a bench object will be locked for a leaderboard
  """
  lockedAt(so5LeaderboardSlug: String): ISO8601DateTime!

  """
  Wether a bench object can be updated for a leaderboard
  """
  lockedForLeaderboard(so5LeaderboardSlug: String): Boolean!
  pictureUrl(derivative: String = "tinified"): String
  player: Player!
  position: Position!
  positions: [Position!]!
  projectedScore(so5LeaderboardSlug: String!): Float
  rarity: Rarity!
  videoUrl(derivative: String): String
}

"""
The connection type for ComposeTeamBenchObjectInterface.
"""
type ComposeTeamBenchObjectInterfaceConnection {
  """
  A list of edges.
  """
  edges: [ComposeTeamBenchObjectInterfaceEdge!]!

  """
  A list of nodes.
  """
  nodes: [ComposeTeamBenchObjectInterface!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type ComposeTeamBenchObjectInterfaceEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ComposeTeamBenchObjectInterface
}

"""
The frontend config
"""
type Config {
  activeRevealableCardCampaigns: [RevealableCardCampaign!]!
  algoliaApplicationId: String!
  algoliaIndexSuffix: String!
  algoliaSearchApiKey: String!
  bankAddress: EthereumAddress!
  baseBankAddress: EthereumAddress!
  baseballTokensAddress: EthereumAddress!
  counts: Counts!
  creditCardFeesBasisPoints(creditCardType: CreditCardType, provider: PaymentMethodProvider!): String!
  currentLocation: Location!
  defaultFiatCurrency: FiatCurrency!

  """
  Countries where Sorare can deliver goods
  """
  deliverableCountries: [Country!]!
  ethAssetType: String!
  ethQuantum: WeiAmount!
  ethereumEndpoint: String!
  ethereumNetworkId: String!
  exchangeRate: ExchangeRate!

  """
  Countries where Sorare's Fiat Wallet is supported.
  """
  fiatWalletCountries: [Country!]!
  footballNationalSeriesTokensAddress: EthereumAddress!
  giphyApiKey: String!
  id: ID!
  idealDepositFeesAmountMinor: Int!
  l1MessengerAddress: EthereumAddress!
  liveLobbyTiles(positions: [Module!]!, sport: Sport!): [LobbyTile!]
  lobbyTile(position: Module!, sport: Sport!): LobbyTile
  mangopayApplePayDepositFeesBasisPoints: Int!
  marketFeeRateBasisPoints: Int!
  marketplacePromotionalEvents: [MarketplacePromotionalEvents!]!
  migratorAddress: EthereumAddress
  minimumBidAmount(provider: PaymentProvider!): MonetaryAmount!
  minimumReceiveWeiAmount: WeiAmount!
  nbaTokensAddress: EthereumAddress!
  paypalDepositFeesBasisPoints: Int!
  referralProgramConfig(sport: Sport = FOOTBALL): ReferralProgramConfig!
  relayAddress: EthereumAddress!
  sealingConfig(sport: Sport): SealingConfig!
  so5: So5Config!
  sorareCardsAddress: EthereumAddress!
  sorareEncryptionKey: String!
  sorareTokensAddress: EthereumAddress!
  sponsorAccountAddress: EthereumAddress!
  starkExchangeAddress: EthereumAddress!
  stripePublicKey: String!
  walletChallenge: String!
}

"""
Autogenerated return type of ConfirmDeviceMutation.
"""
type ConfirmDeviceMutationPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  currentUser: CurrentUser
  errors: [UserError!]!

  """
  Generate a JWT Token. null if, and only if, currentUser is null.
  """
  jwtToken(
    """
    Audience claim identifies the intended audience for this token. Consider
    using a value that uniquely identifies your use case.
    """
    aud: String!
  ): JwtToken
}

"""
Autogenerated return type of ConfirmEmailMutation.
"""
type ConfirmEmailMutationPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  currentUser: CurrentUser
  errors: [UserError!]!

  """
  Generate a JWT Token. null if, and only if, currentUser is null.
  """
  jwtToken(
    """
    Audience claim identifies the intended audience for this token. Consider
    using a value that uniquely identifies your use case.
    """
    aud: String!
  ): JwtToken
}

"""
OAuth account connected by the user.
"""
type ConnectedOAuth implements Node {
  email: String!
  id: ID!
  provider: OAuthProvider!
}

"""
Autogenerated return type of ConsumeEphemeralTokenMutation.
"""
type ConsumeEphemeralTokenMutationPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  currentUser: CurrentUser
  errors: [UserError!]!

  """
  Generate a JWT Token. null if, and only if, currentUser is null.
  """
  jwtToken(
    """
    Audience claim identifies the intended audience for this token. Consider
    using a value that uniquely identifies your use case.
    """
    aud: String!
  ): JwtToken

  """
  Where to redirect the user
  """
  redirectUrl: String
}

"""
A contestant
"""
type Contestant implements Node {
  anyTeam: TeamInterface!
  goalsAgainst: Int
  goalsFor: Int
  id: ID!
  matchesDrawn: Int
  matchesLost: Int
  matchesPlayed: Int
  matchesWon: Int
  points: Int
  rank: Int
  rankStatus: String
}

"""
A smart contract
"""
type Contract implements Node {
  addressHex: String!
  blockchain: String!
  id: ID!
  name: String!
}

"""
A conversion credit
"""
type ConversionCredit implements Node {
  endDate: ISO8601DateTime!
  id: ID!
  maxDiscount: MonetaryAmount!
  percentageDiscount: Float!
  purchase: ConversionCreditPurchase
  singleUse: Boolean!
  sport: Sport
  status: ConversionCreditStatus!
  totalDiscount: MonetaryAmount!
}

"""
A conversion credit campaign
"""
type ConversionCreditCampaign implements Node {
  campaignCode: String!
  endDate: ISO8601DateTime!
  id: ID!
  maxDiscount: MonetaryAmount!
  percentageDiscount: Float!
  sport: Sport
  status: ConversionCreditCampaignStatus!
}

enum ConversionCreditCampaignStatus {
  ACTIVE
  CANCELLED
  CREATED
  EXPIRED
}

"""
The connection type for ConversionCredit.
"""
type ConversionCreditConnection {
  """
  A list of edges.
  """
  edges: [ConversionCreditEdge!]!

  """
  A list of nodes.
  """
  nodes: [ConversionCredit!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type ConversionCreditEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ConversionCredit
}

"""
A market credit notification
"""
type ConversionCreditNotification implements Node & NotificationInterface {
  body: String!
  conversionCredit: ConversionCredit
  createdAt: ISO8601DateTime!
  deeplinkUrl: String!
  iconUrl: String!
  id: ID!
  important: Boolean!
  markdownBody: String!
  name: String!
  pictureUrl: String
  read: Boolean!
  sport: SportOrShared
  title: String!
  user: CurrentUser!
}

"""
Object that can be a purchase of a ConversionCredit
"""
union ConversionCreditPurchase = TokenAuction | TokenPrimaryOffer

"""
A Conversion Credit Reward Config
"""
type ConversionCreditRewardConfig implements AnyRewardConfigInterface {
  boostedRewardConfigs: [AnyRewardConfigInterface!]
  id: ID!
  maxDiscount: MonetaryAmount!
  percentageDiscount: Float!
  poolSize: Int!
  sharedPool: Boolean!
}

enum ConversionCreditStatus {
  CANCELLED
  CLAIMED
  CREATED
  EXPIRED
  RECLAIMED
  USED
  USING
}

type CountByRarity {
  count: Int!
  rarity: Rarity!
}

"""
A country
"""
type Country implements Node & WithSubscriptionsInterface {
  """
  Country code in ISO 3166-1 format.
  """
  code: String!
  currentUserSubscription: EmailSubscription
  flagUrl(shape: String, size: Int): String!
  id: ID!
  name: String!
  slug: String!
  subscriptionsCount: Int!
  threeLetterCode: String
}

"""
Some Stats
"""
type Counts {
  usersCount: Int!
}

"""
Autogenerated return type of CreateOrUpdateSo5LineupMutation.
"""
type CreateOrUpdateSo5LineupMutationPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  composeSessionId: String
  currentUser: CurrentUser
  errors: [UserError!]!
  so5LeaderboardContender: So5LeaderboardContender
  so5Lineup: So5Lineup
}

"""
Credit Card
"""
type CreditCard {
  brand: CreditCardBrand!
  expMonth: Int!
  expYear: Int!
  last4: String!
  type: CreditCardType
}

"""
A credit card authorization request
"""
union CreditCardAuthorizationRequest = MangopayCreditCardAuthorizationRequest | StripeCreditCardAuthorizationRequest

enum CreditCardBrand {
  """
  American Express
  """
  AMERICAN_EXPRESS

  """
  Cartes Bancaires
  """
  CARTES_BANCAIRES

  """
  Diners Club
  """
  DINERS_CLUB

  """
  Discover
  """
  DISCOVER

  """
  JCB
  """
  JCB

  """
  Maestro
  """
  MAESTRO

  """
  MasterCard
  """
  MASTERCARD

  """
  UnionPay
  """
  UNION_PAY

  """
  Unknown
  """
  UNKNOWN

  """
  UPI
  """
  UPI

  """
  Visa
  """
  VISA
}

enum CreditCardType {
  AMEX
  CB_VISA_MASTERCARD
  MAESTRO
}

enum Currency {
  ETH
  FIAT
}

"""
Current Sorare user
"""
type CurrentUser implements PublicUserInfoInterface & So5CurrentUserInterface & UserOffersInterface & UserSocialInterface & WithFavoriteInterface & WithNotifications & WithReferralsInterface {
  accountEntries(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    currencyType: Currency
    endDate: ISO8601DateTime
    entryType: [UserAccountEntryEntry!]

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    significant: Boolean
    sortType: SortingOption
    startDate: ISO8601DateTime
  ): UserAccountEntryConnection!
  active: Boolean
  activePromotionalEventCompletion: PromotionalEventCompletion
  anyNotifications(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Filters notifications by the specified categories when set.
    """
    categories: [NotificationCategoryInput!]

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filters notifications by sections
    """
    sections: [String!]

    """
    Filters notifications by sports
    """
    sports: [Sport!]

    """
    Filters notifications by subsections
    """
    subsections: [String!]
  ): NotificationInterfaceConnection!
  anyPlayer: AnyPlayerInterface
  anyUserSportProfile(sport: Sport!, variant: UserSportProfileVariant): UserSportProfileInterface
  apiKey: String

  """
  The `auction_reminders` field cannot be nested within a list.
  """
  auctionReminders(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): AuctionReminderConnection!
  authorizations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    endDate: ISO8601DateTime

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    sortType: SortingOption
    startDate: ISO8601DateTime
  ): AuthorizationRequestConnection!

  """
  Current user available balance, in wei.
  """
  availableBalance: WeiAmount!

  """
  Current user available balance for withdrawal, in wei.
  """
  availableBalanceForWithdrawal: WeiAmount!
  availableRaffleTicketsCount(sport: Sport): Int!

  """
  Current user bank balance, in wei.
  """
  bankBalance: WeiAmount!
  bankMappedEthereumAddress: EthereumAddress
  bankMappedEthereumAddressApprovedBank: Boolean
  baseWithdrawals: [BaseChainWithdrawal!]!
  baseballUserProfile: BaseballUserSportProfile
  betaTester: Boolean!
  betaTesterFootballCommonCardsGame: Boolean! @deprecated(reason: "Not used anymore")

  """
  List of current user blockchain cards engaged in lineups (for live or upcoming fixtures)
  """
  blockchainCardsInLineups(sport: Sport = FOOTBALL): [String!]!
  blockedUntil: ISO8601DateTime
  blockedUsers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection!

  """
  Get a list of all blueprint cards
  """
  blueprintCards(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String
    age: Int
    assetIds: [String!]

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    classicOnly: Boolean
    customCardEditionName: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int
    inActiveCompetitions: [String!]
    inOrderOfRarities: Boolean @deprecated(reason: "Use `sorts` instead")
    inSeasonEligible: Boolean

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    owned: Boolean
    ownedByMe: Boolean
    ownedSinceAfter: ISO8601DateTime
    playerSlugs: [String!]

    """
    positions of the card capitalized
    """
    positions: [Position!]

    """
    rarities of the card in lowercase
    """
    rarities: [Rarity!]
    recentlyOwnedFirst: Boolean @deprecated(reason: "Use `sorts` instead")
    revealable: Boolean
    revealableFirst: Boolean @deprecated(reason: "Use `sorts` instead")
    seasonStartYears: [Int!]
    serialNumber: Int
    shirtNumber: Int
    slugs: [String!]
    sorts: [CardSort!]
    sport: Sport
    teamSlugs: [String!]
    withinDeckFirst: String
  ): AnyCardInterfaceConnection!

  """
  The `bought_primary_offers` field cannot be nested within a list.
  """
  boughtPrimaryOffers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    sortByEndDate: SortingOption
    sport: [Sport!]
  ): TokenPrimaryOfferConnection!

  """
  The `bought_single_sale_token_offers` field cannot be nested within a list.
  """
  boughtSingleSaleTokenOffers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    sortByEndDate: SortingOption
    sport: [Sport!]
  ): TokenOfferConnection!

  """
  The `buying_token_auctions` field cannot be nested within a list.
  """
  buyingTokenAuctions(
    """
    Returns auctions sorted by `startDate` in descending order when set.
    """
    newlyListed: Boolean
    sport: [Sport!]
  ): [TokenAuction!]!

  """
  The `card_collections` field cannot be nested within a list.
  """
  cardCollections(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int
    forCompetitions: [String!]
    inSeasonOnly: Boolean

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Full text search query to filter card collections
    """
    query: String

    """
    Default to playable rarities
    """
    rarities: [Rarity]
    seasonStartYears: [Int!]
    sortType: CardCollectionSortingOption = HIGHEST_SCORE
    sport: Sport
    startedOnly: Boolean
  ): CardCollectionConnection
  cardCounts(sport: Sport!): CardCount!
  cardFilters(sport: Sport!): Json!
  cardPull(sport: Sport!): CardPull
  cardShardsChest(id: ID!): CardShardsChest!
  cardShardsChests(rarities: [Rarity!], spent: Boolean, sport: Sport!): [CardShardsChest!]!
  cardShardsHistoryTransactions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filterBy: CardShardsHistoryTransactionFilter

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    orderBy: SortingOption
    rarity: Rarity!
    sport: Sport!
  ): HistoryTransactionInterfaceConnection!

  """
  Get a list of all cards
  """
  cards(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String
    age: Int
    assetIds: [String!]

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    classicOnly: Boolean
    customCardEditionName: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int
    inActiveCompetitions: [String!]
    inOrderOfRarities: Boolean @deprecated(reason: "Use `sorts` instead")
    inSeasonEligible: Boolean

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    owned: Boolean
    ownedByMe: Boolean
    ownedSinceAfter: ISO8601DateTime
    playerSlugs: [String!]

    """
    positions of the card capitalized
    """
    positions: [Position!]

    """
    rarities of the card in lowercase
    """
    rarities: [Rarity!]
    recentlyOwnedFirst: Boolean @deprecated(reason: "Use `sorts` instead")
    revealable: Boolean
    revealableFirst: Boolean @deprecated(reason: "Use `sorts` instead")
    seasonStartYears: [Int!]
    serialNumber: Int
    shirtNumber: Int
    slugs: [String!]
    sorts: [CardSort!]
    sport: Sport
    teamSlugs: [String!]
    withinDeckFirst: String
  ): AnyCardInterfaceConnection!
  cardsCount: Int!

  """
  Get the list of cards earned thanks to referrals
  """
  cardsReferralRewards(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    sport: Sport!
  ): ReferralRewardConnection!
  claimablePacks(sport: Sport!): [Pack!]!
  coinBalance(sport: Sport): Int!
  commonCardPoints(sport: Sport!): Int!
  completablePromotionalEvent: CompletablePromotionalEventInterface

  """
  Whether the user confirmed their email
  """
  confirmed: Boolean
  confirmedDevice: Boolean!

  """
  The `connected_o_auth_access_tokens` field cannot be nested within a list.
  """
  connectedOAuthAccessTokens: [OAuthAccessToken!]

  """
  The `connected_o_auth_applications` field cannot be nested within a list.
  """
  connectedOAuthApplications: [OAuthApplication!]
  connectedOauths: [ConnectedOAuth!]
  createdAt: ISO8601DateTime!

  """
  Current device used for this query
  """
  currentDevice: UserDevice
  currentFootballRivalsManager: FootballRivalsCurrentManager! @deprecated(reason: "Not used anymore")
  depositPromotionalEvent: DepositPromotionalEvent
  depositedEth: Boolean!

  """
  Can only be retrieved from a confirmed device
  """
  devices: [UserDevice!]
  email: String!
  endedTokenOffersReceived(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    sortType: SortingOption
    sport: [Sport!] = [FOOTBALL, BASEBALL, NBA]
    states: [OfferState!]
  ): TokenOfferConnection!
  endedTokenOffersSent(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    sortType: SortingOption
    sport: [Sport!] = [FOOTBALL, BASEBALL, NBA]
    states: [OfferState!]
  ): TokenOfferConnection!

  """
  The `ended_with_no_buyer_single_sale_token_offers` field cannot be nested within a list.
  """
  endedWithNoBuyerSingleSaleTokenOffers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    sortByEndDate: SortingOption
    sport: [Sport!]
  ): TokenOfferConnection!
  ethMigration: EthMigration
  ethVaultId: Int
  ethereumAddress: EthereumAddress
  fastWithdrawals: [FastWithdrawal!]!
  fastWithdrawalsWithRates: [FastWithdrawalWithRates!]!
  featureFlagCustomAttributes: Json!
  featuredTasks(rarity: Rarity, sport: Sport!): [TaskInterface!]!
  fiatEnabled: Boolean!
  followed: EmailSubscription

  """
  The `followers` field cannot be nested within a list.
  """
  followers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserWithSubscriptionSlugConnection!
  followersCount: Int!

  """
  The `following` field cannot be nested within a list.
  """
  following(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserWithSubscriptionSlugConnection!
  followingCount: Int!

  """
  The `football_card_collections` field cannot be nested within a list.
  """
  footballCardCollections(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Full text search query to filter card collections
    """
    query: String

    """
    Default to playable rarities
    """
    rarities: [Rarity]
    seasonStartYears: [Int!]
    startedOnly: Boolean
  ): CardCollectionConnection @deprecated(reason: "Use cardCollections instead")
  footballLast30DaysLineupsCount: Int!
  footballRivalsManager: FootballRivalsManager! @deprecated(reason: "Not used anymore")
  footballUserProfile(variant: UserSportProfileVariant): FootballUserSportProfile
  forcedIntoOnboarding(sport: Sport): Boolean!
  fromPath: String
  hallOfFameSo5LeaderboardContenders(rarity: Rarity, seasonStartYear: Int!, sport: Sport!): [So5LeaderboardContender!]
  hasPassword: Boolean!
  highScarcityStatus: HighScarcityStatuses!

  """
  Typical number of hours the manager takes to answer trades
  """
  hoursToAnswerTrades: Int
  id: ID!
  inGameCurrencyBalances(inGameCurrencies: [InGameCurrency!], sport: Sport!): [InGameCurrencyBalance!]!

  """
  The `involved_live_token_auctions` field cannot be nested within a list.
  """
  involvedLiveTokenAuctions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    newlyListed: Boolean
    sortByEndDate: SortingOption
    sport: [Sport!]
  ): TokenAuctionConnection!

  """
  The `involved_lost_token_auctions` field cannot be nested within a list.
  """
  involvedLostTokenAuctions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    sortByEndDate: SortingOption
    sport: [Sport!]
  ): TokenAuctionConnection!

  """
  The `involved_token_auctions` field cannot be nested within a list.
  """
  involvedTokenAuctions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    sortByEndDate: SortingOption
    sport: [Sport!]
  ): TokenAuctionConnection!
  last30DaysLineupsCount: IntegerBySportType!

  """
  Get the last notification created_at
  """
  lastNotificationCreatedAt: ISO8601DateTime

  """
  The `live_single_sale_token_offers` field cannot be nested within a list.
  """
  liveSingleSaleTokenOffers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    sortByEndDate: SortingOption
    sport: [Sport!]
  ): TokenOfferConnection!
  loan: Loan
  loanableConfig: LoanableConfigRoot

  """
  The `lost_token_auctions` field cannot be nested within a list.
  """
  lostTokenAuctions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    sortByEndDate: SortingOption
    sport: [Sport!]
  ): TokenAuctionConnection!

  """
  The `manager_teams` field cannot be nested within a list.
  """
  managerTeams(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ManagerTeamConnection!
  mangopayUser: MangopayUser
  matchedContactsAt: ISO8601DateTime
  moonpayParams: String!
  moonpaySupported: Boolean!
  mustAcceptTcus: Boolean!
  myAccounts: [PrivateAccount!]!
  myCart(sport: Sport!): Cart
  myRecentActiveBids: [TokenMyBid!]!
  mySubscriptions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    sortType: SortingOption
    types: [SubscribableType!]
  ): EmailSubscriptionConnection!

  """
  Boosted rewards based on eligible reward configs The
  `my_unclaimed_boosted_reward_configs_by_rarity` field cannot be nested within a list.
  """
  myUnclaimedBoostedRewardConfigsByRarity(sport: Sport!): [RarityRewardConfigs!]!

  """
  The `my_unclaimed_eligible_reward_configs` field cannot be nested within a list.
  """
  myUnclaimedEligibleRewardConfigs(multiplyBaseRewards: Boolean = false, sport: Sport!): [AnyRewardConfigInterface!]!
  myUnclaimedSo5RewardsNeedKycVerification(sport: Sport!): Boolean!
  myUnclaimedSo5RewardsNeedPhoneVerification(sport: Sport!): Boolean!
  myUnclaimedTasksCount(group: String, rarity: Rarity, sport: Sport!): Int!
  myWatchlists(filter: WatchlistFilter = OWNED_WATCHLISTS, query: String, sport: Sport!): [Watchlist!]
  nbaUserProfile: NBAUserSportProfile
  nickname: String!

  """
  If the current user can see the no card routes
  """
  noCardRouteEnabled: Boolean!

  """
  Get notifications fields.
  """
  notificationsDetails(
    """
    Filters notifications by the specified categories when set.
    """
    categories: [NotificationCategoryInput!]

    """
    Filters notifications by sports
    """
    sports: [Sport!]
  ): Notifications!
  onboardingConversionCredit(sport: Sport!): ConversionCredit
  onboardingFlow(sport: Sport): String
  onboardingTasks(sport: Sport!): [TaskInterface!]!
  otpRequiredForLogin: Boolean!
  passkeys: [Passkey!]!
  paymentMethods(provider: PaymentMethodProvider): [PaymentMethod!]!

  """
  Pending & recently failed deposits for the current user
  """
  pendingDeposits: [PendingDeposit!]!
  pendingDirectWithdrawalCount: Int!
  pendingTokenOffersReceived(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    sortType: SortingOption
    sport: [Sport!] = [FOOTBALL, BASEBALL, NBA]
  ): TokenOfferConnection!
  pendingTokenOffersSent(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    sortType: SortingOption
    sport: [Sport!] = [FOOTBALL, BASEBALL, NBA]
  ): TokenOfferConnection!
  phoneNumber: String
  phoneNumberVerificationRequested: Boolean!
  phoneNumberVerified: Boolean!
  pictureUrl(derivative: String = "low_res"): String
  player: Player

  """
  The `podium_rankings` field cannot be nested within a list.
  """
  podiumRankings(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    ranking: Int
    so5LeaderboardType: So5LeaderboardType
    sport: Sport
  ): So5RankingConnection!

  """
  The `podiums` field cannot be nested within a list.
  """
  podiums(sport: Sport): [So5Podium!]!

  """
  Get the total of potential conversion credits to be earned thanks to pending referrals
  """
  potentialReferralConversionCredits(sport: Sport!): MonetaryAmount!
  probabilisticBundles(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    sortType: SortingOption
    sport: Sport
  ): ProbabilisticBundleConnection!
  profile: UserProfile!

  """
  The `public_watchlists` field cannot be nested within a list.
  """
  publicWatchlists(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    sport: Sport!
  ): WatchlistConnection
  pushNotificationsSupported: Boolean!
  rampSupported: Boolean!
  recentActiveBids: [TokenBid!]!

  """
  The `recommended_managers` field cannot be nested within a list.
  """
  recommendedManagers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    sport: Sport
  ): UserConnection!
  referee: Boolean!
  refereeRewards: [ReferralReward!]!
  referralAsReferee: Referral
  referralRewardsCount: Int!
  referralSpecialEvents(sport: Sport!): [ReferralSpecialEvent!]!
  referralUrl: String!

  """
  Get the list of referrals
  """
  referrals(
    """
    Page to retrieve. Defaults to 0.
    """
    page: Int

    """
    Maximum number of referrals to return. Defaults to 50.
    """
    pageSize: Int

    """
    Filters the referrals by sport.
    """
    sport: Sport

    """
    Filters the returned referrals by `state` when set.
    """
    state: ReferralState
  ): ReferralPaginated!
  referrer: User
  revealedCardsSummary(seasonStartYear: Int!, sport: Sport!): RevealedCardsSummary!

  """
  The `rewarded_rankings` field cannot be nested within a list.
  """
  rewardedRankings(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    so5LeaderboardType: So5LeaderboardType
    sport: Sport
  ): So5RankingConnection!
  rewards(
    aasmState: RewardState

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    sport: Sport
  ): AnyRewardInterfaceConnection!

  """
  List of scopes the user has access to, returns "all" if the user has access to everything
  """
  scopes: [String!]!

  """
  The `search_card_facet_values` field cannot be nested within a list.
  """
  searchCardFacetValues(advancedFilters: String, facetQuery: String!, field: String!, filters: [SearchFilterInput!], limit: Int, query: String, rarity: Rarity, refinements: [SearchRefinementInput!], sport: Sport): [SearchFacetValue!]!

  """
  The `search_cards` field cannot be nested within a list.
  """
  searchCards(
    advancedFilters: String
    duplicatedKey: String
    facets: [SearchFacetDefinitionInput!]
    filters: [SearchFilterInput!]
    page: Int
    pageSize: Int
    query: String

    """
    will only return common cards if rarity is set and equal  to common
    """
    rarity: Rarity
    refinements: [SearchRefinementInput!]
    sorts: [SearchSortInput!]
    sport: Sport
  ): SearchCards!
  shouldMigrateEth: Boolean!

  """
  The `single_sale_token_offers` field cannot be nested within a list.
  """
  singleSaleTokenOffers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    sortByEndDate: SortingOption
    sport: [Sport!]
  ): TokenOfferConnection!
  slug: String!

  """
  If the so5 no card route is open for submission
  """
  so5NoCardRouteOpened(sport: Sport = FOOTBALL): Boolean!

  """
  The `so5_trophies_summary` field cannot be nested within a list.
  """
  so5TrophiesSummary(sport: Sport): TrophiesSummary!

  """
  The `sold_single_sale_token_offers` field cannot be nested within a list.
  """
  soldSingleSaleTokenOffers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    sortByEndDate: SortingOption
    sport: [Sport!]
  ): TokenOfferConnection!
  sorareAddress: EthereumAddress
  sorareAddressApprovedBank: Boolean!
  sorareAddressApprovedBankPending: String
  sorareAddressBalance: WeiAmount!

  """
  Can only be retrieved from a confirmed device
  """
  sorarePrivateKey: SorarePrivateKey
  sorarePrivateKeyRecovery: String
  spentFiatPaymentIntents(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    endDate: ISO8601DateTime

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    sortType: SortingOption
    startDate: ISO8601DateTime
  ): PaymentConnection!
  sportConversionCredits(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int
    includeGiftCards: Boolean @deprecated(reason: "Not used anymore")
    includeUsing: Boolean

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    sport: Sport
  ): ConversionCreditConnection
  starkKey: String
  status: String

  """
  Set to true if the user deleted his account or was suspended
  """
  suspended: Boolean!
  task(id: ID!): ManagerTaskInterface!
  taskCampaign(slug: String!): TaskCampaign!
  taskConfig(slug: String!): TaskConfig!
  taskGroup(slug: String!): TaskGroup!
  taskGroups: [TaskGroup!]!
  tasks(periodicity: ManagerTaskPeriodicity!, sport: Sport!): [ManagerTaskInterface!]!

  """
  Time left in seconds to confirm email
  """
  timeLeftForConfirmation: Int

  """
  The `token_auctions` field cannot be nested within a list.
  """
  tokenAuctions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    sortByEndDate: SortingOption
    sport: [Sport!]
  ): TokenAuctionConnection!
  tokenOffers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    direction: OfferDirection!

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    sortType: SortingOption
    sport: [Sport!] = [FOOTBALL, BASEBALL, NBA]
    states: [OfferState!]
  ): TokenOfferConnection!
  topPerformingLineups(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    sport: Sport!
  ): So5LineupConnection!

  """
  Current user total balance, in wei.
  """
  totalBalance: WeiAmount!

  """
  Get the total of conversion credits earned thanks to referrals
  """
  totalReferralConversionCreditsEarned(sport: Sport!): MonetaryAmount!

  """
  The `trades` field cannot be nested within a list.
  """
  trades(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    sortByEndDate: SortingOption
    sport: [Sport!]
  ): TokenDealConnection!

  """
  The `trophies` field cannot be nested within a list.
  """
  trophies: [So5Trophies!]!
  unclaimedActionRewards: [ActionReward!]! @deprecated(reason: "Not used anymore")
  unclaimedDeliverableItemOrders(deliverableItemId: ID, sport: Sport): [DeliverableItemOrder!]!
  unclaimedReferralRewardsCount: Int!
  unclaimedSo5Rewards(sport: Sport): [So5Reward!]!
  unconfirmedEmail: String
  unopenedProbabilisticBundles(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    design: ProbabilisticBundleDesign

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    rarity: Rarity
    sport: Sport
  ): ProbabilisticBundleConnection!
  unreadNotificationsCount(
    """
    Filters notifications by the specified categories when set.
    """
    categories: [NotificationCategoryInput!]

    """
    Filters notifications by sports
    """
    sports: [Sport!]
  ): Int!
  unverifiedPhoneNumber: String
  userCardCollectionsPresence(rarity: Rarity!, sport: Sport!): Boolean!

  """
  The `user_relations` field cannot be nested within a list.
  """
  userRelations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int
    knownUserOnly: Boolean

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserRelationConnection!
  userSettings: UserSettings!
  wallet: UserWallet
  warningFlags: [UserFlag!]!
  withdrawals: [Withdrawal!]!
  withdrawalsWithRates: [WithdrawalWithRates!]!

  """
  The `won_token_auctions` field cannot be nested within a list.
  """
  wonTokenAuctions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    sortByEndDate: SortingOption
    sport: [Sport!]
  ): TokenAuctionConnection!
}

enum CustomRewardExperience {
  EVENT
  JERSEY
  MERCH
  TICKET
}

enum CustomSortingOption {
  CUSTOM
  DEFAULT
}

"""
A data partner
"""
type DataPartner implements Node {
  id: ID!
  name: String!
  slug: String!
  termsUrl: String!
}

type DateRangeSpecific {
  endDate: ISO8601DateTime!
  max: Int
  min: Int
  startDate: ISO8601DateTime!
}

interface DealInterface {
  dealStatus: DealStatus!
}

enum DealStatus {
  PENDING_REVIEW
  SETTLED
  UNKNOWN
}

"""
A decisive action notification
"""
type DecisiveActionNotification implements Node & NotificationInterface {
  body: String!
  createdAt: ISO8601DateTime!
  deeplinkUrl: String!
  iconUrl: String!
  id: ID!
  important: Boolean!
  markdownBody: String!
  name: String!
  pictureUrl: String
  player: AnyPlayerInterface!
  read: Boolean!
  rendering: TitleBodyNotificationRendering
  so5Lineup: So5Lineup!
  sport: SportOrShared
  title: String!
  user: CurrentUser!
}

enum DecisivePlayerPickerMode {
  DECISIVE
  SCORE
}

"""
Decisive Player Picker Task
"""
type DecisivePlayerPickerTask implements ManagerTaskInterface & TaskInterface {
  aasmState: ManagerProgressionTaskState!
  alternativeRewardConfigs: [AlternativeRewardConfig!]
  cards: [AnyCardInterface!]!
  claimedAt: ISO8601DateTime
  color: String
  completedAt: ISO8601DateTime
  decisiveActions: [String!]!
  declarative: Boolean! @deprecated(reason: "Not used anymore")
  description: String!
  displayedTypedRules: [So5RuleInterface!]!
  genre: TaskGenre!
  group: TaskGroup
  iconUrl: String
  id: String!
  maxAppearancesCount: Int!
  mode: DecisivePlayerPickerMode!
  name: ManagerProgressionTaskSlug!
  periodicity: ManagerTaskPeriodicity

  """
  The `pickable_cards` field cannot be nested within a list.
  """
  pickableCards(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String
    age: Int
    assetIds: [String!]

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    classicOnly: Boolean
    customCardEditionName: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int
    gameId: ID!
    inActiveCompetitions: [String!]
    inOrderOfRarities: Boolean @deprecated(reason: "Use `sorts` instead")
    inSeasonEligible: Boolean

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    owned: Boolean
    ownedByMe: Boolean
    ownedSinceAfter: ISO8601DateTime
    playerSlugs: [String!]

    """
    positions of the card capitalized
    """
    positions: [Position!]

    """
    rarities of the card in lowercase
    """
    rarities: [Rarity!]
    recentlyOwnedFirst: Boolean @deprecated(reason: "Use `sorts` instead")
    revealable: Boolean
    revealableFirst: Boolean @deprecated(reason: "Use `sorts` instead")
    seasonStartYears: [Int!]
    serialNumber: Int
    shirtNumber: Int
    slugs: [String!]
    sorts: [CardSort!]
    sport: Sport
    teamSlugs: [String!]
    withinDeckFirst: String
  ): AnyCardInterfaceConnection!

  """
  The `pickable_games` field cannot be nested within a list.
  """
  pickableGames(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): GameWithCardsPreviewConnection!
  possibleRewardConfigsIconUrl: String
  probabilisticBundles: [ProbabilisticBundle!]!
  progress: Int!
  rarity: Rarity
  rewardConfigs(mergedConfigsByType: Boolean = false): [AnyRewardConfigInterface!]!
  sealed: Boolean
  target: Int!
  taskAppearances: [DecisivePlayerPickerTaskAppearance!]!
  taskConfigSlug: String!
  templateIconUrl: String!
  title: String!
}

"""
Decisive Player Picker Task Appearance
"""
type DecisivePlayerPickerTaskAppearance implements TaskAppearanceInterface {
  card: AnyCardInterface!
  decisiveStats: [StatScore!]!
  id: ID!
  index: Int!
  locked: Boolean!
  playerGameScore: PlayerGameScoreInterface
  status: DecisivePlayerPickerTaskAppearanceStatus!
  task: TaskInterface!
}

enum DecisivePlayerPickerTaskAppearanceStatus {
  FAILURE
  READY
  SUCCESS
}

"""
A decisive purchase notification
"""
type DecisivePurchaseNotification implements Node & NotificationInterface {
  body: String!
  card: AnyCardInterface!
  createdAt: ISO8601DateTime!
  deeplinkUrl: String!
  game: AnyGameInterface!
  iconUrl: String!
  id: ID!
  important: Boolean!
  markdownBody: String!
  name: String!
  pictureUrl: String
  read: Boolean!
  rendering: TitleBodyNotificationRendering
  reward: AnyRewardInterface!
  sport: SportOrShared
  title: String!
  user: CurrentUser!
}

"""
A set of cards
"""
type Deck implements Node & SocialPicturesInterface {
  """
  The `cards` field cannot be nested within a list.
  """
  cards(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): AnyCardInterfaceConnection!
  deckIndex: Int!
  id: ID!
  name: String!
  slug: String!
  socialPictureFingerprint: String!
  socialPictureUrls: SocialPictureDerivative!
  sport: Sport!
  tokensCount: Int!
  user: User
  visible: Boolean!
}

"""
The connection type for Deck.
"""
type DeckConnection {
  """
  A list of edges.
  """
  edges: [DeckEdge!]!

  """
  A list of nodes.
  """
  nodes: [Deck!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type DeckEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Deck
}

enum DeliverableItemDerivative {
  MOBILE
  TINIFIED
}

interface DeliverableItemInterface {
  id: ID!
  mandatoryWearableSizeInput: Boolean!
  name: String!
  pictureUrl(derivative: DeliverableItemDerivative = TINIFIED): String!
  slug: String!
  sport: Sport!
  threeDimensionalAssetUrl(
    """
    Defaults to GLB
    """
    format: DeliverableItemThreeDimensionalAssetFormat
  ): String
}

type DeliverableItemOrder implements Node {
  aasmState: DeliverableItemStatus!
  claimedAt: ISO8601DateTime
  createdAt: ISO8601DateTime!
  deliverableItem: DeliverableItemInterface!
  expiresAt: ISO8601DateTime
  id: ID!
  user: User!
}

"""
A Deliverable Item Reward
"""
type DeliverableItemReward implements AnyRewardInterface & Node {
  aasmState: RewardState!
  config: DeliverableItemRewardConfig!
  deliverableItem: DeliverableItemInterface!
  detailedName: String!
  id: ID!
  team: TeamInterface
}

"""
A Deliverable Item Reward Config
"""
type DeliverableItemRewardConfig implements AnyRewardConfigInterface {
  boostedRewardConfigs: [AnyRewardConfigInterface!]
  deliverableItem: DeliverableItemInterface!
  id: ID!
}

enum DeliverableItemStatus {
  CLAIMED
  EXPIRED
  READY
  SHIPPED
}

enum DeliverableItemThreeDimensionalAssetFormat {
  USDZ
}

type DeliverableItemVariantsStocks {
  deliverableItem: DeliverableItemInterface!
  id: String!
  teamVariants: [TeamVariantStock!]
}

"""
Aggregated deliverable items rewards overview
"""
type DeliverableItemsRewardsOverview {
  experience: Int!
  jersey: Int!
  tickets: Int!
  wearable: Int!
}

"""
Object that can be a deliverable shop item
"""
union DeliverableShopItem = DeliverableWithCustomVariantShopItem | DeliverableWithNoVariantShopItem | JerseyShopItem | ShopItem

"""
A physical Merch Deliverable buyable through the club shop
"""
type DeliverableWithCustomVariantShopItem implements Node & ShopItemInterface {
  cardCollectionRequirements: [CardCollectionRequirement!]!
  createdAt: ISO8601DateTime!
  currentStockCount: Int!
  description: String
  disabled: Boolean!
  expirationDate: ISO8601DateTime
  id: ID!
  infoLink: String
  initialStockCount: Int!
  limitPerUser: Int!
  myAvailableTotalPurchasesCount: Int!
  myAvailableUserShopItems: [UserShopItem!]
  myBalance: Int!
  myLimitResetAt: ISO8601DateTime
  myPurchasesCount: Int!
  name: String!
  pictureUrl(derivative: ShopItemDerivative = TINIFIED): String!
  position: ShopItemType!
  price: Int!
  requirementsRulesLink: String
  salePrice: Int
  seenInManagerId: Boolean!
  shopItemsRequired: [ShopItem!]!
  threeDimensionalAssetUrl(
    """
    Defaults to GLB
    """
    format: ShopItemThreeDimensionalAssetFormat
  ): String
  unlocked: Boolean!
  variantStockCounts: [VariantStockCount!]!
}

"""
A physical Merch Deliverable buyable through the club shop
"""
type DeliverableWithNoVariantShopItem implements Node & ShopItemInterface {
  cardCollectionRequirements: [CardCollectionRequirement!]!
  createdAt: ISO8601DateTime!
  currentStockCount: Int!
  description: String
  disabled: Boolean!
  expirationDate: ISO8601DateTime
  id: ID!
  infoLink: String
  initialStockCount: Int!
  limitPerUser: Int!
  myAvailableTotalPurchasesCount: Int!
  myAvailableUserShopItems: [UserShopItem!]
  myBalance: Int!
  myLimitResetAt: ISO8601DateTime
  myPurchasesCount: Int!
  name: String!
  pictureUrl(derivative: ShopItemDerivative = TINIFIED): String!
  position: ShopItemType!
  price: Int!
  requirementsRulesLink: String
  salePrice: Int
  seenInManagerId: Boolean!
  shopItemsRequired: [ShopItem!]!
  threeDimensionalAssetUrl(
    """
    Defaults to GLB
    """
    format: ShopItemThreeDimensionalAssetFormat
  ): String
  unlocked: Boolean!
}

enum Delivery {
  EMAIL
  PHONE
}

enum DepositOperationStatus {
  COMPLETED
  EXPIRED
  FAILED
  NOT_PROCESSED
  PENDING
  UNKNOWN
}

"""
A promotional event taking place in the wallet and related to deposits
"""
type DepositPromotionalEvent implements CompletablePromotionalEventInterface & Node & PromotionalEventInterface {
  algoliaFilters: String!
  blogUrl: String
  completedParticipants: Int!
  completionAmount: MonetaryAmount
  completionRules: JSON!
  description: String!
  eligibilityRules: EligibilityRules!
  endDate: ISO8601DateTime!
  id: ID!
  logoUrl: String
  marketBannerTitle: String!
  name: String!
  pictureUrl: String
  probableRewardConfigs: [ProbableRewardConfig!]!
  promotionDetailsRewardDescription: String
  promotionDetailsRewardPictureUrl: String
  promotionType: PromotionType!
  promotionalEventCompletion: PromotionalEventCompletion
  rewardsProbabilisticBundleConfig: [ProbabilisticBundleConfig!]!
  slug: String!
  sport: Sport
  startDate: ISO8601DateTime!
  termsAndConditionsUrl: String
  title: String!
}

enum DepositProvider {
  CHECKOUT_CREDIT_CARD
  ETH_WALLET
  EXTERNAL
  MANGOPAY_APPLE_PAY
  MANGOPAY_BANK_WIRE
  MANGOPAY_CREDIT_CARD
  MANGOPAY_IDEAL_DEPOSIT
  MANGOPAY_PAYPAL_DEPOSIT
  MOONPAY
  RAMP
  WORLDPAY_CREDIT_CARD
}

enum DepositStatus {
  COMPLETED
  EXPIRED
  FAILED
  PENDING
}

"""
A story
"""
interface DeprecatedStoryInterface {
  id: ID!
  read: Boolean!
}

enum DeviceVerificationMode {
  CODE
  LINK
}

enum DeviceWasUpdatedEvent {
  """
  When a device is confirmed
  """
  confirmed

  """
  When a device is revoked
  """
  revoked
}

enum DivisionChange {
  PROMOTED
  RELEGATED
  STABLE
}

"""
A division change configuration
"""
type DivisionChangeConfiguration {
  id: ID!
  lastPromotedSo5Ranking: So5Ranking
  lastStableSo5Ranking: So5Ranking
  promotionRankBasisPoint: Int!
  relegationRankBasisPoint: Int!
}

"""
Mangopay Document Input
"""
input DocumentInput {
  backPagePresignedKey: String
  documentType: DocumentType!
  frontPagePresignedKey: String!
}

enum DocumentType {
  BANK_STATEMENT
  POTENTIAL_POLITICALLY_EXPOSED_PERSON_DECLARATION
  PROOF_OF_ADDRESS
  PROOF_OF_IDENTITY
}

input DropCardInput {
  cardSlug: String!
  signedPrice: String!
}

type DropChallengeTask implements ManagerTaskInterface & TaskInterface {
  aasmState: ManagerProgressionTaskState!
  alternativeRewardConfigs: [AlternativeRewardConfig!]

  """
  The `available_cards` field cannot be nested within a list.
  """
  availableCards(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    onlyDuplicate: Boolean = false
  ): AnyCardInterfaceConnection!
  cards: [AnyCardInterface!]!
  cardsCount: Int!
  claimedAt: ISO8601DateTime
  color: String
  completedAt: ISO8601DateTime
  declarative: Boolean! @deprecated(reason: "Not used anymore")
  description: String!
  displayedTypedRules: [So5RuleInterface!]!
  genre: TaskGenre!
  group: TaskGroup
  iconUrl: String
  id: String!
  name: ManagerProgressionTaskSlug!
  periodicity: ManagerTaskPeriodicity
  possibleRewardConfigsIconUrl: String
  probabilisticBundles: [ProbabilisticBundle!]!
  progress: Int!
  rarity: Rarity
  rewardConfigs(mergedConfigsByType: Boolean = false): [AnyRewardConfigInterface!]!
  target: Int!
  taskConfigSlug: String!
  templateIconUrl: String!
  title: String!
}

"""
The eligibility rule set of a PromotionalEvent
"""
type EligibilityRules {
  anyEligibleTeams: [TeamInterface!]!
  eligibleCardEditions: [String!]
  eligibleCartCardsCount: Int
  eligibleCartMonetaryAmount: MonetaryAmount
  eligibleCollections: EligibleCollectionRule
  eligibleCompetitions: [Competition!]
  eligibleRarities: [Rarity!]
  eligibleSerialNumbers: [String!]
  eligibleSo5Leagues: [String!]
  eligibleTeams: [Team!]
  id: String!
  minimumDepositAmount: Int
}

input EligibleCardsSort {
  direction: SortingOption!
  type: BenchSortType!
}

type EligibleCollectionRule {
  cardCollections: [CardCollection!]
  cartCardsCount: Int!
}

"""
A subscription to a Card/Club/Player/Country/User/CardCollection/Watchlist
"""
type EmailSubscription implements Node {
  anySubscribable: WithSubscriptionsInterface!
  id: ID!
  preferences: EmailSubscriptionPreferences!
  slug: String!
  subscriber: Subscriber
  updatedAt: ISO8601DateTime!
}

"""
The connection type for EmailSubscription.
"""
type EmailSubscriptionConnection {
  """
  A list of edges.
  """
  edges: [EmailSubscriptionEdge!]!
  hasAny: Boolean!

  """
  A list of nodes.
  """
  nodes: [EmailSubscription!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type EmailSubscriptionEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: EmailSubscription
}

"""
A subscription preferences
"""
type EmailSubscriptionPreferences {
  notifyForRarities: [String!]!
  slug: String!
}

enum Emoji {
  COLD_FACE
  FACE_WITH_STARRY_EYES
  FACE_WITH_SYMBOLS_ON_MOUTH
  FIRE
  FLAG_AL
  FLAG_AT
  FLAG_BE
  FLAG_CH
  FLAG_CZ
  FLAG_DE
  FLAG_DK
  FLAG_ES
  FLAG_FR
  FLAG_GB_ENG
  FLAG_GB_SCT
  FLAG_GE
  FLAG_HR
  FLAG_HU
  FLAG_IT
  FLAG_NL
  FLAG_PL
  FLAG_PT
  FLAG_RO
  FLAG_RS
  FLAG_SI
  FLAG_SK
  FLAG_TR
  FLAG_UA
  HOT_FACE
  ONE_HUNDRED
  PARTY_FACE
  POOP
  ROFL
  SALUTING_FACE
  SWEAT_SMILE
  SYMBOL_AL
  SYMBOL_AT
  SYMBOL_BE
  SYMBOL_CH
  SYMBOL_CZ
  SYMBOL_DE
  SYMBOL_DK
  SYMBOL_ES
  SYMBOL_FR
  SYMBOL_GB_ENG
  SYMBOL_GB_SCT
  SYMBOL_GE
  SYMBOL_HR
  SYMBOL_HU
  SYMBOL_IT
  SYMBOL_NL
  SYMBOL_PL
  SYMBOL_PT
  SYMBOL_RO
  SYMBOL_RS
  SYMBOL_SI
  SYMBOL_SK
  SYMBOL_TR
  SYMBOL_UA
  TADA
  THUMB_DOWN
  THUMB_UP
  WAVE
}

enum Emote {
  ARM_CROSSED
  SALUTE
  SHRUG
  SPECIAL
}

type EmoteSentActivity implements ActivitiesInterface & Node {
  activity: ActivitiesInterface!
  celebratable: Boolean!
  createdAt: ISO8601DateTime!
  emote: Emote!
  id: ID!
  reactions: [ActivityReactionType!]!
  rivalsManager: FootballRivalsManager!
}

enum EnabledWallet {
  ETH
  FIAT
}

"""
An engine configuration
"""
type EngineConfiguration {
  activeClubs: Json
  averageScores: Json
  boost: Float
  captain: Float
  collection: Boolean
  differentNationalities: Json
  grade: Float
  lineup: Json
  multiGameScoreAggregator: String
  nationality: Json
  player: Json
  positionStacks: Json
  positions: Json
  sameActiveClub: Json
  scarcity: Json
  season: Float
  specialEditionCard: Json
  xpMultiplier: Float
}

type EnglishAuctionSource implements HistoryTransactionInterface {
  date: ISO8601DateTime!
  description: String
  id: String!
  label: String!
  logoUrl: String
  quantityByFlavour: [PoolKeyShardsCount!]!
  totalQuantity: Int!
}

"""
A withdrawal signature
"""
type EthBankWithdrawalIntent {
  amount: String!
  nonce: Int!
  signature: String!
  user: CurrentUser!
}

"""
Payload required to make a Starkware deposit
"""
type EthDeposit {
  assetType: String!
  starkKey: String!
  vaultId: Int!
  weiAmount: WeiAmount!
}

"""
An ETH migration
"""
type EthMigration implements Node {
  aasmState: String!
  id: ID!
  nonce: String!
  weiAmount: String!
}

"""
An Ethereum Account
"""
type EthereumAccount implements Node {
  address: String!
  id: ID!
  migratorApproved: Boolean
}

scalar EthereumAddress

input EthereumBankTransferApprovalInput {
  deadline: String!
  signature: String!
}

"""
An Ethereum bank transfer authorization request
"""
type EthereumBankTransferAuthorizationRequest {
  amount: WeiAmount!
  contractAddress: String!
  deadline: String!
  receiverAddress: String!
  senderAddress: String!
}

"""
An Ethereum Transaction
"""
type EthereumTransaction implements Node {
  confirmedAt: ISO8601DateTime!
  id: ID!
  status: TransactionStatus
  transactionHash: String!
}

type Event {
  bannerUrl(large: Boolean!): String!
  description: String!
  title: String!
}

"""
A ETH/EUR exchange rate
"""
type ExchangeRate implements Node {
  ethRates: Rates!
  id: ID!
  rates: Json!
  time: ISO8601DateTime!
}

"""
A experience deliverable item interface
"""
type ExperienceDeliverableItem implements DeliverableItemInterface {
  id: ID!
  mandatoryWearableSizeInput: Boolean!
  name: String!
  pictureUrl(derivative: DeliverableItemDerivative = TINIFIED): String!
  slug: String!
  sport: Sport!
  threeDimensionalAssetUrl(
    """
    Defaults to GLB
    """
    format: DeliverableItemThreeDimensionalAssetFormat
  ): String
}

"""
An Experience Reward
"""
type ExperienceReward implements AnyRewardInterface & Node {
  aasmState: RewardState!
  config: ExperienceRewardConfig!
  id: ID!
}

"""
An Experience Reward Config
"""
type ExperienceRewardConfig implements AnyRewardConfigInterface {
  boostedRewardConfigs: [AnyRewardConfigInterface!]
  description: String
  id: ID!
  pictureUrl: String
  title: String
  type: CustomRewardExperience!
}

"""
An external deposit notification
"""
type ExternalDepositNotification implements Node & NotificationInterface {
  amount: WeiAmount!
  body: String!
  createdAt: ISO8601DateTime!
  deeplinkUrl: String!
  iconUrl: String!
  id: ID!
  important: Boolean!
  markdownBody: String!
  name: String!
  pictureUrl: String
  read: Boolean!
  sport: SportOrShared
  status: ExternalDepositNotificationStatus!
  title: String!
  user: CurrentUser!
}

enum ExternalDepositNotificationStatus {
  FINALIZED
  PENDING
}

enum ExternalProvider {
  API_FOOTBALL
  BEPRO
  BEPRO_ROOT
  OPTA
  ROTOWIRE
  SPORTRADAR
}

input ExternalProviderIdInput {
  id: String!
  name: ExternalProvider!
}

"""
An extra swap shop item to add a swap to a user
"""
type ExtraSwapShopItem implements Node & ShopItemInterface {
  cardCollectionRequirements: [CardCollectionRequirement!]!
  createdAt: ISO8601DateTime!
  description: String
  disabled: Boolean!
  expirationDate: ISO8601DateTime
  id: ID!
  infoLink: String
  limitPerUser: Int!
  myAvailableTotalPurchasesCount: Int!
  myAvailableUserShopItems: [UserShopItem!]
  myBalance: Int!
  myLimitResetAt: ISO8601DateTime
  myPurchasesCount: Int!
  name: String!
  pictureUrl(derivative: ShopItemDerivative = TINIFIED): String!
  position: ShopItemType!
  price: Int!
  requirementsRulesLink: String
  salePrice: Int
  seenInManagerId: Boolean!
  shopItemsRequired: [ShopItem!]!
  so5Leaderboard: So5Leaderboard
  so5Leaderboards: [So5Leaderboard!]
  threeDimensionalAssetUrl(
    """
    Defaults to GLB
    """
    format: ShopItemThreeDimensionalAssetFormat
  ): String
  unlocked: Boolean!
}

"""
A landmark as detected on a Player picture by face recognition
"""
type FaceLandmark {
  type: String!
  x: Float!
  xInPx: Float!
  y: Float!
  yInPx: Float!
}

"""
The starkware fast withdrawal as a ConditionalTransferRequest
"""
type FastWithdrawal implements Node {
  condition: String!
  createdAt: ISO8601DateTime!
  expirationTimestamp: Int!
  feeInfoUser: Fee
  id: ID!
  nonce: Int!

  """
  amount expressed in multiples of 10e10 (quantum) wei
  """
  quantizedAmount: String!
  receiverPublicKey: String!
  receiverVaultId: Int!
  salt: String!
  senderVaultId: Int!
  status: WithdrawalStatus!
  to: String!
  token: String!
  transactionHash: String
}

"""
The starkware fast withdrawal with rates as a ConditionalTransferRequest
"""
type FastWithdrawalWithRates implements Node {
  amounts: MonetaryAmount!
  condition: String!
  createdAt: ISO8601DateTime!
  expirationTimestamp: Int!
  feeInfoUser: Fee
  id: ID!
  nonce: Int!

  """
  amount expressed in multiples of 10e10 (quantum) wei
  """
  quantizedAmount: String!
  receiverPublicKey: String!
  receiverVaultId: Int!
  salt: String!
  senderVaultId: Int!
  status: WithdrawalStatus!
  to: String!
  token: String!
  transactionHash: String
}

type FeaturedLeagues {
  latest: So5League!
  upcoming: So5League
}

enum FeaturedPageDuration {
  DAYS_1
  DAYS_30
  DAYS_7
}

"""
An object representing featured So5 leaderboard contenders
"""
type FeaturedSo5LeaderboardContenders {
  so5Fixture: So5Fixture!
  so5LeaderboardContenders: [So5LeaderboardContender!]!
  so5LeaderboardContendersPaginated(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): So5LeaderboardContenderConnection!
}

"""
An object representing featured So5 leaderboard groups
"""
type FeaturedSo5LeaderboardGroups {
  so5Fixture: So5Fixture!
  so5LeaderboardGroups: [So5LeaderboardGroupInterface!]!
  so5LeaderboardGroupsPaginated(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): So5LeaderboardGroupInterfaceConnection!
}

"""
Starkware fee representation
"""
type Fee {
  feeLimit: WeiAmount!
  sourceVaultId: Int!
  tokenId: String!
}

type Fiat {
  eur: Float!
  gbp: Float!
  usd: Float!
}

enum FiatCurrency {
  EUR
  GBP
  USD
}

"""
A Fiat Wallet Account
"""
type FiatWalletAccount implements Node {
  currency: FiatCurrency
  id: ID!
}

enum FiatWalletAccountState {
  OWNER
  PAYER
  VALIDATED_OWNER
}

enum FiatWalletKycRefusedReason {
  DOCUMENT_DO_NOT_MATCH_USER_DATA
  DOCUMENT_HAS_EXPIRED
  DOCUMENT_INCOMPLETE
  DOCUMENT_NOT_ACCEPTED
  DOCUMENT_UNREADABLE
  UNDERAGE_PERSON
}

enum FiatWalletKycState {
  CREATED
  OUT_OF_DATE
  REFUSED
  VALIDATED
  VALIDATION_ASKED
}

type FirstRivalsLineupSubmittedActivity implements ActivitiesInterface & Node {
  celebratable: Boolean!
  createdAt: ISO8601DateTime!
  id: ID!
  lineup: FootballRivalsLineup!
  reactions: [ActivityReactionType!]!
  socialPictureUrls: SocialPictureDerivative
}

"""
A SO5 player in a fixture
"""
type FixturePlayer implements Node {
  eligibleSo5Scores: [PlayerGameScoreInterface!]!
  id: ID!
  mainSo5Score: PlayerGameScoreInterface
  player: AnyPlayerInterface!
  position: Position!
  projectedScore: Float
  score: Float
}

"""
The connection type for FixturePlayer.
"""
type FixturePlayerConnection {
  """
  A list of edges.
  """
  edges: [FixturePlayerEdge!]!

  """
  A list of nodes.
  """
  nodes: [FixturePlayer!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type FixturePlayerEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: FixturePlayer
}

type FootballAverageStatWithValueType implements AnyAverageStatWithValueInterface {
  lastValues: [Float!]
  stat: AverageStat!
  value: Float
}

"""
A Football team in a competition
"""
type FootballContestantType implements AnyContestantInterface & Node {
  gamesDrawn: Int!
  gamesLost: Int!
  gamesPlayed: Int!
  gamesWon: Int!
  goalsAgainst: Int!
  goalsFor: Int!
  id: ID!
  matchesDrawn: Int!
  matchesLost: Int!
  matchesPlayed: Int!
  matchesWon: Int!
  points: Int!
  rank: Int
  rankStatus: String
  rankType: TournamentCalendarRankType
  team: TeamInterface!
}

"""
A rewardable conversion credit
"""
type FootballConversionCredit {
  durationInDays: Int!
  maxDiscount: MonetaryAmount!
  percentageDiscount: Float!
  singleUse: Boolean!
}

"""
A football manager task
"""
type FootballManagerTask implements Node {
  aasmState: FootballManagerTaskState!
  cards: [AnyCardInterface!]!
  claimedAt: ISO8601DateTime
  id: ID!
  label: String
  probabilisticBundle: ProbabilisticBundle
  progression: Int
  readyAt: ISO8601DateTime
  resetAt: ISO8601DateTime
  rewardConfig: RewardConfig!
  showCardTutorial: Boolean!
  socialWall: Boolean!
  target: Int
  taskSlug: FootballManagerTaskSlug!
  title: String!
}

enum FootballManagerTaskSlug {
  BASEBALL_DAILY_CLAIM_1
  BASEBALL_DAILY_CLAIM_2
  BASEBALL_DAILY_CLAIM_3
  BASEBALL_DAILY_CLAIM_4
  BASEBALL_DAILY_CLAIM_5
  BASEBALL_DAILY_CLAIM_6
  BASEBALL_DAILY_CLAIM_7
  ENTER_ONE_ARENA_GAME
  ENTER_TWO_ARENA_GAME
  NBA_DAILY_CLAIM_1
  NBA_DAILY_CLAIM_1_BIS
  NBA_DAILY_CLAIM_2
  NBA_DAILY_CLAIM_3
  NBA_DAILY_CLAIM_4
  NBA_DAILY_CLAIM_5
  NBA_DAILY_CLAIM_6
  NBA_DAILY_CLAIM_7
  RIVALS_DAILY_CLAIM_1
  RIVALS_DAILY_CLAIM_2
  RIVALS_DAILY_CLAIM_3
  RIVALS_DAILY_CLAIM_4
  RIVALS_DAILY_CLAIM_5
  RIVALS_DAILY_CLAIM_6
  RIVALS_DAILY_CLAIM_7
  WIN_THREE_CONSECUTIVE_ARENA_MATCHES_V2
}

enum FootballManagerTaskState {
  ASSIGNED
  CANCELED
  CLAIMED
  COMPLETED
  READY
}

enum FootballPosition {
  COACH
  DEFENDER
  FORWARD
  GOALKEEPER
  MIDFIELDER
  UNKNOWN
}

"""
A reward shop item
"""
type FootballRewardShopItem {
  quantity: Int!
  shopItem: ShopItem!
}

"""
Football Rivals leaderboard interface
"""
interface FootballRivalLeaderboardInterface {
  endDate: ISO8601DateTime! @deprecated(reason: "Not used anymore")
  id: ID!
  rankingsCount: Int! @deprecated(reason: "Not used anymore")
  season: FootballRivalsSeason! @deprecated(reason: "Not used anymore")
}

"""
Football Rivals leaderboard ranking interface
"""
interface FootballRivalLeaderboardRankingInterface {
  cumulatedScoreDifference: Float! @deprecated(reason: "Not used anymore")
  id: ID!
  points: Int! @deprecated(reason: "Not used anymore")
  ranking: Int! @deprecated(reason: "Not used anymore")
  reward: AnyRewardInterface @deprecated(reason: "Not used")
  season: FootballRivalsSeason! @deprecated(reason: "Not used anymore")
}

"""
Football Rivals player stat value interface
"""
interface FootballRivalPlayerStatValueInterface {
  player: Player! @deprecated(reason: "Not used anymore")
  statValue: Int! @deprecated(reason: "Not used anymore")
}

"""
Aggregated Arena Story
"""
type FootballRivalsAggregatedArenaStory implements DeprecatedStoryInterface {
  challenges: [FootballRivalsChallenge!]! @deprecated(reason: "Not used anymore")
  id: ID!
  newPoints: Int! @deprecated(reason: "Not used anymore")
  newRanking: Int! @deprecated(reason: "Not used anymore")
  previousPoints: Int! @deprecated(reason: "Not used anymore")
  previousRanking: Int! @deprecated(reason: "Not used anymore")
  read: Boolean!
}

enum FootballRivalsAllAroundActionStat {
  ATTACKING
  DEFENDING
  GENERAL
  GOALKEEPING
  PASSING
  POSSESSION
}

"""
A football Rivals all around score details action
"""
type FootballRivalsAllAroundScoreDetailsAction {
  scores: [FootballRivalsPlayerScore!]! @deprecated(reason: "Not used anymore")
  stat: FootballRivalsAllAroundActionStat! @deprecated(reason: "Not used anymore")
}

"""
A football Rivals appearance
"""
type FootballRivalsAppearance implements Node {
  anyGame: AnyGameInterface! @deprecated(reason: "Not used anymore")
  bonus: Float! @deprecated(reason: "Not used anymore")
  captain: Boolean! @deprecated(reason: "Not used anymore")
  card: Card @deprecated(reason: "Not used anymore")
  decisiveScore: StatScore @deprecated(reason: "Not used anymore")
  detailedScore: [StatScore!]! @deprecated(reason: "Not used anymore")
  extra: Boolean! @deprecated(reason: "Not used anymore")
  id: ID!
  pictureUrl(derivative: String = "tinified"): String
  player: Player @deprecated(reason: "Not used anymore")
  position: Position! @deprecated(reason: "Not used anymore")
  rarity: String @deprecated(reason: "Not used anymore")
  score: Float! @deprecated(reason: "Not used anymore")
  scoreWithoutRarityBonus: Float! @deprecated(reason: "Not used anymore")
  so5Score: So5Score @deprecated(reason: "Not used anymore")
  starting: Boolean @deprecated(reason: "Not used anymore")
}

"""
A Football Rivals Appearance input
"""
input FootballRivalsAppearanceInput {
  captain: Boolean!
  draftableObjectId: ID!
}

"""
A Sorare Football Daily arena request
"""
type FootballRivalsArenaRequest implements Node {
  aasmState: FootballRivalsArenaRequestState! @deprecated(reason: "Not used anymore")
  id: ID!
}

enum FootballRivalsArenaRequestState {
  ACCEPTED
  CREATED
  REFUSED
}

"""
A Sorare Football Daily challenge
"""
type FootballRivalsChallenge implements Node {
  aasmState: FootballRivalsChallengeState! @deprecated(reason: "Not used anymore")
  awayContestant: FootballRivalsContestant @deprecated(reason: "Not used anymore")
  game: FootballRivalsGame! @deprecated(reason: "Not used anymore")
  homeContestant: FootballRivalsContestant @deprecated(reason: "Not used anymore")
  id: ID!
  rarityBonusEnabled: Boolean! @deprecated(reason: "Not used anymore")
  type: FootballRivalsChallengeType! @deprecated(reason: "Not used anymore")
}

"""
The connection type for FootballRivalsChallenge.
"""
type FootballRivalsChallengeConnection {
  """
  A list of edges.
  """
  edges: [FootballRivalsChallengeEdge!]!
  hasAny: Boolean!

  """
  A list of nodes.
  """
  nodes: [FootballRivalsChallenge!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type FootballRivalsChallengeEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: FootballRivalsChallenge
}

enum FootballRivalsChallengeState {
  CLOSED
  CREATED
}

enum FootballRivalsChallengeType {
  ARENA
  FRIENDLY
}

"""
A Rivals manager with information about his lineup being registered
"""
type FootballRivalsChallenger {
  composed: Boolean! @deprecated(reason: "Not used anymore")
  id: String! @deprecated(reason: "Not used anymore")
  invite: FootballRivalsInvite @deprecated(reason: "Not used anymore")
  manager: FootballRivalsManager! @deprecated(reason: "Not used anymore")
}

"""
The connection type for FootballRivalsChallenger.
"""
type FootballRivalsChallengerConnection {
  """
  A list of edges.
  """
  edges: [FootballRivalsChallengerEdge!]!

  """
  A list of nodes.
  """
  nodes: [FootballRivalsChallenger!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type FootballRivalsChallengerEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: FootballRivalsChallenger
}

enum FootballRivalsCompetitionSortType {
  FAVORITE_COMPETITION
  GAME_DATE
}

type FootballRivalsConfig {
  eloGroups: [FootballRivalsEloGroup!]! @deprecated(reason: "Elo groups are not used anymore")
  extraArenaTicketsDrop: Int! @deprecated(reason: "Not used anymore")
  id: ID! @deprecated(reason: "Not used anymore")
  onboardingFeaturedGamePictureUrl: String! @deprecated(reason: "Not used anymore")
}

"""
A Sorare Football Rivals contestant
"""
type FootballRivalsContestant {
  id: ID!
  lineup: FootballRivalsLineup @deprecated(reason: "Not used anymore")

  """
  Manager is the contestant is a manager
  """
  manager: FootballRivalsManager @deprecated(reason: "Not used anymore")
  outcome: FootballRivalsOutcome @deprecated(reason: "Not used anymore")
  pointsDelta: Int @deprecated(reason: "Not used anymore")
  score: Float! @deprecated(reason: "Not used anymore")
}

"""
Current Rivals manager
"""
type FootballRivalsCurrentManager implements FootballRivalsPublicManagerInterface {
  alreadyEnteredArena: Boolean! @deprecated(reason: "Not used anymore")

  """
  The `arena_games` field cannot be nested within a list.
  """
  arenaGames(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): FootballRivalsGameConnection! @deprecated(reason: "Not used anymore")
  arenaUnlocked: Boolean! @deprecated(reason: "Not used anymore")
  canCreateSquad: Boolean! @deprecated(reason: "Not used anymore")

  """
  The `completed_or_ready_task` field cannot be nested within a list.
  """
  completedOrReadyTask: FootballManagerTask @deprecated(reason: "Not used anymore")

  """
  The `current_arena_streak` field cannot be nested within a list.
  """
  currentArenaStreak: Int! @deprecated(reason: "Not used anymore")
  currentEloGroup: FootballRivalsEloGroup! @deprecated(reason: "Not used anymore")
  currentLeaderboard: FootballRivalsDivisionLeaderboard @deprecated(reason: "Not used anymore")
  currentRanking: FootballRivalsDivisionRanking @deprecated(reason: "Not used anymore")
  currentSeasonSquad: FootballRivalsSeasonSquad @deprecated(reason: "Not used anymore")

  """
  The `daily_claim_tasks` field cannot be nested within a list.
  """
  dailyClaimTasks: [FootballManagerTask!]! @deprecated(reason: "Not used anymore")
  divisionConfig: FootballRivalsDivisionLeaderboardDivisionConfig!
  favoriteTeam: TeamInterface @deprecated(reason: "Not used anymore")
  featuredInvitePictureUrl: String @deprecated(reason: "Not used anymore")

  """
  The `highest_lineup_score` field cannot be nested within a list.
  """
  highestLineupScore: Float @deprecated(reason: "Not used anymore")
  id: ID!
  nextArenaFreePlayAvailableAt: ISO8601DateTime @deprecated(reason: "Not used anymore")
  nextEloGroup: FootballRivalsEloGroup @deprecated(reason: "Not used anymore")
  nickname: String! @deprecated(reason: "Not used anymore")
  onboardingFirstTask: FootballManagerTask @deprecated(reason: "Not used anymore")

  """
  The `past_challenges` field cannot be nested within a list.
  """
  pastChallenges(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    type: FootballRivalsChallengeType
  ): FootballRivalsChallengeConnection! @deprecated(reason: "Not used anymore")

  """
  The `past_games` field cannot be nested within a list.
  """
  pastGames(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    onlyArena: Boolean
  ): FootballRivalsGameConnection! @deprecated(reason: "Not used anymore")
  pictureUrl(derivative: String = "low_res"): String

  """
  The `ranking_history` field cannot be nested within a list.
  """
  rankingHistory: [FootballRivalsRankingDelta!]! @deprecated(reason: "Not used anymore")
  remainingArenaRequests: Int! @deprecated(reason: "Not used anymore")
  sawKickoffWelcomeToKickoff: Boolean! @deprecated(reason: "Not used anymore")
  sawKickoffWelcomeToTheArena: Boolean! @deprecated(reason: "Not used anymore")
  squad: FootballRivalsSquad @deprecated(reason: "Not used anymore")
  suggestedManagers: [FootballRivalsSuggestedManager!]! @deprecated(reason: "Not used")
  unreadStories: [DeprecatedStoryInterface!]! @deprecated(reason: "Not used anymore")
  upcomingReceivedInvitesCount: Int! @deprecated(reason: "Not used anymore")
  user: User! @deprecated(reason: "Not used anymore")
}

enum FootballRivalsDecisiveActionStat {
  ASSIST_PENALTY_WON
  CLEAN_SHEET_60
  CLEARANCE_OFF_LINE
  ERROR_LEAD_TO_GOAL
  GOALS
  GOAL_ASSIST
  LAST_MAN_TACKLE
  OWN_GOALS
  PENALTY_CONCEDED
  PENALTY_SAVE
  RED_CARD
  THREE_GOALS_CONCEDED
}

"""
A football Rivals decisive score details action
"""
type FootballRivalsDecisiveScoreDetailsAction {
  scores: [FootballRivalsPlayerScore!]! @deprecated(reason: "Not used anymore")
  stat: FootballRivalsDecisiveActionStat! @deprecated(reason: "Not used anymore")
}

"""
A Rivals division leaderboard
"""
type FootballRivalsDivisionLeaderboard implements FootballRivalLeaderboardInterface & Node {
  endDate: ISO8601DateTime! @deprecated(reason: "Not used anymore")
  id: ID!
  leaderboardConfig: FootballRivalsDivisionLeaderboardConfig! @deprecated(reason: "Not used anymore")
  rankings: [FootballRivalsDivisionRanking!]! @deprecated(reason: "Not used anymore")
  rankingsCount: Int! @deprecated(reason: "Not used anymore")
  season: FootballRivalsSeason! @deprecated(reason: "Not used anymore")
}

"""
A football Rivals leaderboard config
"""
type FootballRivalsDivisionLeaderboardConfig {
  divisionConfig: FootballRivalsDivisionLeaderboardDivisionConfig! @deprecated(reason: "Not used anymore")
  maximumSize: Int! @deprecated(reason: "Not used anymore")
  promotedCount: Int! @deprecated(reason: "Not used anymore")
  promotedDivisionConfig: FootballRivalsDivisionLeaderboardDivisionConfig @deprecated(reason: "Not used anymore")
  rankingRewardConfig: [FootballRivalsDivisionLeaderboardRankingReward!]! @deprecated(reason: "Not used anymore")
  relegatedCount: Int! @deprecated(reason: "Not used anymore")
  relegatedDivisionConfig: FootballRivalsDivisionLeaderboardDivisionConfig @deprecated(reason: "Not used anymore")
}

"""
A football Rivals leaderboard division config
"""
type FootballRivalsDivisionLeaderboardDivisionConfig {
  badgeUrl: String! @deprecated(reason: "Not used anymore")
  id: String! @deprecated(reason: "Not used anymore")
  shortTitle: String! @deprecated(reason: "Not used anymore")
  title: String! @deprecated(reason: "Not used anymore")
}

"""
A football Rivals leaderboard ranking reward
"""
type FootballRivalsDivisionLeaderboardRankingReward {
  probabilisticBundleConfiguration: ProbabilisticBundleConfig @deprecated(reason: "Not used anymore")
  rank: Int! @deprecated(reason: "Not used anymore")
}

"""
A Rivals division ranking
"""
type FootballRivalsDivisionRanking implements FootballRivalLeaderboardRankingInterface & Node {
  cumulatedScoreDifference: Float! @deprecated(reason: "Not used anymore")
  divisionChange: DivisionChange! @deprecated(reason: "Not used anymore")
  divisionConfig: FootballRivalsDivisionLeaderboardDivisionConfig! @deprecated(reason: "Not used anymore")
  eligibleReward: FootballRivalsDivisionLeaderboardRankingReward @deprecated(reason: "Not used anymore")
  id: ID!
  leaderboard: FootballRivalsDivisionLeaderboard! @deprecated(reason: "Not used anymore")
  liveGamesCount: Int! @deprecated(reason: "Not used anymore")
  manager: FootballRivalsManager! @deprecated(reason: "Not used anymore")
  points: Int! @deprecated(reason: "Not used anymore")
  ranking: Int! @deprecated(reason: "Not used anymore")
  reward: AnyRewardInterface @deprecated(reason: "Not used")
  season: FootballRivalsSeason! @deprecated(reason: "Not used anymore")
  upcomingGamesCount: Int! @deprecated(reason: "Not used anymore")
}

"""
A football Rivals squad leaderboard config
"""
type FootballRivalsDivisionSquadLeaderboardConfig {
  divisionConfig: FootballRivalsDivisionLeaderboardDivisionConfig! @deprecated(reason: "Not used anymore")
  maximumSize: Int! @deprecated(reason: "Not used anymore")
  promotedCount: Int! @deprecated(reason: "Not used anymore")
  promotedDivisionConfig: FootballRivalsDivisionLeaderboardDivisionConfig @deprecated(reason: "Not used anymore")
  relegatedCount: Int! @deprecated(reason: "Not used anymore")
  relegatedDivisionConfig: FootballRivalsDivisionLeaderboardDivisionConfig @deprecated(reason: "Not used anymore")
  squadRankingRewardConfig: [FootballRivalsDivisionSquadLeaderboardRankingReward!]! @deprecated(reason: "Not used anymore")
}

"""
A football Rivals squad leaderboard ranking reward
"""
type FootballRivalsDivisionSquadLeaderboardRankingReward {
  rank: Int! @deprecated(reason: "Not used anymore")
  rankingRewardConfig: [FootballRivalsDivisionLeaderboardRankingReward!]! @deprecated(reason: "Not used anymore")
}

"""
A Sorare Football Rivals draftable card
"""
type FootballRivalsDraftableCard implements FootballRivalsDraftableObjectInterface {
  canSubInUntil: ISO8601DateTime @deprecated(reason: "Not used anymore")
  capValue: Float! @deprecated(reason: "Not used anymore")
  card: Card @deprecated(reason: "Not used anymore")
  id: ID!
  licensed: Boolean! @deprecated(reason: "Not used anymore")
  pictureUrl(derivative: String = "tinified"): String
  player: Player! @deprecated(reason: "Not used anymore")
  position: Position! @deprecated(reason: "Not used anymore")
  positions: [Position!]! @deprecated(reason: "Not used anymore")
  power: Float! @deprecated(reason: "Not used anymore")
  so5Score: So5Score @deprecated(reason: "Not used anymore")
}

"""
Football Rivals draftable object interface
"""
interface FootballRivalsDraftableObjectInterface {
  canSubInUntil: ISO8601DateTime @deprecated(reason: "Not used anymore")
  capValue: Float! @deprecated(reason: "Not used anymore")
  id: ID!
  licensed: Boolean! @deprecated(reason: "Not used anymore")
  pictureUrl(derivative: String = "tinified"): String
  player: Player! @deprecated(reason: "Not used anymore")
  position: Position! @deprecated(reason: "Not used anymore")
  positions: [Position!]! @deprecated(reason: "Not used anymore")
  so5Score: So5Score @deprecated(reason: "Not used anymore")
}

"""
A Sorare Football Rivals draftable player
"""
type FootballRivalsDraftablePlayer implements FootballRivalsDraftableObjectInterface {
  canSubInUntil: ISO8601DateTime @deprecated(reason: "Not used anymore")
  capValue: Float! @deprecated(reason: "Not used anymore")
  id: ID!
  licensed: Boolean! @deprecated(reason: "Not used anymore")
  pictureUrl(derivative: String = "tinified"): String
  player: Player! @deprecated(reason: "Not used anymore")
  position: Position! @deprecated(reason: "Not used anymore")
  positions: [Position!]! @deprecated(reason: "Not used anymore")
  so5Score: So5Score @deprecated(reason: "Not used anymore")
}

"""
A football Rivals elo group
"""
type FootballRivalsEloGroup {
  description: String! @deprecated(reason: "Not used anymore")
  from: Int! @deprecated(reason: "Not used anymore")
  id: String! @deprecated(reason: "Not used anymore")
  name: String! @deprecated(reason: "Not used anymore")
  pictureUrl: String! @deprecated(reason: "Not used anymore")
  to: Int @deprecated(reason: "Not used anymore")
  type: FootballRivalsEloGroupType! @deprecated(reason: "Not used anymore")
}

enum FootballRivalsEloGroupType {
  APPRENTICE
  GREATEST_OF_ALL_TIME
  HOMETOWN_HERO
  INTERNATIONAL_ELITE
  LOCAL_COACH
  NATIONAL_STAR
  ONE_TO_WATCH
  REGIONAL_PRODIGY
  UNIVERSAL_RESPECT
  WORLD_CLASS
}

enum FootballRivalsFriendlyChallengerSectionType {
  FOLLOWING
  FOR_YOU
  LINEUPS_SET
  RECENT
  REQUESTS
}

"""
A football Rivals game
"""
type FootballRivalsGame implements Node {
  """
  The `all_my_available_cards` field cannot be nested within a list.
  """
  allMyAvailableCards: [Card!]! @deprecated(reason: "Not used anymore")
  arenaChallenge(userSlug: String!): FootballRivalsChallenge @deprecated(reason: "Not used anymore")
  arenaRequestsCount: Int! @deprecated(reason: "Not used anymore")

  """
  The `arena_score_buckets` field cannot be nested within a list.
  """
  arenaScoreBuckets(division: Int): [Bucket!] @deprecated(reason: "Not used anymore")
  arenaTicketCost: Int! @deprecated(reason: "Not used anymore")

  """
  The `available_challengers` field cannot be nested within a list.
  """
  availableChallengers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    query: String
  ): FootballRivalsChallengerConnection! @deprecated(reason: "Not used anymore")

  """
  The `available_managers` field cannot be nested within a list.
  """
  availableManagers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    query: String
  ): ManagerConnection! @deprecated(reason: "Not used anymore")

  """
  The `available_players` field cannot be nested within a list.
  """
  availablePlayers(
    """
    The position to filter on or empty for the extra positions
    """
    position: Position

    """
    The positions to filter on
    """
    positions: [Position!]
  ): [FootballRivalsDraftableObjectInterface!]! @deprecated(reason: "Not supported anymore")
  boosted: Boolean! @deprecated(reason: "Not used anymore")
  cap: Int! @deprecated(reason: "Not used anymore")
  challenges(first: Int, managerId: ID, type: FootballRivalsChallengeType, userSlug: String): [FootballRivalsChallenge!]! @deprecated(reason: "Not used anymore")
  challengesPaginated(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    managerId: ID
    type: FootballRivalsChallengeType
    userSlug: String
  ): FootballRivalsChallengeConnection! @deprecated(reason: "Not used anymore")

  """
  The `draftable_players` field cannot be nested within a list.
  """
  draftablePlayers: [FootballRivalsDraftableObjectInterface!]! @deprecated(reason: "Not used anymore")
  formationKnown: Boolean! @deprecated(reason: "Not used anymore")
  game: Game! @deprecated(reason: "Not used anymore")
  id: ID!
  label: FootballRivalsGameLabel @deprecated(reason: "Not used anymore")
  lineup(userSlug: String!): FootballRivalsLineup @deprecated(reason: "Not used anymore")
  lineupTactics: [FootballRivalsLineupTactic!]! @deprecated(reason: "Not used anymore")
  myArenaChallenge: FootballRivalsChallenge @deprecated(reason: "Not used anymore")
  myArenaRequest: FootballRivalsArenaRequest @deprecated(reason: "Not used anymore")

  """
  It returns 5 cards playing maximum and the total count
  """
  myAvailableCards: CardsPreview! @deprecated(reason: "Not used anymore")
  myChallenge(userSlug: String!): FootballRivalsChallenge @deprecated(reason: "Not used anymore")
  myFriendlyChallenge(userSlug: String!): FootballRivalsChallenge @deprecated(reason: "Not used anymore")
  myFriendlyChallenges(first: Int): [FootballRivalsChallenge!]! @deprecated(reason: "Not used anymore")
  myFriendsPlaying: FootballRivalsManagersPreview! @deprecated(reason: "Not used anymore")
  myInviteLink: String @deprecated(reason: "Not used anymore")
  myLineup: FootballRivalsLineup @deprecated(reason: "Not used anymore")
  myPlayingSquadMembershipsCount: Int! @deprecated(reason: "Not used anymore")
  myPlayingSquadMembershipsPreview: [FootballRivalsManager!]! @deprecated(reason: "Not used anymore")

  """
  Points won by the current manager
  """
  myPointsDelta: Int @deprecated(reason: "Not used anymore")

  """
  Potential points change in case of a loss
  """
  myPotentialPointsDeltaLoss: Int! @deprecated(reason: "Not used anymore")

  """
  Potential points change in case of a win
  """
  myPotentialPointsDeltaWin: Int! @deprecated(reason: "Not used anymore")
  myRecords: FootballRivalsManagerRecords! @deprecated(reason: "Not used anymore")

  """
  The `my_squad_memberships_challenges` field cannot be nested within a list.
  """
  mySquadMembershipsChallenges: [FootballRivalsSquadMembershipChallenge!]! @deprecated(reason: "Not used anymore")

  """
  Points won by the current manager's squad The `my_squad_points_delta` field cannot be nested within a list.
  """
  mySquadPointsDelta: Int @deprecated(reason: "Not used anymore")

  """
  The `onboarding_lineup_simulation` field cannot be nested within a list.
  """
  onboardingLineupSimulation(appearances: [FootballRivalsAppearanceInput!]!, tacticSlug: String!): FootballRivalsOnboardingLineupSimulation! @deprecated(reason: "Not supported anymore")

  """
  The `paginated_featured_friendly_challengers` field cannot be nested within a list.
  """
  paginatedFeaturedFriendlyChallengers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    type: FootballRivalsFriendlyChallengerSectionType!
  ): FootballRivalsChallengerConnection! @deprecated(reason: "Not used anymore")
  playingManagersCount: Int! @deprecated(reason: "Not used anymore")
  pointsDelta(userSlug: String!): Int @deprecated(reason: "Not used anymore")
  pointsDeltaWinMultiplier: Int! @deprecated(reason: "Not used anymore")
  records(managerId: ID, userSlug: String): FootballRivalsManagerRecords! @deprecated(reason: "Not used anymore")
  season: FootballRivalsSeason @deprecated(reason: "Not used anymore")
  shouldNotify: Boolean! @deprecated(reason: "Not used anymore")
  slug: String! @deprecated(reason: "Not used anymore")

  """
  The `substitutable_players` field cannot be nested within a list.
  """
  substitutablePlayers(appearanceId: ID!): [FootballRivalsDraftableObjectInterface!]! @deprecated(reason: "Not used anymore")
  userGroupLineups(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    slug: String!
  ): FootballRivalsLineupUserGroupLineupConnection! @deprecated(reason: "Not used anymore")
  userGroupLineupsCount(slug: String!): Int! @deprecated(reason: "Not used anymore")

  """
  The `user_group_tournaments` field cannot be nested within a list.
  """
  userGroupTournaments: [RivalsUserGroupTournament!]! @deprecated(reason: "Not used anymore")
}

"""
The connection type for FootballRivalsGame.
"""
type FootballRivalsGameConnection {
  """
  A list of edges.
  """
  edges: [FootballRivalsGameEdge!]!

  """
  A list of nodes.
  """
  nodes: [FootballRivalsGame!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type FootballRivalsGameEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: FootballRivalsGame
}

enum FootballRivalsGameLabel {
  REP_BOOSTED
  STARTING_SOON
  YOUR_CLUB
}

"""
A user notification regarding a Rivals game
"""
type FootballRivalsGameNotification implements Node & NotificationInterface {
  body: String!
  createdAt: ISO8601DateTime!
  deeplinkUrl: String!
  game: FootballRivalsGame! @deprecated(reason: "Not used anymore")
  iconUrl: String!
  id: ID!
  important: Boolean!
  invite: FootballRivalsInvite @deprecated(reason: "Invites not used anymore")
  markdownBody: String!
  name: String!
  pictureUrl: String
  read: Boolean!
  sport: SportOrShared
  title: String!
  user: CurrentUser!
}

"""
A Sorare Football Daily invite
"""
type FootballRivalsInvite implements Node {
  aasmState: String! @deprecated(reason: "Not used anymore")
  game: FootballRivalsGame! @deprecated(reason: "Not used anymore")
  id: ID!
  invitedBy: FootballRivalsManager! @deprecated(reason: "Not used anymore")
  manager: FootballRivalsManager! @deprecated(reason: "Not used anymore")
  status: FootballRivalsInviteStatus! @deprecated(reason: "Not used anymore")
}

enum FootballRivalsInviteStatus {
  ACCEPTED
  CREATED
  REFUSED
}

type FootballRivalsLeaderboard {
  myRanking: FootballRivalsRanking @deprecated(reason: "Not used anymore")
  paginatedRankings: FootballRivalsRankingsPaginated! @deprecated(reason: "Not used anymore")
  ranking(userSlug: String!): FootballRivalsRanking @deprecated(reason: "Not used anymore")
}

type FootballRivalsLeagueGame {
  competition: Competition! @deprecated(reason: "Not used anymore")
  games: [FootballRivalsGame!]! @deprecated(reason: "Not used anymore")
}

"""
A football Rivals lineup
"""
type FootballRivalsLineup implements Node {
  appearances: [FootballRivalsAppearance!]! @deprecated(reason: "Not used anymore")
  canSubstitute: Boolean! @deprecated(reason: "Not used anymore")
  game: FootballRivalsGame! @deprecated(reason: "Not used anymore")
  id: ID!
  manager: FootballRivalsManager! @deprecated(reason: "Not used anymore")
  score: Float! @deprecated(reason: "Not used anymore")

  """
  The `score_details` field cannot be nested within a list.
  """
  scoreDetails: FootballRivalsLineupScoreDetails! @deprecated(reason: "Not used anymore")
  scoreWithoutRarityBonus: Float! @deprecated(reason: "Not used anymore")
  tactic: FootballRivalsLineupTactic! @deprecated(reason: "Not used anymore")
  tacticScore: Float! @deprecated(reason: "Not used anymore")
  tacticStatValue: Float! @deprecated(reason: "Not used anymore")
}

"""
An edge in a connection.
"""
type FootballRivalsLineupEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: FootballRivalsLineup
}

"""
A football Rivals lineup score details
"""
type FootballRivalsLineupScoreDetails {
  allAroundActions: [FootballRivalsAllAroundScoreDetailsAction!]! @deprecated(reason: "Not used anymore")
  decisiveActions: [FootballRivalsDecisiveScoreDetailsAction!]! @deprecated(reason: "Not used anymore")
  matchStartsAt: Int! @deprecated(reason: "Not used anymore")
  playerDecisiveScoresAtMatchStarts: [FootballRivalsPlayerScore!]! @deprecated(reason: "Not used anymore")
  tacticPlayerScores: [FootballRivalsPlayerStat!]! @deprecated(reason: "Not used anymore")
}

"""
A football Rivals lineup tactic
"""
type FootballRivalsLineupTactic {
  color: String!
  description: String!
  displayName: String!
  formation: [Int!]!
  iconUrl: String!
  id: String!
  slug: String!
  stat: String!
  statName: String!
  thresholds: [FootballRivalsLineupTacticThreshold!]!
}

"""
A Football Rivals Lineup Tactic Threshold
"""
type FootballRivalsLineupTacticThreshold {
  score: Float! @deprecated(reason: "Not used anymore")
  threshold: Float! @deprecated(reason: "Not used anymore")
}

"""
The connection type for FootballRivalsLineup.
"""
type FootballRivalsLineupUserGroupLineupConnection {
  """
  A list of edges.
  """
  edges: [FootballRivalsLineupEdge!]!
  hasAny: Boolean!

  """
  A list of nodes.
  """
  nodes: [FootballRivalsLineup!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
A Rivals manager
"""
type FootballRivalsManager implements FootballRivalsPublicManagerInterface & Node {
  """
  The `arena_games` field cannot be nested within a list.
  """
  arenaGames(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): FootballRivalsGameConnection! @deprecated(reason: "Not used anymore")
  arenaUnlocked: Boolean! @deprecated(reason: "Not used anymore")

  """
  The `completed_or_ready_task` field cannot be nested within a list.
  """
  completedOrReadyTask: FootballManagerTask @deprecated(reason: "Not used anymore")

  """
  The `current_arena_streak` field cannot be nested within a list.
  """
  currentArenaStreak: Int! @deprecated(reason: "Not used anymore")
  currentEloGroup: FootballRivalsEloGroup! @deprecated(reason: "Not used anymore")
  currentLeaderboard: FootballRivalsDivisionLeaderboard @deprecated(reason: "Not used anymore")
  currentRanking: FootballRivalsDivisionRanking @deprecated(reason: "Not used anymore")
  currentSeasonSquad: FootballRivalsSeasonSquad @deprecated(reason: "Not used anymore")

  """
  The `daily_claim_tasks` field cannot be nested within a list.
  """
  dailyClaimTasks: [FootballManagerTask!]! @deprecated(reason: "Not used anymore")
  divisionConfig: FootballRivalsDivisionLeaderboardDivisionConfig!
  featuredInvitePictureUrl: String @deprecated(reason: "Not used anymore")

  """
  The `highest_lineup_score` field cannot be nested within a list.
  """
  highestLineupScore: Float @deprecated(reason: "Not used anymore")
  id: ID!
  myRivalry: FootballRivalsRivalry @deprecated(reason: "Not used anymore")
  nextEloGroup: FootballRivalsEloGroup @deprecated(reason: "Not used anymore")
  nickname: String! @deprecated(reason: "Not used anymore")

  """
  The `past_challenges` field cannot be nested within a list.
  """
  pastChallenges(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    type: FootballRivalsChallengeType
  ): FootballRivalsChallengeConnection! @deprecated(reason: "Not used anymore")

  """
  The `past_games` field cannot be nested within a list.
  """
  pastGames(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    onlyArena: Boolean
  ): FootballRivalsGameConnection! @deprecated(reason: "Not used anymore")
  pictureUrl(derivative: String = "low_res"): String

  """
  The `ranking_history` field cannot be nested within a list.
  """
  rankingHistory: [FootballRivalsRankingDelta!]! @deprecated(reason: "Not used anymore")
  user: User! @deprecated(reason: "Not used anymore")
}

"""
A Rivals manager notification
"""
type FootballRivalsManagerNotification implements Node & NotificationInterface {
  body: String!
  createdAt: ISO8601DateTime!
  deeplinkUrl: String!
  iconUrl: String!
  id: ID!
  important: Boolean!
  manager: FootballRivalsManager! @deprecated(reason: "Not used anymore")
  markdownBody: String!
  name: String!
  pictureUrl: String
  read: Boolean!
  sport: SportOrShared
  title: String!
  user: CurrentUser!
}

"""
W/D/L records of a manager
"""
type FootballRivalsManagerRecords {
  draws: Int! @deprecated(reason: "Not used anymore")
  losses: Int! @deprecated(reason: "Not used anymore")
  wins: Int! @deprecated(reason: "Not used anymore")
}

type FootballRivalsManagersPreview {
  managers: [FootballRivalsManager!]! @deprecated(reason: "Not used anymore")
  totalCount: Int! @deprecated(reason: "Not used anymore")
}

type FootballRivalsOnboardingLineupSimulation {
  errors: [UserError!]! @deprecated(reason: "Not used anymore")
  myLineup: FootballRivalsLineup @deprecated(reason: "Not used anymore")
  opponentLineup: FootballRivalsLineup @deprecated(reason: "Not used anymore")
}

enum FootballRivalsOutcome {
  DRAW
  LOSE
  WIN
}

"""
A football Rivals lineup player score details
"""
type FootballRivalsPlayerScore implements FootballRivalPlayerStatValueInterface {
  cumulatedScore: Float! @deprecated(reason: "Not used anymore")
  player: Player! @deprecated(reason: "Not used anymore")
  statValue: Int! @deprecated(reason: "Not used anymore")
}

"""
A football Rivals lineup player stat details
"""
type FootballRivalsPlayerStat implements FootballRivalPlayerStatValueInterface {
  player: Player! @deprecated(reason: "Not used anymore")
  statValue: Int! @deprecated(reason: "Not used anymore")
}

"""
A Rivals ranking for a private league
"""
type FootballRivalsPrivateRanking implements Node {
  bestDailyGame: FootballRivalsGame @deprecated(reason: "Not used anymore")
  bestDailyScore: Float @deprecated(reason: "Not used anymore")
  id: ID!
  manager: FootballRivalsManager! @deprecated(reason: "Not used anymore")
  ranking: Int @deprecated(reason: "Not used anymore")
}

"""
The connection type for FootballRivalsPrivateRanking.
"""
type FootballRivalsPrivateRankingConnection {
  """
  A list of edges.
  """
  edges: [FootballRivalsPrivateRankingEdge!]!

  """
  A list of nodes.
  """
  nodes: [FootballRivalsPrivateRanking!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type FootballRivalsPrivateRankingEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: FootballRivalsPrivateRanking
}

"""
Promotion Relegation Story
"""
type FootballRivalsPromotionRelegationStory implements DeprecatedStoryInterface & FootballRivalsPromotionRelegationStoryInterface {
  divisionChange: DivisionChange @deprecated(reason: "Not used anymore")
  id: ID!
  newDivision: FootballRivalsDivisionLeaderboardDivisionConfig! @deprecated(reason: "Not used anymore")
  previousDivision: FootballRivalsDivisionLeaderboardDivisionConfig! @deprecated(reason: "Not used anymore")
  read: Boolean!
  rewardProbabilisticBundle: ProbabilisticBundle @deprecated(reason: "Not used anymore")
}

"""
Football Rivals Promotion Relegation Story interface
"""
interface FootballRivalsPromotionRelegationStoryInterface implements DeprecatedStoryInterface {
  divisionChange: DivisionChange @deprecated(reason: "Not used anymore")
  id: ID!
  newDivision: FootballRivalsDivisionLeaderboardDivisionConfig! @deprecated(reason: "Not used anymore")
  previousDivision: FootballRivalsDivisionLeaderboardDivisionConfig! @deprecated(reason: "Not used anymore")
  read: Boolean!
  rewardProbabilisticBundle: ProbabilisticBundle @deprecated(reason: "Not used anymore")
}

"""
Public Football Rivals manager information
"""
interface FootballRivalsPublicManagerInterface {
  """
  The `arena_games` field cannot be nested within a list.
  """
  arenaGames(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): FootballRivalsGameConnection! @deprecated(reason: "Not used anymore")
  arenaUnlocked: Boolean! @deprecated(reason: "Not used anymore")

  """
  The `completed_or_ready_task` field cannot be nested within a list.
  """
  completedOrReadyTask: FootballManagerTask @deprecated(reason: "Not used anymore")

  """
  The `current_arena_streak` field cannot be nested within a list.
  """
  currentArenaStreak: Int! @deprecated(reason: "Not used anymore")
  currentEloGroup: FootballRivalsEloGroup! @deprecated(reason: "Not used anymore")
  currentLeaderboard: FootballRivalsDivisionLeaderboard @deprecated(reason: "Not used anymore")
  currentRanking: FootballRivalsDivisionRanking @deprecated(reason: "Not used anymore")
  currentSeasonSquad: FootballRivalsSeasonSquad @deprecated(reason: "Not used anymore")

  """
  The `daily_claim_tasks` field cannot be nested within a list.
  """
  dailyClaimTasks: [FootballManagerTask!]! @deprecated(reason: "Not used anymore")
  divisionConfig: FootballRivalsDivisionLeaderboardDivisionConfig!
  featuredInvitePictureUrl: String @deprecated(reason: "Not used anymore")

  """
  The `highest_lineup_score` field cannot be nested within a list.
  """
  highestLineupScore: Float @deprecated(reason: "Not used anymore")
  nextEloGroup: FootballRivalsEloGroup @deprecated(reason: "Not used anymore")
  nickname: String! @deprecated(reason: "Not used anymore")

  """
  The `past_challenges` field cannot be nested within a list.
  """
  pastChallenges(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    type: FootballRivalsChallengeType
  ): FootballRivalsChallengeConnection! @deprecated(reason: "Not used anymore")

  """
  The `past_games` field cannot be nested within a list.
  """
  pastGames(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    onlyArena: Boolean
  ): FootballRivalsGameConnection! @deprecated(reason: "Not used anymore")
  pictureUrl(derivative: String = "low_res"): String

  """
  The `ranking_history` field cannot be nested within a list.
  """
  rankingHistory: [FootballRivalsRankingDelta!]! @deprecated(reason: "Not used anymore")
  user: User! @deprecated(reason: "Not used anymore")
}

type FootballRivalsRanking {
  manager: FootballRivalsManager! @deprecated(reason: "Not used anymore")
  myLosses: Int @deprecated(reason: "Not used anymore")
  myWins: Int @deprecated(reason: "Not used anymore")
  rank: Int! @deprecated(reason: "Not used anymore")
  rankOverview: String @deprecated(reason: "Not used anymore")
}

"""
A Rivals division ranking delta
"""
type FootballRivalsRankingDelta {
  date: ISO8601Date! @deprecated(reason: "Not used anymore")
  ranking: Int! @deprecated(reason: "Not used anymore")
}

type FootballRivalsRankingsPaginated {
  currentPage: Int!
  nodes: [FootballRivalsRanking!]!
  pages: Int!
  totalCount: Int!
}

"""
A rivalry between contestants
"""
type FootballRivalsRivalry {
  """
  The `games` field cannot be nested within a list.
  """
  games(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): FootballRivalsGameConnection! @deprecated(reason: "Not used anymore")
  id: ID!

  """
  The `past_challenges` field cannot be nested within a list.
  """
  pastChallenges(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): FootballRivalsChallengeConnection! @deprecated(reason: "Not used anymore")
  pastOutcomesPreview(first: Int): [FootballRivalsOutcome!]! @deprecated(reason: "Not used anymore")
  records: FootballRivalsManagerRecords! @deprecated(reason: "Not used anymore")
  status: RivalryStatus @deprecated(reason: "Not used anymore")
  stories: [Story!]! @deprecated(reason: "No rivalry stories anymore")

  """
  The `upcoming_games_by_league` field cannot be nested within a list.
  """
  upcomingGamesByLeague(fromDate: ISO8601DateTime!, sortBy: FootballRivalsCompetitionSortType, toDate: ISO8601DateTime!): [FootballRivalsLeagueGame!]! @deprecated(reason: "Not used anymore")
  winRatio: Float @deprecated(reason: "Not used anymore")
}

"""
The Football Rivals fields
"""
type FootballRivalsRoot {
  arenaTicketClaimPeriod: Int! @deprecated(reason: "Not used anymore")
  availableManagers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    query: String
  ): ManagerConnection! @deprecated(reason: "Not used anymore")

  """
  Get a list of challenges by their ids.
  """
  challenges(ids: [String!]!): [FootballRivalsChallenge!]! @deprecated(reason: "Not used anymore")
  config: FootballRivalsConfig! @deprecated(reason: "Not used anymore")
  currentManager: FootballRivalsCurrentManager @deprecated(reason: "Not used anymore")
  currentManagerHasLiveGames(sport: Sport): Boolean! @deprecated(reason: "Not used anymore")
  currentSeason: FootballRivalsSeason @deprecated(reason: "Not used anymore")
  dailyMissionResetIn: ISO8601DateTime @deprecated(reason: "Not used anymore")
  featuredGames(fromDate: ISO8601DateTime, toDate: ISO8601DateTime): [FootballRivalsGame!]! @deprecated(reason: "Not used anymore")
  game(slug: String!): FootballRivalsGame! @deprecated(reason: "Not used anymore")
  id: ID!
  leaderboardsConfig: [FootballRivalsDivisionLeaderboardConfig!]! @deprecated(reason: "Not used anymore")
  lineup(code: String!): FootballRivalsLineup! @deprecated(reason: "Not used anymore")
  liveGames: [FootballRivalsGame!]! @deprecated(reason: "Not used anymore")
  manager(userSlug: String!): FootballRivalsManager! @deprecated(reason: "Not used anymore")
  myGamesByLeague(fromDate: ISO8601DateTime!, sortBy: FootballRivalsCompetitionSortType, toDate: ISO8601DateTime!): [FootballRivalsLeagueGame!]! @deprecated(reason: "Use upcomingGamesByLeague instead")
  myRivals(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    division: Int

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    onlyWithUpcomingReceivedInvites: Boolean
  ): ManagerConnection! @deprecated(reason: "Not used anymore")
  myStartingGames(fromDate: ISO8601DateTime!, toDate: ISO8601DateTime!): [FootballRivalsGame!]! @deprecated(reason: "Not used anymore")
  myUpcomingInvitesCount: Int! @deprecated(reason: "Not used anymore")
  myUpcomingLineupsCount: Int! @deprecated(reason: "Not used anymore")
  nextFeaturedGame: FootballRivalsGame @deprecated(reason: "Not used anymore")
  nextGame: FootballRivalsGame @deprecated(reason: "Not used anymore")
  onboardingAvailableFavoriteTeams(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    query: String
  ): TeamInterfaceConnection! @deprecated(reason: "Not used anymore")
  onboardingFeaturedGames: [FootballRivalsGame!] @deprecated(reason: "Not used anymore")
  overallLeaderboard(
    eloGroup: FootballRivalsEloGroupType @deprecated(reason: "Not used anymore")

    """
    Show only followed users rankings
    """
    onlyFollowed: Boolean
    onlyMyEloGroup: Boolean @deprecated(reason: "Not used anymore")
    onlyUserEloGroup: String @deprecated(reason: "Not used anymore")
    page: Int
    pageSize: Int
  ): FootballRivalsLeaderboard! @deprecated(reason: "Not used anymore")
  pastGames: [FootballRivalsGame!]! @deprecated(reason: "Not used anymore")
  pastGamesPaginated(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): FootballRivalsGameConnection! @deprecated(reason: "Not used anymore")

  """
  Ordered by descending date
  """
  pastSeasons(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): FootballRivalsSeasonConnection! @deprecated(reason: "Not used anymore")
  publicSquads: [FootballRivalsSquad!]! @deprecated(reason: "Not used anymore")
  season(slug: String!): FootballRivalsSeason! @deprecated(reason: "Not used anymore")
  squadCreationDivisionConfigLimit: FootballRivalsDivisionLeaderboardDivisionConfig! @deprecated(reason: "Not used anymore")
  squadCreationDivisionLimit: Int! @deprecated(reason: "Not used anymore")
  squadLeaderboardsConfig: [FootballRivalsDivisionSquadLeaderboardConfig!]! @deprecated(reason: "Not used anymore")
  squadMembershipsMaxCount: Int! @deprecated(reason: "Not used anymore")
  upcomingGames(onlyInvited: Boolean @deprecated(reason: "Not used anymore"), onlyRegistered: Boolean @deprecated(reason: "Defaulted to false"), query: String): [FootballRivalsGame!]! @deprecated(reason: "Not used anymore")
  upcomingGamesByLeague(fromDate: ISO8601DateTime, hideRegisteredArena: Boolean @deprecated(reason: "Defaulted to true"), sortBy: FootballRivalsCompetitionSortType, toDate: ISO8601DateTime): [FootballRivalsLeagueGame!]! @deprecated(reason: "Not used anymore")

  """
  Get a RivalsUserGroup
  """
  userGroup(joinSecret: String, slug: String): RivalsUserGroup! @deprecated(reason: "Not used anymore")

  """
  Get a RivalsUserGroupTournament
  """
  userGroupTournament(slug: String): RivalsUserGroupTournament! @deprecated(reason: "Not used anymore")
}

"""
A Rivals Season
"""
type FootballRivalsSeason implements Node {
  cutOffDate: ISO8601DateTime! @deprecated(reason: "Not used anymore")
  endDate: ISO8601DateTime! @deprecated(reason: "Not used anymore")
  id: ID!
  leaderboard(managerId: ID, userSlug: String): FootballRivalsDivisionLeaderboard @deprecated(reason: "Not used anymore")

  """
  The `my_live_games` field cannot be nested within a list.
  """
  myLiveGames: [FootballRivalsGame!]! @deprecated(reason: "Not used anymore")

  """
  The `my_past_and_upcoming_games` field cannot be nested within a list.
  """
  myPastAndUpcomingGames(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): FootballRivalsGameConnection! @deprecated(reason: "Not used anymore")

  """
  The `my_starting_games` field cannot be nested within a list.
  """
  myStartingGames: [FootballRivalsGame!]! @deprecated(reason: "Not used anymore")
  ranking(managerId: ID, userSlug: String): FootballRivalsDivisionRanking @deprecated(reason: "Not used anymore")

  """
  The `season_squad` field cannot be nested within a list.
  """
  seasonSquad(managerId: ID, squadSlug: String, userSlug: String): FootballRivalsSeasonSquad @deprecated(reason: "Not used anymore")
  slug: String! @deprecated(reason: "Not used anymore")
  startDate: ISO8601DateTime! @deprecated(reason: "Not used anymore")
}

"""
The connection type for FootballRivalsSeason.
"""
type FootballRivalsSeasonConnection {
  """
  A list of edges.
  """
  edges: [FootballRivalsSeasonEdge!]!

  """
  A list of nodes.
  """
  nodes: [FootballRivalsSeason!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type FootballRivalsSeasonEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: FootballRivalsSeason
}

"""
A football Rivals season squad
"""
type FootballRivalsSeasonSquad {
  id: String! @deprecated(reason: "Not used anymore")

  """
  The `leaderboard` field cannot be nested within a list.
  """
  leaderboard: FootballRivalsSquadsLeaderboard @deprecated(reason: "Not used anymore")
  membershipsLeaderboard: FootballRivalsSquadMembershipsLeaderboard @deprecated(reason: "Not used anymore")
  season: FootballRivalsSeason! @deprecated(reason: "Not used anymore")
  squad: FootballRivalsSquad! @deprecated(reason: "Not used anymore")
  topManagerScoresCount: Int! @deprecated(reason: "Not used anymore")
}

"""
A football Rivals squad
"""
type FootballRivalsSquad implements Node & UserGroupInterface {
  administrator: User
  canJoin: Validity!
  captain: FootballRivalsManager @deprecated(reason: "Not used anymore")
  conversionCredit: ConversionCredit
  conversionCreditCampaign: ConversionCreditCampaign
  currentRanking: FootballRivalsSquadsLeaderboardRanking @deprecated(reason: "Not used anymore")
  description: String
  displayName: String!
  divisionConfig: FootballRivalsDivisionLeaderboardDivisionConfig! @deprecated(reason: "Not used anymore")
  id: ID!
  joinDisabled: Boolean!
  joinRules: So5Rules!
  joinSecret: String!
  logo: SkinShopItem
  managers: [FootballRivalsManager!]! @deprecated(reason: "Not used anymore")
  membership(userSlug: String!): UserGroupMembershipInterface
  memberships: [UserGroupMembershipInterface!]!
  membershipsCount: Int!
  membershipsPaginated(page: Int, pageSize: Int): So5UserGroupMembershipsPaginated!
  myMembership: UserGroupMembershipInterface
  pictureUrl: String
  publiclyAccessible: Boolean!
  rewardsConfig: LeaderboardRewardsConfig!
  slug: String!
  socialPictureUrls: SocialPictureDerivative @deprecated(reason: "Not used anymore")
  status: UserGroupStatus!
  totalRewardConfigs(highestConfigByType: Boolean): [AnyRewardConfigInterface!]!

  """
  High level overview of the rewards
  """
  totalRewards: RewardsOverview!
}

"""
A football Rivals squad membership Challenge
"""
type FootballRivalsSquadMembershipChallenge {
  challenge: FootballRivalsChallenge @deprecated(reason: "Not used anymore")
  id: ID! @deprecated(reason: "Not used anymore")
  lineup: FootballRivalsLineup @deprecated(reason: "Not used anymore")
  manager: FootballRivalsManager! @deprecated(reason: "Not used anymore")
  nudgeSent: Boolean! @deprecated(reason: "Not used anymore")
}

"""
A Rivals squad memberships leaderboard
"""
type FootballRivalsSquadMembershipsLeaderboard implements FootballRivalLeaderboardInterface {
  endDate: ISO8601DateTime! @deprecated(reason: "Not used anymore")
  id: ID!
  rankings: [FootballRivalsSquadMembershipsLeaderboardRanking!]! @deprecated(reason: "Not used anymore")
  rankingsCount: Int! @deprecated(reason: "Not used anymore")
  season: FootballRivalsSeason! @deprecated(reason: "Not used anymore")
}

"""
A Rivals squad memberships leaderboard ranking
"""
type FootballRivalsSquadMembershipsLeaderboardRanking implements FootballRivalLeaderboardRankingInterface {
  captain: Boolean! @deprecated(reason: "Not used anymore")
  cumulatedScoreDifference: Float! @deprecated(reason: "Not used anymore")
  didNotPlay: Boolean! @deprecated(reason: "Not used anymore")
  eligibleReward: FootballRivalsDivisionLeaderboardRankingReward @deprecated(reason: "Not used anymore")
  id: ID!
  liveGamesCount: Int! @deprecated(reason: "Not used anymore")
  manager: FootballRivalsManager! @deprecated(reason: "Not used anymore")
  newRecruit: Boolean! @deprecated(reason: "Not used anymore")
  points: Int! @deprecated(reason: "Not used anymore")
  ranking: Int! @deprecated(reason: "Not used anymore")
  reward: AnyRewardInterface @deprecated(reason: "Not used")
  season: FootballRivalsSeason! @deprecated(reason: "Not used anymore")
  upcomingGamesCount: Int! @deprecated(reason: "Not used anymore")
}

"""
Squad Promotion Relegation Story
"""
type FootballRivalsSquadPromotionRelegationStory implements DeprecatedStoryInterface & FootballRivalsPromotionRelegationStoryInterface {
  divisionChange: DivisionChange @deprecated(reason: "Not used anymore")
  id: ID!
  newDivision: FootballRivalsDivisionLeaderboardDivisionConfig! @deprecated(reason: "Not used anymore")
  previousDivision: FootballRivalsDivisionLeaderboardDivisionConfig! @deprecated(reason: "Not used anymore")
  ranking: Int! @deprecated(reason: "Not used anymore")
  read: Boolean!
  rewardProbabilisticBundle: ProbabilisticBundle @deprecated(reason: "Not used anymore")
  squad: FootballRivalsSquad! @deprecated(reason: "Not used anymore")
}

"""
A Rivals squads leaderboard
"""
type FootballRivalsSquadsLeaderboard implements FootballRivalLeaderboardInterface & Node {
  endDate: ISO8601DateTime! @deprecated(reason: "Not used anymore")
  id: ID!
  leaderboardConfig: FootballRivalsDivisionLeaderboardConfig! @deprecated(reason: "Not used anymore")
  rankings: [FootballRivalsSquadsLeaderboardRanking!]! @deprecated(reason: "Not used anymore")
  rankingsCount: Int! @deprecated(reason: "Not used anymore")
  season: FootballRivalsSeason! @deprecated(reason: "Not used anymore")
  squadLeaderboardConfig: FootballRivalsDivisionSquadLeaderboardConfig! @deprecated(reason: "Not used anymore")
}

"""
A Rivals squads leaderboard ranking
"""
type FootballRivalsSquadsLeaderboardRanking implements FootballRivalLeaderboardRankingInterface & Node {
  cumulatedScoreDifference: Float! @deprecated(reason: "Not used anymore")
  divisionChange: DivisionChange! @deprecated(reason: "Not used anymore")
  divisionConfig: FootballRivalsDivisionLeaderboardDivisionConfig! @deprecated(reason: "Not used anymore")
  eligibleRewards: [FootballRivalsDivisionLeaderboardRankingReward!]! @deprecated(reason: "Not used anymore")
  id: ID!
  leaderboard: FootballRivalsSquadsLeaderboard! @deprecated(reason: "Not used anymore")
  points: Int! @deprecated(reason: "Not used anymore")
  ranking: Int! @deprecated(reason: "Not used anymore")
  reward: AnyRewardInterface @deprecated(reason: "Not used")
  season: FootballRivalsSeason! @deprecated(reason: "Not used anymore")
  squad: FootballRivalsSquad! @deprecated(reason: "Not used anymore")
}

"""
Suggested Rivals Manager
"""
type FootballRivalsSuggestedManager {
  followedBy: FootballRivalsManager @deprecated(reason: "Not used anymore")
  followedByCount: Int! @deprecated(reason: "Not used anymore")
  id: String! @deprecated(reason: "Not used anymore")
  manager: FootballRivalsManager! @deprecated(reason: "Not used anymore")
}

"""
The Football fields
"""
type FootballRoot {
  """
  Get a list of all cards
  """
  allCards(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String
    age: Int
    assetIds: [String!]

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    classicOnly: Boolean
    customCardEditionName: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int
    inActiveCompetitions: [String!]
    inOrderOfRarities: Boolean @deprecated(reason: "Use `sorts` instead")
    inSeasonEligible: Boolean

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    owned: Boolean
    ownedByMe: Boolean
    ownedSinceAfter: ISO8601DateTime
    playerSlugs: [String!]

    """
    positions of the card capitalized
    """
    positions: [Position!]

    """
    rarities of the card in lowercase
    """
    rarities: [Rarity!]
    recentlyOwnedFirst: Boolean @deprecated(reason: "Use `sorts` instead")
    revealable: Boolean
    revealableFirst: Boolean @deprecated(reason: "Use `sorts` instead")
    seasonStartYears: [Int!]
    serialNumber: Int
    shirtNumber: Int
    slugs: [String!]
    sorts: [CardSort!]
    sport: Sport
    teamSlugs: [String!]
    withinDeckFirst: String
  ): CardConnection!

  """
  Get a card
  """
  card(slug: String!): Card!

  """
  Get a card with its asset ID
  """
  cardByAssetId(assetId: String!): Card!

  """
  Get a card with its blockchain ID
  """
  cardByBlockchainId(blockchainId: String!): Card!

  """
  Get a list of cards
  """
  cards(
    age: Int
    assetIds: [String!]
    classicOnly: Boolean
    customCardEditionName: String
    inActiveCompetitions: [String!]
    inOrderOfRarities: Boolean @deprecated(reason: "Use `sorts` instead")
    inSeasonEligible: Boolean
    owned: Boolean
    ownedByMe: Boolean
    ownedSinceAfter: ISO8601DateTime
    playerSlugs: [String!]

    """
    positions of the card capitalized
    """
    positions: [Position!]

    """
    rarities of the card in lowercase
    """
    rarities: [Rarity!]
    recentlyOwnedFirst: Boolean @deprecated(reason: "Use `sorts` instead")
    revealable: Boolean
    revealableFirst: Boolean @deprecated(reason: "Use `sorts` instead")
    seasonStartYears: [Int!]
    serialNumber: Int
    shirtNumber: Int
    slugs: [String!]
    sorts: [CardSort!]
    sport: Sport
    teamSlugs: [String!]
    withinDeckFirst: String
  ): [Card!]!

  """
  Get a club
  """
  club(slug: String!): Club!

  """
  Get a list of clubs
  """
  clubs(slugs: [String!]!): [Club!]!

  """
  Get the list of clubs that are released and minted
  """
  clubsReady: [Club!]!

  """
  Get a Competition
  """
  competition(slug: String!): Competition!

  """
  Get Competitions
  """
  competitions(slugs: [String!]!): [Competition!]!
  currentManagerHasLiveGames(sport: Sport): Boolean!

  """
  Get a list of cards owned by an ethereum account
  """
  ethereumCards(address: String!): [Card!]!

  """
  Get a Game
  """
  game(id: ID!): Game!
  id: ID!
  leaguesOpenForGameStats(sortType: LeaguesSortInput): [Competition!]!
  myLiveGames: [Game!]!
  myOngoingAndRecentGames: [Game!]!

  """
  Get a national team
  """
  nationalTeam(countryCode: String, slug: String): NationalTeam!

  """
  Get a list of national teams
  """
  nationalTeams(slugs: [String!]!): [NationalTeam!]!

  """
  Get a player
  """
  player(slug: String!): Player!

  """
  Get a list of players
  """
  players(slugs: [String!]!): [Player!]!
  rivals: FootballRivalsRoot! @deprecated(reason: "Not used anymore")
}

"""
So5 No Card Route
"""
type FootballSo5NoCardRouteRoot {
  """
  Get a draftable appearance for the No Card route
  """
  draftableAppearance(so5FixtureId: ID): So5NoCardDraftableAppearance
  id: ID!
}

"""
Stats of a team in a game
"""
type FootballTeamGameStats implements TeamGameStatsInterface {
  accuratePass: Int
  blockedScoringAtt: Int
  cleanSheet: Int
  cleanSheetOdds: Float
  cornerTaken: Int
  foulLost: Int
  foulWon: Int
  goalAssist: Int
  goalKicks: Int
  goals: Int!
  goalsConceded: Int!
  id: ID!
  lostCorners: Int
  midfielderGoals: Int
  ontargetScoringAtt: Int
  overturnedRedCard: Int
  ownGoals: Int
  penGoalsConceded: Int
  penaltyConceded: Int
  penaltyFaced: Int
  penaltySave: Int
  penaltyWon: Int
  possessionPercentageBasisPoints: Int
  saves: Int
  secondYellow: Int
  shotOffTarget: Int
  stats: [SportStat!]
  subsMade: Int
  threeGoalsOdds: Float
  totalClearance: Int
  totalOffside: Int
  totalPass: Int
  totalRedCard: Int
  totalScoringAtt: Int
  totalSubOn: Int
  totalTackle: Int
  totalThrows: Int
  totalYellowCard: Int
  winOdds: Float
  wonCorners: Int
  wonTackle: Int
}

"""
A Sorare Football user sport specific profile
"""
type FootballUserSportProfile implements Node & UserSportProfileInterface {
  achievementBadges: [SkinShopItem]
  availableOnboardingLeaderboards(rarity: Rarity): Boolean!
  background: SkinShopItem
  bannerColor: String
  bannerUrl: String
  blueprintCardsCount: Int!
  clubBadge: SkinShopItem
  clubName: String
  commonGameOnboarded: Boolean!

  """
  The `daily_claim_tasks` field cannot be nested within a list.
  """
  dailyClaimTasks: [FootballManagerTask!]!

  """
  Get a deck of cards
  """
  deck(name: String, slug: String): Deck

  """
  The `decks` field cannot be nested within a list.
  """
  decks(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Full text search query to filter decks
    """
    query: String
  ): DeckConnection!
  favoriteTeam: TeamInterface

  """
  The `forced_onboarding_so5_leaderboard` field cannot be nested within a list.
  """
  forcedOnboardingSo5Leaderboard: So5Leaderboard @deprecated(reason: "Not used anymore")
  gallerySocialPictureUrls: SocialPictureDerivative!

  """
  The `highlighted_deck` field cannot be nested within a list.
  """
  highlightedDeck: Deck
  id: ID!
  managerProfileSocialPictureUrls: SocialPictureDerivative!

  """
  The `my_favorite_team_onboarding_so5_leaderboard` field cannot be nested within a list.
  """
  myFavoriteTeamOnboardingSo5Leaderboard: So5Leaderboard @deprecated(reason: "Not used anymore")
  onboarded: Boolean!
  onboardingLeaderboards(rarity: Rarity): [OnboardingLeaderboard!]!
  onboardingSo5Fixture: So5Fixture

  """
  The `onboarding_so5_leaderboard` field cannot be nested within a list.
  """
  onboardingSo5Leaderboard: So5Leaderboard
  onboardingStatus: UserSportProfileOnboardingStatus! @deprecated(reason: "Not used anymore")

  """
  A frame to apply on top of user profile picture
  """
  pictureFrame: PictureFrameShopItem
  pictureFrameUrl(derivative: String = "tinified"): String @deprecated(reason: "Use pictureFrame")
  playerLoyaltyBoost(editedSeasonsCount: Int!, sealedCards: Int!): RewardBoost!
  proUnlocked: Boolean
  rarityVaultBoost(rarity: Rarity!, sport: Sport!, unseals: Int = 0): RewardBoost!
  remainingUnsealsInPeriod(rarity: Rarity!): Int!
  selectedUserSportStatistics: [UserSportStatistic]!
  shieldUrl: String
  socialPictureFingerprint: String!
  tournamentEligibilities: [TournamentEligibility!]!
  userSportStatistics: [UserSportStatistic!]!
  variant: UserSportProfileVariant!
}

"""
The For You fields
"""
type ForYouRoot {
  featuredLeagues(sport: Sport!): [So5League!]!
  featuredLeaguesWithUpcoming(sport: Sport!): [FeaturedLeagues!]!
  friendsRecentPurchases(so5LeagueSlug: String): [TokenOwner!]!
  myIncompleteCardCollectionsPaginated(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    so5LeagueSlug: String!
  ): IncompleteCardCollectionConnection!
  winningLineup(so5LeagueSlug: String!): WinningLineup
}

"""
The starkware Full withdrawal
"""
type FullWithdrawalRequest implements Node {
  id: ID!
  served: Boolean!
  valid: Boolean!
}

"""
The currentUserGallery cards rule of a So5Leaderboard
"""
type GalleryCards {
  common: ValueOpenBoundaries
  customSeries: ValueOpenBoundaries
  limited: ValueOpenBoundaries
  pro: ValueOpenBoundaries
  rare: ValueOpenBoundaries
  superRare: ValueOpenBoundaries
  unique: ValueOpenBoundaries
}

"""
A professional football game
"""
type Game implements AnyGameInterface & Node {
  """
  The `any_players` field cannot be nested within a list.
  """
  anyPlayers: [AnyPlayerInterface!]!
  awayFormation: TeamFormation!
  awayGoals: Int!
  awayScore: Int!
  awayStats: TeamGameStatsInterface
  awayTeam: TeamInterface
  competition: Competition!
  coverageStatus: GameCoverageStatus!
  date: ISO8601DateTime!
  extraTimeScoreAway: Int
  extraTimeScoreHome: Int
  homeFormation: TeamFormation!
  homeGoals: Int!
  homeScore: Int!
  homeStats: TeamGameStatsInterface
  homeTeam: TeamInterface
  id: ID!
  lowCoverage: Boolean!
  minute: Int!

  """
  The `my_best_by_player_cards` field cannot be nested within a list.
  """
  myBestByPlayerCards(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    rarities: [Rarity!]
  ): AnyCardWithPlayerGameScoreConnection!

  """
  The `my_cards` field cannot be nested within a list.
  """
  myCards(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String
    age: Int
    assetIds: [String!]

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    classicOnly: Boolean
    customCardEditionName: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int
    inActiveCompetitions: [String!]
    inOrderOfRarities: Boolean @deprecated(reason: "Use `sorts` instead")
    inSeasonEligible: Boolean

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    owned: Boolean
    ownedByMe: Boolean
    ownedSinceAfter: ISO8601DateTime
    playerSlugs: [String!]

    """
    positions of the card capitalized
    """
    positions: [Position!]

    """
    rarities of the card in lowercase
    """
    rarities: [Rarity!]
    recentlyOwnedFirst: Boolean @deprecated(reason: "Use `sorts` instead")
    revealable: Boolean
    revealableFirst: Boolean @deprecated(reason: "Use `sorts` instead")
    seasonStartYears: [Int!]
    serialNumber: Int
    shirtNumber: Int
    slugs: [String!]
    sorts: [CardSort!]
    sport: Sport
    teamSlugs: [String!]
    withinDeckFirst: String
  ): AnyCardInterfaceConnection!
  myRivalsAppearances: [FootballRivalsAppearance!]! @deprecated(reason: "Not used anymore")
  myRivalsLineup: FootballRivalsLineup @deprecated(reason: "Not used anymore")
  mySo5Appearances: [So5Appearance!]!
  mySo5AppearancesPaginated(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): So5AppearanceConnection!
  mySo5LeaderboardContenders: [So5LeaderboardContender!]!
  mySo5Lineups: [So5Lineup!]!
  penaltyScoreAway: Int
  penaltyScoreHome: Int
  periodType: Period!

  """
  Score for a Game for a specific player and his current position
  """
  playerGameScore(playerSlug: String!, position: Position): PlayerGameScoreInterface

  """
  The `player_game_scores` field cannot be nested within a list.
  """
  playerGameScores(includingLegends: Boolean = false): [PlayerGameScoreInterface!]!

  """
  The `players` field cannot be nested within a list.
  """
  players: [Player!]!
  rivalsGame: Game @deprecated(reason: "Not used anymore")
  scored: Boolean!
  so5Fixture(so5FixtureType: So5FixtureEvent = CLASSIC): So5Fixture

  """
  So5Score of a Game for a specific player and his current position
  """
  so5Score(playerSlug: String!, position: Position): So5Score
  sport: Sport!
  statusTyped: GameStatus!
  venue: String
  winner: TeamInterface
}

"""
The connection type for Game.
"""
type GameConnection {
  """
  A list of edges.
  """
  edges: [GameEdge!]!

  """
  A list of nodes.
  """
  nodes: [Game!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

enum GameCoverageStatus {
  FULL
  LOW
  NOT_COVERED
  UNCERTAIN
}

"""
A game day
"""
type GameDay implements Node {
  date: ISO8601Date!
  id: ID!
}

"""
The connection type for GameDay.
"""
type GameDayConnection {
  """
  A list of edges.
  """
  edges: [GameDayEdge!]!

  """
  A list of nodes.
  """
  nodes: [GameDay!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type GameDayEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: GameDay
}

"""
An edge in a connection.
"""
type GameEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Game
}

enum GameMode {
  PRO
  RIVALS
  RIVALS_SQUAD
}

"""
A baseball game
"""
type GameOfBaseball implements AnyGameInterface {
  """
  The `any_players` field cannot be nested within a list.
  """
  anyPlayers: [AnyPlayerInterface!]!
  awayErrors: Int
  awayHits: Int
  awayProbablePitcher: BaseballPlayer
  awayScore: Int!
  awayStats: TeamGameStatsInterface
  awayTeam: TeamInterface
  competition: Competition!
  date: ISO8601DateTime!
  hitterPlayerGameScore(playerSlug: String!): BaseballPlayerGameScore
  homeErrors: Int
  homeHits: Int
  homeProbablePitcher: BaseballPlayer
  homeScore: Int!
  homeStats: TeamGameStatsInterface
  homeTeam: TeamInterface
  id: ID!
  inning: Inning!
  losingPitcher: BaseballPlayer
  lowCoverage: Boolean!

  """
  The `my_best_by_player_cards` field cannot be nested within a list.
  """
  myBestByPlayerCards(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    rarities: [Rarity!]
  ): AnyCardWithPlayerGameScoreConnection!

  """
  The `my_cards` field cannot be nested within a list.
  """
  myCards(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String
    age: Int
    assetIds: [String!]

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    classicOnly: Boolean
    customCardEditionName: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int
    inActiveCompetitions: [String!]
    inOrderOfRarities: Boolean @deprecated(reason: "Use `sorts` instead")
    inSeasonEligible: Boolean

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    owned: Boolean
    ownedByMe: Boolean
    ownedSinceAfter: ISO8601DateTime
    playerSlugs: [String!]

    """
    positions of the card capitalized
    """
    positions: [Position!]

    """
    rarities of the card in lowercase
    """
    rarities: [Rarity!]
    recentlyOwnedFirst: Boolean @deprecated(reason: "Use `sorts` instead")
    revealable: Boolean
    revealableFirst: Boolean @deprecated(reason: "Use `sorts` instead")
    seasonStartYears: [Int!]
    serialNumber: Int
    shirtNumber: Int
    slugs: [String!]
    sorts: [CardSort!]
    sport: Sport
    teamSlugs: [String!]
    withinDeckFirst: String
  ): AnyCardInterfaceConnection!
  mySo5Appearances: [So5Appearance!]!
  mySo5AppearancesPaginated(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): So5AppearanceConnection!
  mySo5LeaderboardContenders: [So5LeaderboardContender!]!
  mySo5Lineups: [So5Lineup!]!
  pitcherPlayerGameScore(playerSlug: String!): BaseballPlayerGameScore

  """
  Score for a Game for a specific player and his current position
  """
  playerGameScore(playerSlug: String!, position: Position): PlayerGameScoreInterface

  """
  The `player_game_scores` field cannot be nested within a list.
  """
  playerGameScores(includingLegends: Boolean = false): [PlayerGameScoreInterface!]!
  probablePitchers: [BaseballPlayer!]!
  scored: Boolean!
  scoresByInning: [PeriodScore!]
  so5Fixture(so5FixtureType: So5FixtureEvent = CLASSIC): So5Fixture
  sport: Sport!
  statusTyped: GameStatus!
  venue: String
  winner: TeamInterface
  winningPitcher: BaseballPlayer
}

"""
A basketball game
"""
type GameOfBasketball implements AnyGameInterface {
  """
  The `any_players` field cannot be nested within a list.
  """
  anyPlayers: [AnyPlayerInterface!]!
  awayScore: Int!
  awayStats: TeamGameStatsInterface
  awayTeam: TeamInterface
  competition: Competition!
  date: ISO8601DateTime!
  homeScore: Int!
  homeStats: TeamGameStatsInterface
  homeTeam: TeamInterface
  id: ID!
  isHalftime: Boolean!
  lowCoverage: Boolean!

  """
  The `my_best_by_player_cards` field cannot be nested within a list.
  """
  myBestByPlayerCards(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    rarities: [Rarity!]
  ): AnyCardWithPlayerGameScoreConnection!

  """
  The `my_cards` field cannot be nested within a list.
  """
  myCards(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String
    age: Int
    assetIds: [String!]

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    classicOnly: Boolean
    customCardEditionName: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int
    inActiveCompetitions: [String!]
    inOrderOfRarities: Boolean @deprecated(reason: "Use `sorts` instead")
    inSeasonEligible: Boolean

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    owned: Boolean
    ownedByMe: Boolean
    ownedSinceAfter: ISO8601DateTime
    playerSlugs: [String!]

    """
    positions of the card capitalized
    """
    positions: [Position!]

    """
    rarities of the card in lowercase
    """
    rarities: [Rarity!]
    recentlyOwnedFirst: Boolean @deprecated(reason: "Use `sorts` instead")
    revealable: Boolean
    revealableFirst: Boolean @deprecated(reason: "Use `sorts` instead")
    seasonStartYears: [Int!]
    serialNumber: Int
    shirtNumber: Int
    slugs: [String!]
    sorts: [CardSort!]
    sport: Sport
    teamSlugs: [String!]
    withinDeckFirst: String
  ): AnyCardInterfaceConnection!
  mySo5Appearances: [So5Appearance!]!
  mySo5AppearancesPaginated(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): So5AppearanceConnection!
  mySo5LeaderboardContenders: [So5LeaderboardContender!]!
  mySo5Lineups: [So5Lineup!]!

  """
  Score for a Game for a specific player and his current position
  """
  playerGameScore(playerSlug: String!, position: Position): PlayerGameScoreInterface

  """
  The `player_game_scores` field cannot be nested within a list.
  """
  playerGameScores(includingLegends: Boolean = false): [PlayerGameScoreInterface!]!
  quarter: Int!
  scored: Boolean!
  scoresByQuarter: [PeriodScore!]
  so5Fixture(so5FixtureType: So5FixtureEvent = CLASSIC): So5Fixture
  sport: Sport!
  statusTyped: GameStatus!
  venue: String
  winner: TeamInterface
}

enum GameStatus {
  cancelled
  played
  playing
  postponed
  scheduled
  suspended
}

"""
Game Weekly Task
"""
type GameWeeklyTask implements GameWeeklyTaskInterface & ManagerTaskInterface & TaskInterface {
  aasmState: ManagerProgressionTaskState!
  alternativeRewardConfigs: [AlternativeRewardConfig!]
  cards: [AnyCardInterface!]!
  claimedAt: ISO8601DateTime
  color: String
  completedAt: ISO8601DateTime
  declarative: Boolean! @deprecated(reason: "Not used anymore")
  description: String!
  genre: TaskGenre!
  group: TaskGroup
  iconUrl: String
  id: String!
  name: ManagerProgressionTaskSlug!
  periodicity: ManagerTaskPeriodicity
  possibleRewardConfigsIconUrl: String
  probabilisticBundles: [ProbabilisticBundle!]!
  progress: Int!
  rarity: Rarity
  rewardConfigs(mergedConfigsByType: Boolean = false): [AnyRewardConfigInterface!]!
  so5Fixture: So5Fixture!
  target: Int!
  taskConfigSlug: String!
  templateIconUrl: String!
  title: String!
}

"""
Manager Task
"""
interface GameWeeklyTaskInterface implements ManagerTaskInterface & TaskInterface {
  aasmState: ManagerProgressionTaskState!
  alternativeRewardConfigs: [AlternativeRewardConfig!]
  cards: [AnyCardInterface!]!
  claimedAt: ISO8601DateTime
  color: String
  completedAt: ISO8601DateTime
  declarative: Boolean! @deprecated(reason: "Not used anymore")
  description: String!
  genre: TaskGenre!
  group: TaskGroup
  iconUrl: String
  id: String!
  name: ManagerProgressionTaskSlug!
  periodicity: ManagerTaskPeriodicity
  possibleRewardConfigsIconUrl: String
  probabilisticBundles: [ProbabilisticBundle!]!
  progress: Int!
  rarity: Rarity
  rewardConfigs(mergedConfigsByType: Boolean = false): [AnyRewardConfigInterface!]!
  so5Fixture: So5Fixture!
  target: Int!
  taskConfigSlug: String!
  templateIconUrl: String!
  title: String!
}

type GameWithCardsPreview {
  cards: [AnyCardInterface!]!
  cardsWithPlayerGameScores: [AnyCardWithPlayerGameScore!]!
  game: AnyGameInterface!
  id: String!
  totalCount: Int!
}

"""
The connection type for GameWithCardsPreview.
"""
type GameWithCardsPreviewConnection {
  """
  A list of edges.
  """
  edges: [GameWithCardsPreviewEdge!]!
  hasAny: Boolean!

  """
  A list of nodes.
  """
  nodes: [GameWithCardsPreview!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type GameWithCardsPreviewEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: GameWithCardsPreview
}

enum GameWithCardsPreviewSortType {
  CARDS_TOTAL_COUNT
  GAME_DATE
}

type GameWithPlayerGameScoresPreview {
  game: AnyGameInterface!
  playerGameScores: [PlayerGameScoreInterface!]!
  totalCount: Int!
}

"""
The connection type for GameWithPlayerGameScoresPreview.
"""
type GameWithPlayerGameScoresPreviewConnection {
  """
  A list of edges.
  """
  edges: [GameWithPlayerGameScoresPreviewEdge!]!
  hasAny: Boolean!

  """
  A list of nodes.
  """
  nodes: [GameWithPlayerGameScoresPreview!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type GameWithPlayerGameScoresPreviewEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: GameWithPlayerGameScoresPreview
}

"""
A Mangopay GB bank account type
"""
type GbBankAccount implements BankAccountInterface & Node {
  """
  Account number (last 4 digits)
  """
  accountNumber: String!
  country: Country!
  id: ID!
  ownerAddress: MangopayBankAccountOwnerAddress
  ownerName: String

  """
  Sort code
  """
  sortCode: String!
  status: MangopayBankAccountStatus
}

type GiphySentActivity implements ActivitiesInterface & Node {
  activity: ActivitiesInterface!
  celebratable: Boolean!
  createdAt: ISO8601DateTime!
  giphySlug: String!
  id: ID!
  mp4Url: String!
  reactions: [ActivityReactionType!]!
  rivalsManager: FootballRivalsManager!
}

type HighScarcity {
  spend: MonetaryAmount!
  status: HighScarcityStatus
}

enum HighScarcityStatus {
  GOLD
  PLATINUM
  SILVER
}

type HighScarcityStatuses {
  current: HighScarcity!
  previous: HighScarcity!
  spendLeftToNextStatus: MonetaryAmount
  spendLeftToPreviousPeriodStatus: MonetaryAmount
}

type HighlightedStat {
  name: String!
  type: HighlightedStatType!
  value: Int!
}

enum HighlightedStatType {
  BEAT_L10
  BIG_CHANCE_CREATED
  CLEAN_SHEET_60
  GOALS
  GOAL_ASSIST
  HITTING_HOME_RUNS
  HITTING_RUNS
  HITTING_STOLEN_BASES
  LAST_MAN_TACKLE
  ONTARGET_SCORING_ATT
  PENALTY_SAVE
  PITCHING_INNINGS_PITCHED
  PITCHING_PITCH_COUNT
  PITCHING_STRIKEOUTS
  SAVES
}

interface HistoryTransactionInterface {
  date: ISO8601DateTime!
  description: String
  id: String!
  label: String!
  logoUrl: String
  quantityByFlavour: [PoolKeyShardsCount!]!
  totalQuantity: Int!
}

"""
The connection type for HistoryTransactionInterface.
"""
type HistoryTransactionInterfaceConnection {
  """
  A list of edges.
  """
  edges: [HistoryTransactionInterfaceEdge!]!

  """
  A list of nodes.
  """
  nodes: [HistoryTransactionInterface!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type HistoryTransactionInterfaceEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: HistoryTransactionInterface
}

"""
An ISO 8601-encoded date
"""
scalar ISO8601Date @specifiedBy(url: "https://tools.ietf.org/html/rfc3339")

"""
An ISO 8601-encoded datetime
"""
scalar ISO8601DateTime @specifiedBy(url: "https://tools.ietf.org/html/rfc3339")

"""
A Mangopay IBAN bank account type
"""
type IbanBankAccount implements BankAccountInterface & Node {
  """
  Bank Identifier Code
  """
  bic: String!
  country: Country!

  """
  IBAN
  """
  iban: String!
  id: ID!
  ownerAddress: MangopayBankAccountOwnerAddress
  ownerName: String
  status: MangopayBankAccountStatus
}

"""
A So5 lineup import appearance
"""
type ImportedSo5Appearance {
  boost: Boolean
  captain: Boolean!
  composeTeamObject: ComposeTeamBenchObjectInterface!
  index: Int!
}

enum InGameCurrency {
  COMMON_GEM
  COMMON_XP
  COMPETITION_CRAFT_CLUE
  COUNTRY_CRAFT_CLUE
  FIFTY_FIFTY_CRAFT_CLUE
  GOLDEN_WHEEL_TICKET
  LIMITED_ENERGY
  LIMITED_XP
  OLD_CLUB_SHOP_COIN
  RARE_ENERGY
  RARE_XP
  SUPER_RARE_ENERGY
  SUPER_RARE_XP
  UNIQUE_ENERGY
  UNIQUE_XP
  WHEEL_TICKET
}

"""
In Game Currency Balance
"""
type InGameCurrencyBalance {
  amount: Int!
  cap: Int
  capAlmostReached: Boolean!
  currency: InGameCurrency!
}

"""
A user notification regarding his currency balance
"""
type InGameCurrencyNotification implements Node & NotificationInterface {
  body: String!
  cap: Int
  createdAt: ISO8601DateTime!
  deeplinkUrl: String!
  iconUrl: String!
  id: ID!
  important: Boolean!
  inGameCurrencyBalance: InGameCurrencyBalance!
  markdownBody: String!
  name: String!
  pictureUrl: String
  read: Boolean!
  sport: SportOrShared
  title: String!
  user: CurrentUser!
}

type InGameCurrencyPack implements Node {
  applePrice: MonetaryAmount
  appleProductId: String
  baseAmount: Int!
  bonusAmount: Int!
  currency: InGameCurrency!
  displayName: String!
  googlePrice(countryCode: String): String
  googleProductId: String
  id: ID!
  pictureUrl: String!
  price: MonetaryAmount!
}

"""
A In Game Currency Reward
"""
type InGameCurrencyReward implements AnyRewardInterface & Node {
  aasmState: RewardState!
  coinAmount: Int!
  config: InGameCurrencyRewardConfig!
  id: ID!
}

"""
A InGameCurrency Reward Config
"""
type InGameCurrencyRewardConfig implements AnyRewardConfigInterface {
  amount: Int!
  boostedRewardConfigs: [AnyRewardConfigInterface!]
  currency: InGameCurrency!
  id: ID!
}

type InGameCurrencySource implements HistoryTransactionInterface {
  date: ISO8601DateTime!
  description: String
  id: String!
  label: String!
  logoUrl: String
  quantityByFlavour: [PoolKeyShardsCount!]!
  totalQuantity: Int!
}

type IncompleteCardCollection {
  cardCollection: CardCollection!
  recommendedSlots: [CardCollectionSlot!]!
}

"""
The connection type for IncompleteCardCollection.
"""
type IncompleteCardCollectionConnection {
  """
  A list of edges.
  """
  edges: [IncompleteCardCollectionEdge!]!

  """
  A list of nodes.
  """
  nodes: [IncompleteCardCollection!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type IncompleteCardCollectionEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: IncompleteCardCollection
}

"""
A player injury
"""
type Injury implements Node {
  active: Boolean!
  details: String
  expectedEndDate: ISO8601DateTime
  id: ID!
  kind: String
  startDate: ISO8601DateTime
  status: String
}

"""
A baseball inning
"""
type Inning {
  half: InningHalf!
  number: Int!
}

enum InningHalf {
  BOTTOM
  TOP
}

"""
A Integer value by sport
"""
type IntegerBySportType {
  baseball: Int!
  football: Int!
  nba: Int!
}

"""
Represents untyped JSON
"""
scalar JSON

"""
A jersey deliverable item interface
"""
type JerseyDeliverableItem implements DeliverableItemInterface {
  anyTeam: TeamInterface
  competition: Competition
  id: ID!
  mandatoryWearableSizeInput: Boolean!
  name: String!
  pictureUrl(derivative: DeliverableItemDerivative = TINIFIED): String!
  signed: Boolean!
  slug: String!
  sport: Sport!
  threeDimensionalAssetUrl(
    """
    Defaults to GLB
    """
    format: DeliverableItemThreeDimensionalAssetFormat
  ): String
}

"""
A physical Jersey buyable through the club shop
"""
type JerseyShopItem implements Node & ShopItemInterface {
  cardCollectionRequirements: [CardCollectionRequirement!]!
  createdAt: ISO8601DateTime!
  currentStockCount: Int!
  description: String
  disabled: Boolean!
  expirationDate: ISO8601DateTime
  id: ID!
  infoLink: String
  initialStockCount: Int!
  limitPerUser: Int!
  myAvailableTotalPurchasesCount: Int!
  myAvailableUserShopItems: [UserShopItem!]
  myBalance: Int!
  myLimitResetAt: ISO8601DateTime
  myPurchasesCount: Int!
  name: String!
  pictureUrl(derivative: ShopItemDerivative = TINIFIED): String!
  position: ShopItemType!
  price: Int!
  requirementsRulesLink: String
  salePrice: Int
  seenInManagerId: Boolean!
  shopItemsRequired: [ShopItem!]!
  threeDimensionalAssetUrl(
    """
    Defaults to GLB
    """
    format: ShopItemThreeDimensionalAssetFormat
  ): String
  unlocked: Boolean!
  variantStockCounts: [VariantStockCount!]!
  variantType: VariantStockCountType
}

scalar Json

"""
Represents a jwt token
"""
type JwtToken {
  """
  JWT token expiration time.
  """
  expiredAt: ISO8601DateTime!

  """
  JWT token, usable through a `Authorization: Bearer <token>` HTTP header.
  """
  token: String!
}

input KlarnaAdditionalInfoInput {
  billing: BillingAddressInput!
  phoneNumber: String

  """
  Whether the billing address should be saved for future use
  """
  saveBillingAddress: Boolean
}

"""
Configuration for Klarna Payin for a specific currency
"""
type KlarnaPayinConfig {
  currency: FiatCurrency!
  enabled: Boolean!
  minimumAmount: Int
}

"""
A Mangopay KYC Document requirement
"""
type KycDocumentRequirement {
  documentType: KycDocumentType!
  nbPages: Int!
}

"""
A Mangopay KYC Document type
"""
enum KycDocumentType {
  DRIVING_LICENSE
  NATIONAL_HEALTH_INSURANCE_CARD
  NATIONAL_ID
  PASSPORT
  RESIDENCE_PERMIT
  TAX_ID
}

"""
An KYC request notification
"""
type KycRequestNotification implements Node & NotificationInterface {
  body: String!
  createdAt: ISO8601DateTime!
  deeplinkUrl: String!
  iconUrl: String!
  id: ID!
  important: Boolean!
  markdownBody: String!
  name: String!
  pictureUrl: String
  read: Boolean!
  refusedReason: FiatWalletKycRefusedReason
  sport: SportOrShared
  status: KycRequestNotificationStatus!
  title: String!
  user: CurrentUser!
}

enum KycRequestNotificationStatus {
  REFUSED
  VALIDATED
}

enum KycRequestState {
  CREATED
  OUT_OF_DATE
  REFUSED
  VALIDATED
  VALIDATION_ASKED
}

"""
A So5 Leaderboard rewards config
"""
type LeaderboardRewardsConfig {
  carriedOver: [So5RewardConfig!]
  conditional: [So5RewardConfig!]
  prizePoolCurrency: PaymentCurrency
  ranking: [So5RewardConfig!]
  targetable: [So5RewardConfig!]
  unlockable: [So5RewardConfig!]
}

input LeaguesSortInput {
  direction: SortingOption!
  type: LeaguesSorting!
}

enum LeaguesSorting {
  NAME
  PRIORITY
}

"""
A XP needed by card input to level up
"""
input LevelUpCardInput {
  cardSlug: String!
  xpNeeded: Int!
}

"""
A level up shop item to level up the xp of a card
"""
type LevelUpShopItem implements Node & ShopItemInterface & XPBoosterShopItemInterface {
  cardCollectionRequirements: [CardCollectionRequirement!]!
  createdAt: ISO8601DateTime!
  description: String
  disabled: Boolean!
  endLevel: Int!
  expirationDate: ISO8601DateTime
  id: ID!
  infoLink: String
  limitPerUser: Int!
  myAvailableTotalPurchasesCount: Int!
  myAvailableUserShopItems: [UserShopItem!]
  myBalance: Int!
  myLimitResetAt: ISO8601DateTime
  myPurchasesCount: Int!
  name: String!
  pictureUrl(derivative: ShopItemDerivative = TINIFIED): String!
  position: ShopItemType!
  price: Int!
  rarity: Rarity!
  requirementsRulesLink: String
  salePrice: Int
  seenInManagerId: Boolean!
  shopItemsRequired: [ShopItem!]!
  startLevel: Int!
  threeDimensionalAssetUrl(
    """
    Defaults to GLB
    """
    format: ShopItemThreeDimensionalAssetFormat
  ): String
  unlocked: Boolean!
}

"""
A leveled up card is a card that leveled up with its xp gain amount
"""
type LeveledUpCard {
  card: AnyCardInterface!
  id: String!
  xpGain: Int!
}

"""
A loan
"""
type Loan implements Node {
  endDate: ISO8601DateTime!
  extraCard: AnyCardInterface
  id: ID!
  loanableRoster: LoanableRoster!
  nextEligibleLeaderboard: So5Leaderboard
  status: LoanStatus!
}

"""
A Loan notification
"""
type LoanNotification implements Node & NotificationInterface {
  body: String!
  createdAt: ISO8601DateTime!
  deeplinkUrl: String!

  """
  The date until which the user is eligible for a loan
  """
  eligibleUntil: ISO8601DateTime
  iconUrl: String!
  id: ID!
  important: Boolean!
  loan: Loan
  markdownBody: String!
  name: String!
  pictureUrl: String
  read: Boolean!
  sport: SportOrShared
  title: String!
  user: CurrentUser!
}

enum LoanStatus {
  ACTIVE
  CANCELLED
  CREATED
  EXPIRED
}

"""
Queries related to loanable rosters and players
"""
type LoanableConfigRoot {
  eligibleUntil: ISO8601DateTime
  loanableRosters: [LoanableRoster!]!
  nextEligibleLeaderboard: So5Leaderboard
  so5Competition: So5Competition!
}

"""
A loanable player group
"""
type LoanableRoster implements Node {
  id: ID!
  primaryOffers: [TokenPrimaryOffer!]!
}

"""
A loaned tokend
"""
type LoanedToken implements Node {
  gameWeekLeft: Int!
  id: ID!
  loan: Loan!
}

type LobbySection {
  slug: String!
  so5LeaderboardGroups(includeClosed: Boolean = false): [So5LeaderboardGroupInterface!]!
  title: String!
}

enum LobbySectionType {
  ALL_SEASONS
  FEATURED
  IN_SEASON
  SPECIALS
}

"""
An tile inside the lobby sport page
"""
type LobbyTile {
  autoplayTimeout: Int
  borderColor: String
  category: String
  ctaDeeplink: String
  ctaHref: String
  ctaLabel: String
  description: String!
  desktopBgImageUrl: String
  desktopVariationBgImageUrl: String
  endDate: ISO8601DateTime
  id: String!
  mobileBgImageUrl: String
  mobileVariationBgImageUrl: String
  order: Int
  position: Module!
  sport: Sport!
  startDate: ISO8601DateTime
  title: String!
  titleImageUrl: String!
}

"""
A location
"""
type Location {
  countryCode: String
  regionCode: String
}

enum LockTypeEnum {
  FIXTURE_CUT_OFF
  LEAGUE_CUT_OFF
  LINEUP_CUT_OFF
  PLAYER_CUT_OFF
}

"""
A Loom Account
"""
type LoomAccount implements Node {
  address: String!
  id: ID!
}

"""
The connection type for Manager.
"""
type ManagerConnection {
  """
  A list of edges.
  """
  edges: [ManagerEdge!]!

  """
  A list of nodes.
  """
  nodes: [FootballRivalsManager!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type ManagerEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: FootballRivalsManager
}

"""
A user notification regarding a Manager Progression
"""
type ManagerProgressionNotification implements Node & NotificationInterface {
  body: String!
  createdAt: ISO8601DateTime!
  deeplinkUrl: String!
  iconUrl: String!
  id: ID!
  important: Boolean!
  markdownBody: String!
  name: String!
  pictureUrl: String
  read: Boolean!
  sport: SportOrShared
  title: String!
  user: CurrentUser!
}

enum ManagerProgressionTaskSlug {
  BUY_CARD_PACK
  BUY_CLUB_SHOP
  BUY_ONE_LIMITED
  CARDS_COUNT
  CHALLENGE_A_FRIEND
  COLLECTION_POINTS
  COLLECTOR_REACHED_100_LIMITED
  COLLECTOR_REACHED_250_LIMITED
  COLLECTOR_REACHED_35_LIMITED
  COLLECTOR_REACHED_500_SEVERAL_ALBUMS
  COLLECTOR_REACHED_750_SEVERAL_ALBUMS
  COLLECTOR_TOP_1_ONE_ALBUM
  COLLECTOR_TOP_1_SEVERAL_ALBUMS
  COLLECTOR_TOP_25_RARE
  COLLECTOR_TOP_LIMITED
  COLLECTOR_TOP_RARE
  COMMON_GAME_COMPOSE_FIRST_TEAM
  COMMON_REACHED_100
  COMMON_REACHED_100_TWICE
  COMMON_REACHED_125_FOURTH
  COMMON_REACHED_125_TWICE
  COMMON_REACHED_150_FIFTH
  COMMON_REACHED_150_THIRD
  COMMON_REACHED_175_THIRD
  COMMON_REACHED_175_TWICE
  COMMON_REACHED_200
  COMMON_REACHED_200_TWICE
  COMMON_REACHED_250_FOUR_TIMES
  COMMON_REACHED_250_TWICE
  COMMON_REACHED_300_FOUR_TIMES
  COMMON_REACHED_300_SIX_TIMES
  COMMON_REACHED_400_FOUR_TIMES
  COMMON_REACHED_400_TWICE
  COMMON_REACHED_75
  COMMON_WON_1_LIMITED
  COMPLETE_COLLECTIONS_COUNT
  COMPOSE_TEAM
  CONNECT_WALLET
  DAILY_CLAIM
  DECISIVE_PLAYER_PICKER
  DECISIVE_SO5_APPEARANCE
  DRAFT_YOUR_TEAM
  DROP_CHALLENGE
  DROP_COMMON_CARD
  EDIT_CLUB_NAME
  EPHEMERAL_DAILY_MISSION_SCORE_GAME_REAL_SEVILLA
  EQUIP_CHALLENGE_BADGE
  FIRST_BID
  FIRST_CLAIM_REWARDS
  FIRST_COMPETITION
  FIRST_LIMITED_LINEUP
  FIRST_RIVALS_LINEUP
  FTUE_MBAPPE_COMPOSE
  FTUE_SEMI_PRO_COMPOSE
  FTUE_SEMI_PRO_FIRST_GAME_WEEK
  INFLUENCER_FOLLOWERS_100
  INFLUENCER_FOLLOWERS_2000
  INFLUENCER_FOLLOWERS_500
  INFLUENCER_INVITE_1_FRIEND
  INFLUENCER_REFERRED_1_PLAYED_RARE
  INFLUENCER_REFERRED_3_PLAYED_RARE
  INFLUENCER_REFERRED_5_PLAYED_RARE
  INFLUENCER_REFER_1
  INFLUENCER_REFER_10
  INFLUENCER_REFER_5
  IN_SEASON_US_LIMITED_THRESHOLDS_STREAK
  IN_SEASON_US_LIMITED_THRESHOLDS_STREAK_NO_CARD_ROUTE
  IN_SEASON_US_RARE_THRESHOLDS_STREAK
  IN_SEASON_US_RARE_THRESHOLDS_STREAK_NO_CARD_ROUTE
  LEADERBOARD_RANK_PERCENTAGE_THRESHOLD
  LEARN_MARKETPLACE
  LEARN_PRO_COMPETITION
  LEARN_SCORING
  LEVEL_UP_CARD
  LIMITED_REACHED_100
  LIMITED_REACHED_100_1
  LIMITED_REACHED_100_2
  LIMITED_REACHED_125
  LIMITED_REACHED_150
  LIMITED_REACHED_175
  LIMITED_REACHED_200
  LIMITED_REACHED_250
  LIMITED_REACHED_300
  LIMITED_REACHED_300_TEN
  LIMITED_WON_1
  LIMITED_WON_1_TROPHY
  LIMITED_WON_2
  LIMITED_WON_3
  LIMITED_WON_4
  ONBOARDING_PROMOTIONAL_EVENT_PICK_FIRST_PLAYERS_CREDIT
  PLAY_ONE_ARENA
  PLAY_ONE_MATCH_ON_30_CONSECUTIVE_DAYS
  PLAY_ONE_MATCH_ON_5_CONSECUTIVE_DAYS
  RARE_REACHED_100
  RARE_REACHED_100_1
  RARE_REACHED_100_2
  RARE_REACHED_125
  RARE_REACHED_175
  RARE_REACHED_200
  RARE_REACHED_250
  RARE_REACHED_300
  RARE_WON_1
  RARE_WON_1_TROPHY
  RARE_WON_2
  RARE_WON_3
  RARE_WON_3_TROPHY
  RARE_WON_4
  RARE_WON_TROPHY_1
  RARE_WON_TROPHY_2
  RIVALS_BUY_CARD
  SCORE_300_IN_ARENA
  SCORE_400_IN_ARENA
  SCORE_500_IN_ARENA
  SCOUT_PLAYERS_MARKETPLACE
  SECOND_LINEUP
  SO5_APPEARANCE_SCORE
  SO5_LINEUP_SCORE
  SUPER_RARE_REACHED_100
  SUPER_RARE_REACHED_100_1
  SUPER_RARE_REACHED_150
  SUPER_RARE_REACHED_200
  SUPER_RARE_REACHED_250
  SUPER_RARE_REACHED_300
  SUPER_RARE_REACHED_50_1
  SUPER_RARE_WON_1
  SUPER_RARE_WON_1_TROPHY
  SUPER_RARE_WON_2
  SUPER_RARE_WON_3
  SUPER_RARE_WON_3_TROPHY
  SUPER_RARE_WON_4
  SUPER_RARE_WON_TROPHY_1
  SUPER_RARE_WON_TROPHY_2
  THRESHOLDS_DUO_CONNECTION
  THRESHOLDS_STREAK
  UNIQUE_REACHED_100
  UNIQUE_REACHED_150
  UNIQUE_REACHED_200
  UNIQUE_REACHED_250
  UNIQUE_REACHED_300
  UNIQUE_WON_1
  UNIQUE_WON_1_TROPHY
  UNIQUE_WON_2
  UNIQUE_WON_3
  UNIQUE_WON_3_TROPHY
  UNIQUE_WON_4
  UNIQUE_WON_TROPHY_1
  UNIQUE_WON_TROPHY_2
  WATCH_RIVALS_RECAP
  WIN_10_CONSECUTIVE_ARENA
  WIN_3_CONSECUTIVE_ARENA
  WIN_5_CONSECUTIVE_ARENA
  WIN_ARENA_ALL_OUT_ATTACK
  WIN_ARENA_BY_LESS_THAN_5_POINTS
  WIN_ARENA_BY_MORE_THAN_100_POINTS
  WIN_ARENA_COST_SAVING_EASY
  WIN_ARENA_COST_SAVING_HARD
  WIN_ARENA_DEFENDERS
  WIN_ARENA_DIFFERENCE_LESS_20
  WIN_ARENA_DIFFERENCE_LESS_50
  WIN_ARENA_DIFFERENCE_MORE_30
  WIN_ARENA_DIFFERENCE_MORE_80
  WIN_ARENA_DIFFERENT_TEAMS_EASY
  WIN_ARENA_DIFFERENT_TEAMS_HARD
  WIN_ARENA_FORWARDS
  WIN_ARENA_GEGEN_PRESSING
  WIN_ARENA_JOGA_BONITO
  WIN_ARENA_MIDFIELDERS
  WIN_ARENA_PARK_THE_BUS
  WIN_ARENA_SCORE
  WIN_ARENA_SCORE_CAPTAIN_EASY
  WIN_ARENA_SCORE_CAPTAIN_HARD
  WIN_ARENA_SUBSTITUTION
  WIN_ARENA_SUBSTITUTION_HARD
  WIN_ARENA_TIKI_TAKA
  WIN_ARENA_WITH_NO_YELLOW_RED_CARDS
  WIN_ARENA_WITH_YELLOW_RED_CARDS
  WIN_ONE_ARENA
  WIN_ONE_MATCH
  WIN_TWO_ARENA
}

enum ManagerProgressionTaskState {
  ARCHIVED
  ASSIGNED
  CANCELED
  CLAIMED
  COMPLETED
  READY
}

"""
Manager Task
"""
interface ManagerTaskInterface {
  aasmState: ManagerProgressionTaskState!
  cards: [AnyCardInterface!]!
  claimedAt: ISO8601DateTime
  completedAt: ISO8601DateTime
  declarative: Boolean! @deprecated(reason: "Not used anymore")
  description: String!
  id: String!
  name: ManagerProgressionTaskSlug!
  probabilisticBundles: [ProbabilisticBundle!]!
  progress: Int!
  rarity: Rarity
  target: Int!
  title: String!
}

enum ManagerTaskPeriodicity {
  DAILY
  GAME_WEEKLY
  SEASONAL
  WEEKLY
}

"""
A manager team
"""
type ManagerTeam implements Node {
  activeDivision: Int!
  activeDivisionIconUrl: String!
  divisionChangingSo5Lineup: So5Lineup
  hidable: Boolean!
  hidden: Boolean!
  id: ID!
  lastPreviousSo5Lineup: So5Lineup
  mainRarityType: Rarity
  mySo5Lineup(so5LeagueSlug: String!): So5Lineup
  myTasks: [TaskInterface!]!
  name: String!

  """
  The `past_so5_leaderboard_contenders` field cannot be nested within a list.
  """
  pastSo5LeaderboardContenders(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    so5LeagueSlug: String
  ): So5LeaderboardContenderConnection! @deprecated(reason: "Not used")
  rarityType: String!
  seasonality: So5LeaderboardSeasonality
  seasonalityInYears: [Int!]
  seasonalityName: String
  so5Leaderboard(so5FixtureSlug: String, so5LeagueSlug: String @deprecated(reason: "Use so5FixtureSlug instead")): So5Leaderboard
  so5LeaderboardType: So5LeaderboardType!
  so5TournamentType: So5Tournament!
  svgLogoUrl: String!
  tournamentType: String!
  user: User!
}

"""
The connection type for ManagerTeam.
"""
type ManagerTeamConnection {
  """
  A list of edges.
  """
  edges: [ManagerTeamEdge!]!

  """
  A list of nodes.
  """
  nodes: [ManagerTeam!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type ManagerTeamEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ManagerTeam
}

input MangopayApplePayApprovalInput {
  """
  ApplePay payment data
  """
  applePaymentData: ApplePayPaymentDataInput!
}

"""
A Mangopay Apple Pay authorization request
"""
type MangopayApplePayAuthorizationRequest {
  id: String!
}

"""
A Mangopay bank account owner address type
"""
type MangopayBankAccountOwnerAddress {
  addressLine1: String
  addressLine2: String
  city: String
  country: String
  postalCode: String
  region: String
}

"""
A Mangopay bank account status
"""
enum MangopayBankAccountStatus {
  """
  Active status
  """
  ACTIVE

  """
  Canceled status
  """
  CANCELED

  """
  Deactivated status
  """
  DEACTIVATED

  """
  Pending status
  """
  PENDING
}

"""
A Mangopay credit card authorization request
"""
type MangopayCreditCardAuthorizationRequest {
  amount: Int!
  currency: FiatCurrency!
  id: String!
}

"""
A klarna authorization request
"""
type MangopayKlarnaAuthorizationRequest {
  amount: Int!
  currency: FiatCurrency!
  id: String!
  redirectUrl: String!
}

"""
A Mangopay KYC Request
"""
type MangopayKycDocument implements Node {
  aasmState: KycRequestState!
  id: ID!
}

"""
A Mangopay KYC Request
"""
type MangopayKycRequest implements Node {
  aasmState: AdditionalKycRequestState!
  createdAt: ISO8601DateTime!
  id: ID!
  kycDocuments: [MangopayKycDocument!]!
  outOfDateAt: ISO8601DateTime
  refusedAt: ISO8601DateTime
  requestType: AdditionalKycRequestRequestType!
  validatedAt: ISO8601DateTime
  validationAskedAt: ISO8601DateTime
}

"""
A Mangopay pre-authorization status
"""
enum MangopayPreAuthorizationStatus {
  CREATED
  FAILED
  SUCCEEDED
}

"""
A preAuthorization status fetched from Mangopay
"""
type MangopayRemotePreAuthorizationStatus {
  message: String
  preAuthorizationId: String
  status: MangopayPreAuthorizationStatus
}

"""
A Mangopay fetched transaction status
"""
type MangopayRemoteTransactionStatus {
  message: String
  status: MangopayTransactionStatus
  transactionId: String
}

"""
The Mangopay fields
"""
type MangopayRoot {
  bankAccountType(countryCode: String!): BankAccountType!
  countryCurrency(countryCode: String!): FiatCurrency
  id: ID!
  klarnaPayinConfig: [KlarnaPayinConfig!]!
  kycDocumentRequirements(countryCode: String!): [KycDocumentRequirement!]!
  ownerRegionRequired(countryCode: String!): Boolean!
  remotePreAuthorizationStatus(preAuthorizationId: String!): MangopayRemotePreAuthorizationStatus!
  remoteTransactionStatus(transactionId: String!): MangopayRemoteTransactionStatus!
}

"""
A Mangopay transaction status
"""
enum MangopayTransactionStatus {
  CREATED
  FAILED
  SUCCEEDED
}

"""
A Mangopay User
"""
type MangopayUser implements Node {
  additionalKycRequests: [MangopayKycRequest!]
  blocked: Boolean!
  blockingCode: String
  countryOfResidence: Country
  dob: ISO8601Date
  firstName: String
  id: ID!
  inflowsBlocked: Boolean!
  lastName: String
  mangopayTermsAndConditionsAccepted: Boolean
  mangopayUserId: String!
  nationality: Country
  outflowsBlocked: Boolean!
  requiredDocuments: [DocumentType!]
  scaEnrollmentState: SCAEnrollmentState
}

input MangopayWalletTransferApprovalInput {
  nonce: Int!
  signature: StarkwareSignatureInput!
}

"""
A Mangopay wallet transfer authorization request
"""
type MangopayWalletTransferAuthorizationRequest {
  amount: Int!
  currency: FiatCurrency!
  mangopayWalletId: String!
  nonce: Int!
  operationHash: String!
}

"""
A Mangopay Withdrawal
"""
type MangopayWithdrawal implements Node {
  amounts: MonetaryAmount!
  bankAccount: BankAccount!
  id: ID!
  status: WithdrawalState!
  to: String!
}

"""
A promotional event taking place in the marketplace
"""
type MarketPromotionalEvent implements Node & PromotionalEventInterface {
  algoliaFilters: String!
  blogUrl: String
  cardFromDomesticLeague: Boolean
  cardFromSameTeam: Boolean
  description: String!
  eligibilityRules: EligibilityRules!
  endDate: ISO8601DateTime!
  hasInstantBuy: Boolean!
  id: ID!
  logoUrl: String
  marketBannerTitle: String!
  name: String!
  pictureUrl: String
  probableRewardConfigs: [ProbableRewardConfig!]!
  promotionType: PromotionType!
  rewardsProbabilisticBundleConfig: [ProbabilisticBundleConfig!]!
  slug: String!
  sport: Sport!
  startDate: ISO8601DateTime!
  termsAndConditionsUrl: String
  title: String!
}

"""
The Market fields
"""
type MarketRoot {
  cardPackGroups(so5LeaderboardSlug: String, sport: Sport!): [CardPackGroup!]!
  id: ID!
  inGameCurrencyPack(id: ID!): InGameCurrencyPack!
  inGameCurrencyPacks(currency: InGameCurrency!, sport: Sport!): [InGameCurrencyPack!]!
  potentialDiscount(
    amount: AmountInput!

    """
    When passed, the discount takes into account the user's credits that are in the best bid
    """
    auctionId: ID
    exchangeRateId: ID!
    sport: Sport
  ): String
  potentialDiscountBreakdown(
    amount: AmountInput!

    """
    When passed, the discount takes into account the user's credits that are in the best bid
    """
    auctionId: ID
    exchangeRateId: ID!
    sport: Sport
  ): [PotentialDiscountBreakdown!]
  sorareWatchlists(sport: Sport!): [Watchlist!]!
  tasks(genre: TaskGenre = COMMON_GAME_DAILY_CLAIM, sport: Sport!): [TaskInterface!]!
  watchlist(id: ID!): Watchlist
  wheelCosts(sport: Sport!): [WheelCost!]!
  wheelOdds(sport: Sport!, wheelType: WheelType!): ProbabilisticBundleConfig
}

"""
A Marketing Notification
"""
type MarketingNotification implements Node & NotificationInterface {
  body: String!
  createdAt: ISO8601DateTime!
  deeplinkUrl: String!
  description: String
  iconUrl: String!
  id: ID!
  imageUrl: String
  important: Boolean!
  markdownBody: String!
  name: String!
  pictureUrl: String
  read: Boolean!
  sport: SportOrShared
  title: String!
  url: String!
  user: CurrentUser!
}

"""
A single marketplace preference
"""
type MarketplacePreference {
  defaultValue: Json
  name: String!
  value: Json!
  values: [Json!]!
}

"""
A marketplace preference
"""
input MarketplacePreferenceInput {
  name: String!
  sports: [Sport!]!
  value: Json!
}

"""
A set of cards being promoted in the market place
"""
type MarketplacePromotionalEvent {
  id: String!
  name: String!
  rewardDetailsHref: String
  slugs: [String!]!
}

"""
A set of events being promoted in the market place for a sport
"""
type MarketplacePromotionalEvents {
  events: [MarketplacePromotionalEvent!]!
  id: String!
  sport: Sport!
}

"""
Marketplace preferences specific to a sport
"""
type MarketplaceSportPreferences {
  preferences: [MarketplacePreference!]!
  sport: Sport!
}

"""
Enforces restrictions on the number of card that own the user of submitted lineups
"""
type MaximumCardsCountOwnedByUser {
  maximumCards: Int!
  scarcity: String
}

"""
An object representing a club for which a player has played during a certain time.
"""
type Membership implements Node {
  aggregatedStats: Stats!
  club: Club
  endDate: ISO8601DateTime
  id: ID!
  player: Player!
  startDate: ISO8601DateTime!
  stats: [Stats!]!
  team: TeamInterface!
}

"""
The connection type for Membership.
"""
type MembershipConnection {
  """
  A list of edges.
  """
  edges: [MembershipEdge!]!

  """
  A list of nodes.
  """
  nodes: [Membership!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type MembershipEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Membership
}

type MissedAppearance implements ComposeTeamBenchObjectInterface & So5AppearanceInterface {
  activeSuspensions(so5LeaderboardSlug: String!): [Suspension!]!
  anyCard: AnyCardInterface
  anyPlayer: AnyPlayerInterface!
  anyPlayerGameStats: AnyPlayerGameStatsInterface
  anyTeam: TeamInterface!
  averageScore(type: AveragePlayerScore!): Float
  bonus: Float
  bonusPoints: Float
  bonusRating: BonusOrdinalRatingEnum
  bonuses: [So5AppearanceBonusInterface!]!
  boosted: Boolean!
  captain: Boolean!
  cardBorderRadius: Int!
  cleanScore: Float
  eligiblePlayerGameScores(so5LeaderboardSlug: String): [PlayerGameScoreInterface!]!
  eligibleSo5Scores: [So5Score!]!
  energized: Boolean!
  firstGame: AnyGameInterface

  """
  Appearance card level at that time
  """
  grade: Int!
  id: ID!
  index: Int!
  licensed: Boolean!

  """
  When a bench object will be locked for a leaderboard
  """
  lockedAt(so5LeaderboardSlug: String): ISO8601DateTime!

  """
  Wether a bench object can be updated for a leaderboard
  """
  lockedForLeaderboard(so5LeaderboardSlug: String): Boolean!
  pictureUrl(derivative: String = "tinified"): String
  playedGames: [AnyGameInterface!]!
  player: Player!
  playerGameScore: PlayerGameScoreInterface
  position: Position!
  positions: [Position!]!
  powerBreakdown: PowerBreakdown!

  """
  PowerBreakdown as long as leaderboard is playable. PowerPointsBreakdown after
  """
  powerBreakdownOrPowerPointsBreakdown: PowerBreakdownOrPowerPointsBreakdown
  projectedScore(so5LeaderboardSlug: String!): Float
  rarity: Rarity!
  relevantStats: Json!
  score(withBonus: Boolean = true): Float!
  scoreStatus: ScoreStatus!
  so5Fixture: So5Fixture!
  so5Score: So5Score
  status: String!
  upcomingGame: AnyGameInterface
  videoUrl(derivative: String): String

  """
  Appearance card XP at that time
  """
  xp: Int!

  """
  XP end range of appearance card level at that time
  """
  xpNeededForNextGrade: Int
}

"""
A missed So5Lineup
"""
type MissedLineup {
  appearances: [MissedAppearance!]!
  name: String!
  slug: String!
  so5Leaderboard: So5Leaderboard
}

"""
A user notification regarding a MissedLineup
"""
type MissedLineupNotification implements Node & NotificationInterface {
  body: String!
  createdAt: ISO8601DateTime!
  deeplinkUrl: String!
  iconUrl: String!
  id: ID!
  important: Boolean!
  markdownBody: String!
  missedLineup: MissedLineup
  name: String!
  pictureUrl: String
  read: Boolean!
  sport: SportOrShared
  title: String!
  user: CurrentUser!
}

enum Module {
  BANNER
  CAROUSSEL
  PRO
  REFERRAL
  RIVALS
}

type MonetaryAmount {
  eurCents: Int
  gbpCents: Int
  referenceCurrency: SupportedCurrency!
  usdCents: Int
  wei: WeiAmount
}

"""
An Monetary Reward
"""
type MonetaryReward implements AnyRewardInterface & Node {
  aasmState: RewardState!
  amount: MonetaryAmount!
  config: MonetaryRewardConfig!
  id: ID!
  poolSize: Int!
  sharedPool: Boolean!
}

"""
A Monetary Reward Config
"""
type MonetaryRewardConfig implements AnyRewardConfigInterface {
  amount: MonetaryAmount!
  boostedRewardConfigs: [AnyRewardConfigInterface!]
  id: ID!
  poolSize: Int!
  sharedPool: Boolean!
}

type Mutation {
  """
  Accept an offer
  """
  acceptOffer(
    """
    Parameters for acceptOffer
    """
    input: acceptOfferInput!
  ): acceptOfferPayload

  """
  Accept proposed draftable appearance for a So5NoCardLineup
  """
  acceptSo5NoCardDraftableAppearance(
    """
    Parameters for acceptSo5NoCardDraftableAppearance
    """
    input: acceptSo5NoCardDraftableAppearanceInput!
  ): acceptSo5NoCardDraftableAppearancePayload

  """
  Accept a So5NoCardLineup
  """
  acceptSo5NoCardLineup(
    """
    Parameters for acceptSo5NoCardLineup
    """
    input: acceptSo5NoCardLineupInput!
  ): acceptSo5NoCardLineupPayload

  """
  Accept terms of service
  """
  acceptTerms(
    """
    Parameters for acceptTerms
    """
    input: acceptTermsInput!
  ): AcceptTermsMutationPayload
  activateWalletRecovery(
    """
    Parameters for activateWalletRecovery
    """
    input: activateWalletRecoveryInput!
  ): activateWalletRecoveryPayload

  """
  Allows a user to configure a reminder on an auction
  """
  addAuctionReminder(
    """
    Parameters for addAuctionReminder
    """
    input: addAuctionReminderInput!
  ): addAuctionReminderPayload
  addDevice(
    """
    Parameters for addDevice
    """
    input: addDeviceInput!
  ): addDevicePayload
  addRecommendedLineupToCart(
    """
    Parameters for addRecommendedLineupToCart
    """
    input: addRecommendedLineupToCartInput!
  ): addRecommendedLineupToCartPayload
  addStarkexV6Address(
    """
    Parameters for addStarkexV6Address
    """
    input: addStarkexV6AddressInput!
  ): addStarkexV6AddressPayload

  """
  Add cards to the cart
  """
  addToCart(
    """
    Parameters for addToCart
    """
    input: addToCartInput!
  ): addToCartPayload

  """
  add a player to a watchlist
  """
  addToWatchlist(
    """
    Parameters for addToWatchlist
    """
    input: addToWatchlistInput!
  ): addToWatchlistPayload

  """
  Allows a user to add tokens to a deck
  """
  addTokensToDeck(
    """
    Parameters for addTokensToDeck
    """
    input: addTokensToDeckInput!
  ): addTokensToDeckPayload
  addWalletRecovery(
    """
    Parameters for addWalletRecovery
    """
    input: addWalletRecoveryInput!
  ): addWalletRecoveryPayload

  """
  Approve Migrator contract
  """
  approveMigrator(
    """
    Parameters for approveMigrator
    """
    input: approveMigratorInput!
  ): approveMigratorPayload

  """
  Bid on an auction
  """
  bid(
    """
    Parameters for bid
    """
    input: bidInput!
  ): bidPayload

  """
  Block another user from sending offers
  """
  blockUserOffers(
    """
    Parameters for blockUserOffers
    """
    input: blockUserOffersInput!
  ): blockUserOffersPayload

  """
  Buys a card pack
  """
  buyCardPack(
    """
    Parameters for buyCardPack
    """
    input: buyCardPackInput!
  ): buyCardPackPayload

  """
  Buy a shop item for a manager
  """
  buyDeliverableShopItem(
    """
    Parameters for buyDeliverableShopItem
    """
    input: buyDeliverableShopItemInput!
  ): buyDeliverableShopItemPayload

  """
  Buy a shop item for your club
  """
  buyShopItem(
    """
    Parameters for buyShopItem
    """
    input: buyShopItemInput!
  ): buyShopItemPayload
  cancelBaseWithdrawal(
    """
    Parameters for cancelBaseWithdrawal
    """
    input: cancelBaseWithdrawalInput!
  ): cancelBaseWithdrawalPayload
  cancelEthBankWithdrawals(
    """
    Parameters for cancelEthBankWithdrawals
    """
    input: cancelEthBankWithdrawalsInput!
  ): cancelEthBankWithdrawalsPayload
  cancelFastWithdrawal(
    """
    Parameters for cancelFastWithdrawal
    """
    input: cancelFastWithdrawalInput!
  ): cancelFastWithdrawalPayload

  """
  Cancel a mobile payment
  """
  cancelMobilePurchase(
    """
    Parameters for cancelMobilePurchase
    """
    input: cancelMobilePurchaseInput!
  ): cancelMobilePurchasePayload

  """
  Cancel an offer
  """
  cancelOffer(
    """
    Parameters for cancelOffer
    """
    input: cancelOfferInput!
  ): cancelOfferPayload
  cancelWithdrawal(
    """
    Parameters for cancelWithdrawal
    """
    input: cancelWithdrawalInput!
  ): cancelWithdrawalPayload

  """
  Allows a user to celebrate an activity
  """
  celebrateActivity(
    """
    Parameters for celebrateActivity
    """
    input: celebrateActivityInput!
  ): celebrateActivityPayload @deprecated(reason: "Not used anymore")
  changePassword(
    """
    Parameters for changePassword
    """
    input: changePasswordInput!
  ): changePasswordPayload

  """
  Check phone number verification code
  """
  checkPhoneNumberVerificationCode(
    """
    Parameters for checkPhoneNumberVerificationCode
    """
    input: checkPhoneNumberVerificationCodeInput!
  ): checkPhoneNumberVerificationCodePayload

  """
  Claim a reward
  """
  claimAnyReward(
    """
    Parameters for claimAnyReward
    """
    input: claimAnyRewardInput!
  ): claimAnyRewardPayload

  """
  Claim specific cards from a card pack
  """
  claimCardsFromPack(
    """
    Parameters for claimCardsFromPack
    """
    input: claimCardsFromPackInput!
  ): claimCardsFromPackPayload
  claimConversionCredit(
    """
    Parameters for claimConversionCredit
    """
    input: claimConversionCreditInput!
  ): claimConversionCreditPayload

  """
  Claim an deliverable item order
  """
  claimDeliverableItemOrder(
    """
    Parameters for claimDeliverableItemOrder
    """
    input: claimDeliverableItemOrderInput!
  ): claimDeliverableItemOrderPayload

  """
  Claim an football manager task
  """
  claimFootballManagerTask(
    """
    Parameters for claimFootballManagerTask
    """
    input: claimFootballManagerTaskInput!
  ): claimFootballManagerTaskPayload

  """
  Claim onboarding energy gift
  """
  claimOnboardingEnergyGift(
    """
    Parameters for claimOnboardingEnergyGift
    """
    input: claimOnboardingEnergyGiftInput!
  ): claimOnboardingEnergyGiftPayload

  """
  Claim the airdrop of a promotional event
  """
  claimPromotionalEventAirdrop(
    """
    Parameters for claimPromotionalEventAirdrop
    """
    input: claimPromotionalEventAirdropInput!
  ): claimPromotionalEventAirdropPayload

  """
  Claim a referral reward
  """
  claimReferralReward(
    """
    Parameters for claimReferralReward
    """
    input: claimReferralRewardInput!
  ): claimReferralRewardPayload

  """
  Claim a reward
  """
  claimReward(
    """
    Parameters for claimReward
    """
    input: claimRewardInput!
  ): claimRewardPayload

  """
  Claim rewards
  """
  claimRewards(
    """
    Parameters for claimRewards
    """
    input: claimRewardsInput!
  ): claimRewardsPayload

  """
  Claim starter pack of common cards during onboarding
  """
  claimStarterPack(
    """
    Parameters for claimStarterPack
    """
    input: claimStarterPackInput!
  ): claimStarterPackPayload

  """
  Claim a task
  """
  claimTask(
    """
    Parameters for claimTask
    """
    input: claimTaskInput!
  ): claimTaskPayload

  """
  Completes a drop challenge
  """
  completeDropChallenge(
    """
    Parameters for completeDropChallenge
    """
    input: completeDropChallengeInput!
  ): completeDropChallengePayload

  """
  Confirm the picked card from a card pull
  """
  confirmCardPull(
    """
    Parameters for confirmCardPull
    """
    input: confirmCardPullInput!
  ): confirmCardPullPayload

  """
  Confirm Device
  """
  confirmDevice(
    """
    Parameters for confirmDevice
    """
    input: confirmDeviceInput!
  ): ConfirmDeviceMutationPayload

  """
  Confirm Device With Code
  """
  confirmDeviceWithCode(
    """
    Parameters for confirmDeviceWithCode
    """
    input: confirmDeviceWithCodeInput!
  ): confirmDeviceWithCodePayload

  """
  Confirm Email address
  """
  confirmEmail(
    """
    Parameters for confirmEmail
    """
    input: confirmEmailInput!
  ): ConfirmEmailMutationPayload
  confirmSo5LineupImportsBatch(
    """
    Parameters for confirmSo5LineupImportsBatch
    """
    input: confirmSo5LineupImportsBatchInput!
  ): confirmSo5LineupImportsBatchPayload

  """
  Confirms user Lineups
  """
  confirmSo5Lineups(
    """
    Parameters for confirmSo5Lineups
    """
    input: confirmSo5LineupsInput!
  ): confirmSo5LineupsPayload

  """
  Confirm a So5NoCardLineup
  """
  confirmSo5NoCardLineup(
    """
    Parameters for confirmSo5NoCardLineup
    """
    input: confirmSo5NoCardLineupInput!
  ): confirmSo5NoCardLineupPayload

  """
  Consume your card booster
  """
  consumeCardBooster(
    """
    Parameters for consumeCardBooster
    """
    input: consumeCardBoosterInput!
  ): consumeCardBoosterPayload

  """
  Consume Ephemeral Token
  """
  consumeEphemeralToken(
    """
    Parameters for consumeEphemeralToken
    """
    input: consumeEphemeralTokenInput!
  ): ConsumeEphemeralTokenMutationPayload
  createBaseWithdrawal(
    """
    Parameters for createBaseWithdrawal
    """
    input: createBaseWithdrawalInput!
  ): createBaseWithdrawalPayload

  """
  Create a Mangopay credit card authorization
  """
  createCardAuthorization(
    """
    Parameters for createCardAuthorization
    """
    input: createCardAuthorizationInput!
  ): createCardAuthorizationPayload

  """
  Create a Mangopay Card Registration
  """
  createCardRegistration(
    """
    Parameters for createCardRegistration
    """
    input: createCardRegistrationInput!
  ): createCardRegistrationPayload

  """
  Withdraw a card to Ethereum
  """
  createCardWithdrawal(
    """
    Parameters for createCardWithdrawal
    """
    input: createCardWithdrawalInput!
  ): createCardWithdrawalPayload

  """
  Create connected tasks for a campaign
  """
  createConnectedTasks(
    """
    Parameters for createConnectedTasks
    """
    input: createConnectedTasksInput!
  ): createConnectedTasksPayload

  """
  Allows a user to create a deck.
  """
  createDeck(
    """
    Parameters for createDeck
    """
    input: createDeckInput!
  ): createDeckPayload

  """
  Create a dedicated bank account to enable user deposits
  """
  createDepositBankAccount(
    """
    Parameters for createDepositBankAccountMutation
    """
    input: createDepositBankAccountMutationInput!
  ): createDepositBankAccountMutationPayload

  """
  Send a Direct Offer to another manager
  """
  createDirectOffer(
    """
    Parameters for createDirectOffer
    """
    input: createDirectOfferInput!
  ): createDirectOfferPayload

  """
  Creates an ephemeral link
  """
  createEphemeralLink(
    """
    Parameters for createEphemeralLink
    """
    input: createEphemeralLinkInput!
  ): createEphemeralLinkPayload
  createEthBankWithdrawalIntent(
    """
    Parameters for createEthBankWithdrawalIntent
    """
    input: createEthBankWithdrawalIntentInput!
  ): createEthBankWithdrawalIntentPayload

  """
  Store user-initiated ETH deposits
  """
  createEthDeposit(
    """
    Parameters for createEthDeposit
    """
    input: createEthDepositInput!
  ): createEthDepositPayload

  """
  Creates an ETH migration
  """
  createEthMigration(
    """
    Parameters for createEthMigration
    """
    input: createEthMigrationInput!
  ): createEthMigrationPayload

  """
  Creates an eth vault
  """
  createEthVault(
    """
    Parameters for createEthVault
    """
    input: createEthVaultInput!
  ): createEthVaultPayload
  createFastWithdrawal(
    """
    Parameters for createFastWithdrawal
    """
    input: createFastWithdrawalInput!
  ): createFastWithdrawalPayload
  createFiatPayer(
    """
    Parameters for createFiatPayer
    """
    input: createFiatPayerInput!
  ): createFiatPayerPayload
  createFiatWallet(
    """
    Parameters for createFiatWallet
    """
    input: createFiatWalletInput!
  ): createFiatWalletPayload

  """
  Create a fiat withdrawal to a bank account
  """
  createFiatWithdrawal(
    """
    Parameters for createFiatWithdrawal
    """
    input: createFiatWithdrawalInput!
  ): createFiatWithdrawalPayload

  """
  create an identity verification session
  """
  createIdentityVerificationSession(
    """
    Parameters for createIdentityVerificationSession
    """
    input: createIdentityVerificationSessionInput!
  ): createIdentityVerificationSessionPayload

  """
  Creates a JWT token
  """
  createJwtToken(
    """
    Parameters for createJwtToken
    """
    input: createJwtTokenInput!
  ): createJwtTokenPayload

  """
  Create an onboarding user Lineup (first compose)
  """
  createOnboardingSo5Lineup(
    """
    Parameters for createOnboardingSo5Lineup
    """
    input: createOnboardingSo5LineupInput!
  ): createOnboardingSo5LineupPayload

  """
  Fix a minimum price for a card or token
  """
  createOrUpdateSingleBuyOfferMinPrice(
    """
    Parameters for createOrUpdateSingleBuyOfferMinPrice
    """
    input: createOrUpdateSingleBuyOfferMinPriceInput!
  ): createOrUpdateSingleBuyOfferMinPricePayload

  """
  Create or update a user Lineup
  """
  createOrUpdateSo5Lineup(
    """
    Parameters for createOrUpdateSo5Lineup
    """
    input: createOrUpdateSo5LineupInput!
  ): CreateOrUpdateSo5LineupMutationPayload

  """
  Create a new passkey
  """
  createPasskey(
    """
    Parameters for createPasskey
    """
    input: createPasskeyInput!
  ): createPasskeyPayload

  """
  Sell a single card for a fixed price
  """
  createSingleSaleOffer(
    """
    Parameters for createSingleSaleOffer
    """
    input: createSingleSaleOfferInput!
  ): createSingleSaleOfferPayload
  createSo5LineupImportsBatch(
    """
    Parameters for createSo5LineupImportsBatch
    """
    input: createSo5LineupImportsBatchInput!
  ): createSo5LineupImportsBatchPayload

  """
  Create a User Group
  """
  createSo5UserGroup(
    """
    Parameters for createSo5UserGroup
    """
    input: createSo5UserGroupInput!
  ): createSo5UserGroupPayload

  """
  Add Cards, Players, Clubs, Competitions, Countries, Users, Watchlists or CardCollection as favourites
  """
  createSubscription(
    """
    Parameters for createSubscription
    """
    input: createSubscriptionInput!
  ): createSubscriptionPayload
  createWallet(
    """
    Parameters for createWallet
    """
    input: createWalletInput!
  ): createWalletPayload

  """
  Deposit funds to a Cash wallet with a wire transfer
  """
  createWireTransferDeposit(
    """
    Parameters for createWireTransferDeposit
    """
    input: createWireTransferDepositInput!
  ): createWireTransferDepositPayload
  createWithdrawal(
    """
    Parameters for createWithdrawal
    """
    input: createWithdrawalInput!
  ): createWithdrawalPayload

  """
  Create a bank account to withdraw to
  """
  createWithdrawalBankAccount(
    """
    Parameters for createWithdrawalBankAccount
    """
    input: createWithdrawalBankAccountInput!
  ): createWithdrawalBankAccountPayload
  deactivateWalletRecovery(
    """
    Parameters for deactivateWalletRecovery
    """
    input: deactivateWalletRecoveryInput!
  ): deactivateWalletRecoveryPayload
  declineSo5LineupImportsBatch(
    """
    Parameters for declineSo5LineupImportsBatch
    """
    input: declineSo5LineupImportsBatchInput!
  ): declineSo5LineupImportsBatchPayload

  """
  Decline a So5NoCardLineup
  """
  declineSo5NoCardLineup(
    """
    Parameters for declineSo5NoCardLineup
    """
    input: declineSo5NoCardLineupInput!
  ): declineSo5NoCardLineupPayload

  """
  Allows a user to delete a deck.
  """
  deleteDeck(
    """
    Parameters for deleteDeck
    """
    input: deleteDeckInput!
  ): deleteDeckPayload

  """
  Delete a passkey
  """
  deletePasskey(
    """
    Parameters for deletePasskey
    """
    input: deletePasskeyInput!
  ): deletePasskeyPayload

  """
  Delete postal address
  """
  deletePostalAddress(
    """
    Parameters for deletePostalAddress
    """
    input: deletePostalAddressInput!
  ): deletePostalAddressPayload

  """
  Deletes a user Lineup
  """
  deleteSo5Lineup(
    """
    Parameters for deleteSo5Lineup
    """
    input: deleteSo5LineupInput!
  ): deleteSo5LineupPayload

  """
  Delete a User Group
  """
  deleteSo5UserGroup(
    """
    Parameters for deleteSo5UserGroup
    """
    input: deleteSo5UserGroupInput!
  ): deleteSo5UserGroupPayload

  """
  Delete a subscription to new auctions on a Card, a Player, a Club, a Watchlist or a Country
  """
  deleteSubscription(
    """
    Parameters for deleteSubscription
    """
    input: deleteSubscriptionInput!
  ): deleteSubscriptionPayload

  """
  Delete a withdrawal bank account
  """
  deleteWithdrawalBankAccount(
    """
    Parameters for deleteWithdrawalBankAccount
    """
    input: deleteWithdrawalBankAccountInput!
  ): deleteWithdrawalBankAccountPayload

  """
  Deposit to a Cash wallet through ApplePay
  """
  depositWithApplePay(
    """
    Parameters for depositWithApplePay
    """
    input: depositWithApplePayInput!
  ): depositWithApplePayPayload

  """
  Destroy my Sorare account
  """
  destroyAccount(
    """
    Parameters for destroyAccount
    """
    input: destroyAccountInput!
  ): destroyAccountPayload

  """
  Destroy an expired referral
  """
  destroyReferral(
    """
    Parameters for destroyReferral
    """
    input: destroyReferralInput!
  ): destroyReferralPayload

  """
  Destroys a watchlist
  """
  destroyWatchlist(
    """
    Parameters for destroyWatchlist
    """
    input: destroyWatchlistInput!
  ): destroyWatchlistPayload
  detachPaymentMethod(
    """
    Parameters for detachPaymentMethod
    """
    input: detachPaymentMethodInput!
  ): detachPaymentMethodPayload

  """
  Disable 2FA requirement for login
  """
  disable2Fa(
    """
    Parameters for disable2fa
    """
    input: disable2faInput!
  ): disable2faPayload

  """
  Disconnect from a social auth
  """
  disconnectOmniauthProvider(
    """
    Parameters for disconnectOmniauthProvider
    """
    input: disconnectOmniauthProviderInput!
  ): disconnectOmniauthProviderPayload

  """
  Drop and add cards to the user collection
  """
  dropAndAddCards(
    """
    Parameters for dropAndAddCards
    """
    input: dropAndAddCardsInput!
  ): dropAndAddCardsPayload

  """
  Allows a user to edit a deck.
  """
  editDeck(
    """
    Parameters for editDeck
    """
    input: editDeckInput!
  ): editDeckPayload

  """
  Enable 2FA requirement for login
  """
  enable2Fa(
    """
    Parameters for enable2fa
    """
    input: enable2faInput!
  ): enable2faPayload

  """
  Enroll for Strong Customer Authentication (SCA)
  """
  enrollSCA(
    """
    Parameters for enrollSCA
    """
    input: enrollSCAInput!
  ): enrollSCAPayload

  """
  Fetch encrypted private key
  """
  fetchEncryptedPrivateKey(
    """
    Parameters for fetchEncryptedPrivateKey
    """
    input: fetchEncryptedPrivateKeyInput!
  ): fetchEncryptedPrivateKeyPayload

  """
  Swap players at half time
  """
  footballRivalsAppearanceSubstitute(
    """
    Parameters for footballRivalsAppearanceSubstitute
    """
    input: footballRivalsAppearanceSubstituteInput!
  ): footballRivalsAppearanceSubstitutePayload @deprecated(reason: "Not used anymore")

  """
  Create an Arena Request
  """
  footballRivalsArenaRequestCreate(
    """
    Parameters for footballRivalsArenaRequestCreate
    """
    input: footballRivalsArenaRequestCreateInput!
  ): footballRivalsArenaRequestCreatePayload @deprecated(reason: "Not used anymore")

  """
  Send a nudge
  """
  footballRivalsGameSendNudge(
    """
    Parameters for footballRivalsGameSendNudge
    """
    input: footballRivalsGameSendNudgeInput!
  ): footballRivalsGameSendNudgePayload @deprecated(reason: "Not used anymore")

  """
  Create or update lineup
  """
  footballRivalsLineupUpsert(
    """
    Parameters for footballRivalsLineupUpsert
    """
    input: footballRivalsLineupUpsertInput!
  ): footballRivalsLineupUpsertPayload @deprecated(reason: "Not used anymore")

  """
  Allows a user to configure a reminder on a Rivals game
  """
  footballRivalsRemindGame(
    """
    Parameters for footballRivalsRemindGame
    """
    input: footballRivalsRemindGameInput!
  ): footballRivalsRemindGamePayload @deprecated(reason: "Not used anymore")

  """
  Update favorite team
  """
  footballRivalsUpdateFavoriteTeam(
    """
    Parameters for footballRivalsUpdateFavoriteTeam
    """
    input: footballRivalsUpdateFavoriteTeamInput!
  ): footballRivalsUpdateFavoriteTeamPayload @deprecated(reason: "Not used anymore")

  """
  Request a CSV accounting extract by email
  """
  generateAccountingExtract(
    """
    Parameters for generateAccountingExtract
    """
    input: generateAccountingExtractInput!
  ): generateAccountingExtractPayload

  """
  Generate OTP backup codes
  """
  generateOtpBackupCodes(
    """
    Parameters for generateOtpBackupCodes
    """
    input: generateOtpBackupCodesInput!
  ): generateOtpBackupCodesPayload

  """
  Generate OTP provisioning URI
  """
  generateOtpProvisioningUri(
    """
    Parameters for generateOtpProvisioningUri
    """
    input: generateOtpProvisioningUriInput!
  ): generateOtpProvisioningUriPayload

  """
  Generate a passkey challenge for adding a new passkey
  """
  generatePasskeyChallengeForCreate(
    """
    Parameters for generatePasskeyChallengeForCreate
    """
    input: generatePasskeyChallengeForCreateInput!
  ): generatePasskeyChallengeForCreatePayload

  """
  Generate a passkey challenge for signing in
  """
  generatePasskeyChallengeForSignIn(
    """
    Parameters for generatePasskeyChallengeForSignIn
    """
    input: generatePasskeyChallengeForSignInInput!
  ): generatePasskeyChallengeForSignInPayload

  """
  Create a So5NoCardLineup
  """
  generateSo5NoCardLineup(
    """
    Parameters for generateSo5NoCardLineup
    """
    input: generateSo5NoCardLineupInput!
  ): generateSo5NoCardLineupPayload

  """
  Hide my featured so5 leaderboard group
  """
  hideMyFeaturedSo5LeaderboardGroup(
    """
    Parameters for hideMyFeaturedSo5LeaderboardGroup
    """
    input: hideMyFeaturedSo5LeaderboardGroupInput!
  ): hideMyFeaturedSo5LeaderboardGroupPayload

  """
  Join a User Group
  """
  joinSo5UserGroup(
    """
    Parameters for joinSo5UserGroup
    """
    input: joinSo5UserGroupInput!
  ): joinSo5UserGroupPayload

  """
  Level up a card with user xp currency
  """
  levelUpCardWithXpCurrency(
    """
    Parameters for levelUpCardWithXpCurrency
    """
    input: levelUpCardWithXpCurrencyInput!
  ): levelUpCardWithXpCurrencyPayload

  """
  Level up a bench of cards with user xp currency
  """
  levelUpCardsWithXpCurrency(
    """
    Parameters for levelUpCardsWithXpCurrency
    """
    input: levelUpCardsWithXpCurrencyInput!
  ): levelUpCardsWithXpCurrencyPayload

  """
  Link an Ethereum address to your Sorare account
  """
  linkEthereumAddress(
    """
    Parameters for linkEthereumAddress
    """
    input: linkEthereumAddressInput!
  ): linkEthereumAddressPayload

  """
  load a previous lineup for a manager team
  """
  loadPreviousLineup(
    """
    Parameters for loadPreviousLineup
    """
    input: loadPreviousLineupInput!
  ): loadPreviousLineupPayload

  """
  load a suggested lineup
  """
  loadSuggestedLineup(
    """
    Parameters for loadSuggestedLineup
    """
    input: loadSuggestedLineupInput!
  ): loadSuggestedLineupPayload

  """
  Locks the Pro Mode
  """
  lockProMode(
    """
    Parameters for lockProMode
    """
    input: lockProModeInput!
  ): lockProModePayload

  """
  Mark a card shards chest unlocked threshold as seen
  """
  markCardShardsChestUnlockedThresholdAsSeen(
    """
    Parameters for markCardShardsChestUnlockedThresholdAsSeen
    """
    input: markCardShardsChestUnlockedThresholdAsSeenInput!
  ): markCardShardsChestUnlockedThresholdAsSeenPayload

  """
  See for the first time a new unlocked shield shop item
  """
  markItemAsSeen(
    """
    Parameters for markItemAsSeen
    """
    input: markItemAsSeenInput!
  ): markItemAsSeenPayload

  """
  Mark notifications as read
  """
  markNotificationsAsRead(
    """
    Parameters for markNotificationsAsRead
    """
    input: markNotificationsAsReadInput!
  ): markNotificationsAsReadPayload

  """
  Mark stories as read
  """
  markStoriesAsRead(
    """
    Parameters for markStoriesAsRead
    """
    input: markStoriesAsReadInput!
  ): markStoriesAsReadPayload
  migrateEth(
    """
    Parameters for migrateEth
    """
    input: migrateEthInput!
  ): migrateEthPayload

  """
  Pick a card from a set of pulled cards
  """
  pickPulledCard(
    """
    Parameters for pickPulledCard
    """
    input: pickPulledCardInput!
  ): pickPulledCardPayload

  """
  Get the limit orders that need to be signed in order to accept an offer
  """
  prepareAcceptOffer(
    """
    Parameters for prepareAcceptOffer
    """
    input: prepareAcceptOfferInput!
  ): prepareAcceptOfferPayload

  """
  forwards the wallet approvals as part of the wallet + credit card payment flow
  """
  prepareAcceptTradeWithWalletAndCreditCard(
    """
    Parameters for prepareAcceptTradeWithWalletAndCreditCard
    """
    input: prepareAcceptTradeWithWalletAndCreditCardInput!
  ): prepareAcceptTradeWithWalletAndCreditCardPayload
  prepareBaseWithdrawal(
    """
    Parameters for prepareBaseWithdrawal
    """
    input: prepareBaseWithdrawalInput!
  ): prepareBaseWithdrawalPayload

  """
  Get the authorizations that need to be signed in order to bid on an english auction
  """
  prepareBid(
    """
    Parameters for prepareBid
    """
    input: prepareBidInput!
  ): prepareBidPayload

  """
  Prepare a Payment Intent for a InGameCurrencyPack purchase with a Credit Card
  """
  prepareBuyInGameCurrencyPackWithCreditCard(
    """
    Parameters for prepareBuyInGameCurrencyPackWithCreditCard
    """
    input: prepareBuyInGameCurrencyPackWithCreditCardInput!
  ): prepareBuyInGameCurrencyPackWithCreditCardPayload

  """
  Get transfer request that needs to be signed in order to withdraw a card
  """
  prepareCardWithdrawal(
    """
    Parameters for prepareCardWithdrawal
    """
    input: prepareCardWithdrawalInput!
  ): prepareCardWithdrawalPayload

  """
  Authorize a deposit to fund a Cash wallet with a credit card
  """
  prepareDeposit(
    """
    Parameters for prepareDeposit
    """
    input: prepareDepositInput!
  ): prepareDepositPayload

  """
  Get the payload to make an ETH deposit
  """
  prepareEthDeposit(
    """
    Parameters for prepareEthDeposit
    """
    input: prepareEthDepositInput!
  ): prepareEthDepositPayload
  prepareFastWithdrawal(
    """
    Parameters for prepareFastWithdrawal
    """
    input: prepareFastWithdrawalInput!
  ): prepareFastWithdrawalPayload

  """
  Initiate a deposit to a Cash wallet through Ideal
  """
  prepareIdealDeposit(
    """
    Parameters for prepareIdealDeposit
    """
    input: prepareIdealDepositInput!
  ): prepareIdealDepositPayload
  prepareMigrateEth(
    """
    Parameters for prepareMigrateEth
    """
    input: prepareMigrateEthInput!
  ): prepareMigrateEthPayload

  """
  Get the limit orders that need to be signed in order to be able to create an offer
  """
  prepareOffer(
    """
    Parameters for prepareOffer
    """
    input: prepareOfferInput!
  ): prepareOfferPayload

  """
  Initiate a deposit to a Cash wallet through Paypal
  """
  preparePaypalDeposit(
    """
    Parameters for preparePaypalDeposit
    """
    input: preparePaypalDepositInput!
  ): preparePaypalDepositPayload

  """
  Get the payload to deposit an NFT into Layer 2
  """
  prepareTokenDeposit(
    """
    Parameters for prepareTokenDeposit
    """
    input: prepareTokenDepositInput!
  ): prepareTokenDepositPayload

  """
  Open a probabilistic bundle
  """
  probabilisticBundlesOpen(
    """
    Parameters for probabilisticBundlesOpen
    """
    input: probabilisticBundlesOpenInput!
  ): probabilisticBundlesOpenPayload

  """
  Spend essences to pull a set of cards to pick from
  """
  pullCards(
    """
    Parameters for pullCards
    """
    input: pullCardsInput!
  ): pullCardsPayload

  """
  Allows a user to react to an activity
  """
  reactActivity(
    """
    Parameters for reactActivity
    """
    input: reactActivityInput!
  ): reactActivityPayload @deprecated(reason: "Not used anymore")

  """
  Refresh the cart
  """
  refreshCart(
    """
    Parameters for refreshCart
    """
    input: refreshCartInput!
  ): refreshCartPayload

  """
  Reject the picked card from a card pull and receive back part of the spent essence
  """
  rejectCardPull(
    """
    Parameters for rejectCardPull
    """
    input: rejectCardPullInput!
  ): rejectCardPullPayload

  """
  Reject an Offer
  """
  rejectOffer(
    """
    Parameters for rejectOffer
    """
    input: rejectOfferInput!
  ): rejectOfferPayload
  relayCall(
    """
    Parameters for relayCall
    """
    input: relayCallInput!
  ): relayCallPayload

  """
  Allows a user to remove a reminder on an auction
  """
  removeAuctionReminder(
    """
    Parameters for removeAuctionReminder
    """
    input: removeAuctionReminderInput!
  ): removeAuctionReminderPayload

  """
  Remove cart items from the cart
  """
  removeFromCart(
    """
    Parameters for removeFromCart
    """
    input: removeFromCartInput!
  ): removeFromCartPayload

  """
  remove a player from a watchlist
  """
  removeFromWatchlist(
    """
    Parameters for removeFromWatchlist
    """
    input: removeFromWatchlistInput!
  ): removeFromWatchlistPayload

  """
  Allows a user to remove a token from a deck.
  """
  removeTokenFromDeck(
    """
    Parameters for removeTokenFromDeck
    """
    input: removeTokenFromDeckInput!
  ): removeTokenFromDeckPayload

  """
  Remove a User from a User Group
  """
  removeUserFromSo5UserGroup(
    """
    Parameters for removeUserFromSo5UserGroup
    """
    input: removeUserFromSo5UserGroupInput!
  ): removeUserFromSo5UserGroupPayload

  """
  For web and mobile clients to report metrics
  """
  reportTelemetry(
    """
    Parameters for reportTelemetry
    """
    input: reportTelemetryInput!
  ): reportTelemetryPayload

  """
  Request a So5NoCard draftable appearance
  """
  requestSo5NoCardDraftableAppearance(
    """
    Parameters for requestSo5NoCardDraftableAppearance
    """
    input: requestSo5NoCardDraftableAppearanceInput!
  ): requestSo5NoCardDraftableAppearancePayload

  """
  Request to choose another leaderboard for a So5NoCardLineup
  """
  requestSo5NoCardLineupEligibleLeaderboards(
    """
    Parameters for requestSo5NoCardLineupEligibleLeaderboards
    """
    input: requestSo5NoCardLineupEligibleLeaderboardsInput!
  ): requestSo5NoCardLineupEligibleLeaderboardsPayload
  resendConfirmationInstructions(
    """
    Parameters for resendConfirmationInstructions
    """
    input: resendConfirmationInstructionsInput!
  ): resendConfirmationInstructionsPayload
  resendVerificationCode(
    """
    Parameters for resendVerificationCode
    """
    input: resendVerificationCodeInput!
  ): resendVerificationCodePayload
  resetPrivateKey(
    """
    Parameters for resetPrivateKey
    """
    input: resetPrivateKeyInput!
  ): resetPrivateKeyPayload

  """
  Reset drafted appearances for a So5NoCardLineup
  """
  resetSo5NoCardDraftedAppearances(
    """
    Parameters for resetSo5NoCardDraftedAppearances
    """
    input: resetSo5NoCardDraftedAppearancesInput!
  ): resetSo5NoCardDraftedAppearancesPayload
  restoreWallet(
    """
    Parameters for restoreWallet
    """
    input: restoreWalletInput!
  ): restoreWalletPayload

  """
  Reveal blueprint cards
  """
  revealBlueprints(
    """
    Parameters for revealBlueprints
    """
    input: revealBlueprintsInput!
  ): revealBlueprintsPayload

  """
  Reveal a property on all pulled cards
  """
  revealProperty(
    """
    Parameters for revealProperty
    """
    input: revealPropertyInput!
  ): revealPropertyPayload

  """
  Revoke Device
  """
  revokeDevice(
    """
    Parameters for revokeDevice
    """
    input: revokeDeviceInput!
  ): revokeDevicePayload

  """
  Revokes the specified token
  """
  revokeOAuthAccessToken(
    """
    Parameters for revokeOAuthAccessToken
    """
    input: revokeOAuthAccessTokenInput!
  ): revokeOAuthAccessTokenPayload

  """
  Revokes all tokens for specified application_id
  """
  revokeOAuthAccessTokenForApplication(
    """
    Parameters for revokeOAuthAccessTokenForApplication
    """
    input: revokeOAuthAccessTokenForApplicationInput!
  ): revokeOAuthAccessTokenForApplicationPayload

  """
  Save a cart item for later in cart
  """
  saveForLater(
    """
    Parameters for saveForLater
    """
    input: saveForLaterInput!
  ): saveForLaterPayload
  sealCards(
    """
    Parameters for sealCards
    """
    input: sealCardsInput!
  ): sealCardsPayload
  sendWalletRecovery(
    """
    Parameters for sendWalletRecovery
    """
    input: sendWalletRecoveryInput!
  ): sendWalletRecoveryPayload

  """
  Add or update the given device token for push notifications
  """
  setDeviceToken(
    """
    Parameters for setDeviceToken
    """
    input: setDeviceTokenInput!
  ): setDeviceTokenPayload

  """
  Update a token trade status
  """
  setTokenTradeStatus(
    """
    Parameters for setTokenTradeStatus
    """
    input: setTokenTradeStatusInput!
  ): setTokenTradeStatusPayload

  """
  Sign in
  """
  signIn(
    """
    Parameters for signIn
    """
    input: signInInput!
  ): SignInMutationPayload

  """
  Sign in with OAuth
  """
  signInWithOauth(
    """
    Parameters for signInWithOAuth
    """
    input: signInWithOAuthInput!
  ): SignInWithOAuthMutationPayload

  """
  Sign out from all sessions except the current one
  """
  signOutFromAllDevices(
    """
    Parameters for signOutFromAllDevices
    """
    input: signOutFromAllDevicesInput!
  ): signOutFromAllDevicesPayload

  """
  Sign up
  """
  signUp(
    """
    Parameters for signUp
    """
    input: signUpInput!
  ): SignUpMutationPayload

  """
  Skips the onboarding
  """
  skipOnboarding(
    """
    Parameters for skipOnboarding
    """
    input: skipOnboardingInput!
  ): skipOnboardingPayload

  """
  Spend a chest of card shards
  """
  spendCardShardsChest(
    """
    Parameters for spendCardShardsChest
    """
    input: spendCardShardsChestInput!
  ): spendCardShardsChestPayload
  spinWheel(
    """
    Parameters for spinWheel
    """
    input: spinWheelInput!
  ): spinWheelPayload

  """
  Stop current auto bid on an auction
  """
  stopAutoBid(
    """
    Parameters for stopAutoBid
    """
    input: stopAutoBidInput!
  ): stopAutoBidPayload

  """
  Store an Apple purchase token for the current user
  """
  storeApplePurchaseToken(
    """
    Parameters for storeApplePurchaseToken
    """
    input: storeApplePurchaseTokenInput!
  ): storeApplePurchaseTokenPayload

  """
  suggest a lineup
  """
  suggestLineup(
    """
    Parameters for suggestLineup
    """
    input: suggestLineupInput!
  ): suggestLineupPayload

  """
  Unblock email
  """
  unblockEmail(
    """
    Parameters for UnblockEmail
    """
    input: UnblockEmailInput!
  ): UnblockEmailPayload
  unblockFiatWallet(
    """
    Parameters for unblockFiatWallet
    """
    input: unblockFiatWalletInput!
  ): unblockFiatWalletPayload

  """
  Unblock another user from sending offers
  """
  unblockUserOffers(
    """
    Parameters for unblockUserOffers
    """
    input: unblockUserOffersInput!
  ): unblockUserOffersPayload

  """
  Unlocks the Pro Mode
  """
  unlockProMode(
    """
    Parameters for unlockProMode
    """
    input: unlockProModeInput!
  ): unlockProModePayload
  unsealCards(
    """
    Parameters for unsealCards
    """
    input: unsealCardsInput!
  ): unsealCardsPayload

  """
  Set filters for the current user
  """
  updateCardFilters(
    """
    Parameters for updateCardFilters
    """
    input: updateCardFiltersInput!
  ): updateCardFiltersPayload

  """
  Set an external deposit ETH transaction hash
  """
  updateExternalEthDeposit(
    """
    Parameters for updateExternalEthDeposit
    """
    input: updateExternalEthDepositInput!
  ): updateExternalEthDepositPayload

  """
  Set favorite team of the current user
  """
  updateFavoriteTeam(
    """
    Parameters for updateFavoriteTeam
    """
    input: updateFavoriteTeamInput!
  ): updateFavoriteTeamPayload
  updateFiatWallet(
    """
    Parameters for updateFiatWallet
    """
    input: updateFiatWalletInput!
  ): updateFiatWalletPayload

  """
  Update the highlightedCard in a collection
  """
  updateHighlightedCard(
    """
    Parameters for updateHighlightedCard
    """
    input: updateHighlightedCardInput!
  ): updateHighlightedCardPayload

  """
  Update a manager team
  """
  updateManagerTeam(
    """
    Parameters for updateManagerTeam
    """
    input: updateManagerTeamInput!
  ): updateManagerTeamPayload
  updateOnboardingSo5Leaderboard(
    """
    Parameters for updateOnboardingSo5Leaderboard
    """
    input: updateOnboardingSo5LeaderboardInput!
  ): updateOnboardingSo5LeaderboardPayload

  """
  Update partner offers agreement
  """
  updatePartnerOffersAgreement(
    """
    Parameters for updatePartnerOffersAgreement
    """
    input: updatePartnerOffersAgreementInput!
  ): updatePartnerOffersAgreementPayload

  """
  Update user notification preferences for a section
  """
  updateSectionNotificationPreferences(
    """
    Parameters for updateSectionNotificationPreferences
    """
    input: updateSectionNotificationPreferencesInput!
  ): updateSectionNotificationPreferencesPayload

  """
  Update a User Group
  """
  updateSo5UserGroup(
    """
    Parameters for updateSo5UserGroup
    """
    input: updateSo5UserGroupInput!
  ): updateSo5UserGroupPayload

  """
  Set club name, banner, and shield for the current user
  """
  updateSportProfile(
    """
    Parameters for updateSportProfile
    """
    input: updateSportProfileInput!
  ): updateSportProfilePayload

  """
  Update a subscription notification preferences
  """
  updateSubscription(
    """
    Parameters for updateSubscription
    """
    input: updateSubscriptionInput!
  ): updateSubscriptionPayload

  """
  Update user email
  """
  updateUserEmail(
    """
    Parameters for updateUserEmail
    """
    input: updateUserEmailInput!
  ): updateUserEmailPayload

  """
  Update user profile
  """
  updateUserProfile(
    """
    Parameters for updateUserProfile
    """
    input: updateUserProfileInput!
  ): updateUserProfilePayload

  """
  Update user settings
  """
  updateUserSettings(
    """
    Parameters for updateUserSettings
    """
    input: updateUserSettingsInput!
  ): updateUserSettingsPayload

  """
  Upsert appearances for a task
  """
  upsertTaskAppearances(
    """
    Parameters for upsertTaskAppearances
    """
    input: upsertTaskAppearancesInput!
  ): upsertTaskAppearancesPayload

  """
  Creates or updates a watchlist
  """
  upsertWatchlist(
    """
    Parameters for upsertWatchlist
    """
    input: upsertWatchlistInput!
  ): upsertWatchlistPayload

  """
  Validate an ApplePay merchant session prior to payment process
  """
  validateApplePayMerchantSession(
    """
    Parameters for validateApplePayMerchantSession
    """
    input: validateApplePayMerchantSessionInput!
  ): validateApplePayMerchantSessionPayload
  validateFiatWallet(
    """
    Parameters for validateFiatWallet
    """
    input: validateFiatWalletInput!
  ): validateFiatWalletPayload

  """
  Verify a purchase of an InGameCurrencyPack done through IAP
  """
  verifyInGameCurrencyPackMobilePurchase(
    """
    Parameters for verifyInGameCurrencyPackMobilePurchase
    """
    input: verifyInGameCurrencyPackMobilePurchaseInput!
  ): verifyInGameCurrencyPackMobilePurchasePayload

  """
  Verify a purchase done through IAP
  """
  verifyMobilePurchase(
    """
    Parameters for verifyMobilePurchase
    """
    input: verifyMobilePurchaseInput!
  ): verifyMobilePurchasePayload

  """
  Verify phone number
  """
  verifyPhoneNumber(
    """
    Parameters for verifyPhoneNumber
    """
    input: verifyPhoneNumberInput!
  ): verifyPhoneNumberPayload

  """
  Track when a campaign page is visited
  """
  visitCampaignPage(
    """
    Parameters for visitCampaignPage
    """
    input: visitCampaignPageInput!
  ): visitCampaignPagePayload
}

"""
A NBA card
"""
type NBACard implements AnyCardInterface & Node & WithSubscriptionsInterface {
  activeSuspensions(so5LeaderboardSlug: String!): [Suspension!]!
  activeTaskAppearances: [TaskAppearanceInterface!]!
  anyPlayer: AnyPlayerInterface!
  anyPositions: [Position!]!
  anyTeam: TeamInterface!
  assetId: ID!
  availableCardBoosts: [CardBoost!]!
  averageScore(type: AveragePlayerScore!): Float
  backPictureUrl: String!
  basketballPlayer: NBAPlayer!
  blueprint: Blueprint
  bonuses(so5LeaderboardSlug: String): [So5AppearanceBonusInterface!]!
  bonusesAfterTransfer(so5LeaderboardSlug: String): [So5AppearanceBonusInterface!]!
  borderRadius: Int!
  cardCollectionCards: [CardCollectionCard!]!
  cardEditionName: String
  cardPrice: Int
  cardStats: CardStats
  collection: Collection
  collectionIncreaseScoreBreakdownAfterTransfer: CardCollectionCardScoreBreakdown
  collectionScoringMatrix: [CardCollectionScoringMatrix!]!
  concurrentSo5Lineups(so5FixtureSlug: String, so5LeaderboardSlug: String): [So5Lineup!]!
  contractAddress: EthereumAddress
  currentUserSubscription: EmailSubscription
  decks: [Deck!]!
  delayedReveal: Boolean
  displayRarity: String!
  dropRank: Int
  eligiblePlayerGameScores(so5LeaderboardSlug: String): [PlayerGameScoreInterface!]!
  eligibleUpcomingLeagueTracks: [So5LeagueTrack!]!
  ethereumId: String!
  ethereumOwner: TokenOwner
  formattedCardEditionName: String

  """
  Current card level
  """
  grade: Int!
  gradeAfterTransfer: Int!
  id: ID!
  inSeasonEligible: Boolean!
  inSeasonUntil: ISO8601DateTime
  ipfsPictureUrl: String
  ipfsUrl: String
  lastLeveledUpAt: ISO8601DateTime
  latestEnglishAuction: TokenAuction
  latestPrimaryOffer: TokenPrimaryOffer
  levelUpAppliedCount: Int!
  liveSingleBuyOffers: [TokenOffer!]!
  liveSingleSaleOffer: TokenOffer

  """
  So5Lineup that this card is being used in for the live So5Fixture
  """
  liveSo5Lineup: So5Lineup
  loanedToken: LoanedToken

  """
  Returns the lowest price card of the same player, rarity and season
  """
  lowestPriceCard: AnyCardInterface

  """
  Returns the lowest price card of the same player and rarity
  """
  lowestPriceCardAnySeason: AnyCardInterface
  maxLevelUpAppliedCount: Int!
  myMintedSingleSaleOffer: TokenOffer
  name: String!
  nextLevelUpAvailableAt: ISO8601DateTime

  """
  So5Lineups that this card is being used in for the opened So5Fixtures
  """
  openedSo5Lineups: [So5Lineup!]!
  ownerSince: ISO8601DateTime
  ownershipHistory: [TokenOwner!]!
  pendingWithdrawal: TokenWithdrawal
  pictureUrl(derivative: String = "tinified"): String
  playerLoyaltyBoost: RewardBoost!

  """
  Total card bonus (XP + Season bonus)
  """
  power(so5LeaderboardSlug: String = null): String!

  """
  Total card bonus after transfer
  """
  powerAfterTransfer(so5LeaderboardSlug: String = null): String!
  powerBreakdown(so5LeaderboardSlug: String = null): PowerBreakdown!
  powerMalusAfterTransfer: String!
  previouslyOwnedCard: Boolean
  priceRange: Range
  privateMinPrices: MonetaryAmount
  publicMinPrices: MonetaryAmount
  rarityTyped: Rarity!
  revealableCardCampaign: RevealableCardCampaign
  sealable: Boolean!
  sealableFor: Int
  sealed: Boolean!
  sealedAt: ISO8601DateTime
  sealedFor: Int
  sealedPlayerLoyaltyBoost: RewardBoost!
  seasonYear: Int!
  secondaryMarketFeeEnabled: Boolean!

  """
  Returns all live or minted offers where this token is included in the sender
  side. Returns only if authenticated and sender of the offers.
  """
  sentInLiveOffers: [TokenOffer!]
  serialNumber: Int!
  signedAddCardPrice: SignedCardPrice
  signedDropCardPrice: SignedCardPrice
  singleCivilYear: Boolean!
  slug: String!
  specialEdition: String
  sport: Sport!
  sportSeason: SportSeason!
  subscriptionsCount: Int!
  supply: Int!
  threeDimensional: Boolean!
  threeDimensionalAsset: ThreeDimensionalAsset
  tokenOwner: TokenOwner
  tradeableStatus: Tradeable!
  unsealableAt: ISO8601DateTime
  unsealedAt: ISO8601DateTime
  unsealedPlayerLoyaltyBoost: RewardBoost!
  user: User
  videoUrl(derivative: String = null): String
  walletStatus: WalletStatus!
  xp: Int!
  xpAfterTransfer: Int!

  """
  XP start range of current card level
  """
  xpNeededForCurrentGrade: Int!

  """
  XP end range of current card level
  """
  xpNeededForNextGrade: Int
}

"""
A NBA player
"""
type NBAPlayer implements AnyPlayerInterface & WithSubscriptionsInterface {
  abbreviatedName: String!
  activeClub: Club
  activeClubMembership: Membership
  activeInjuries: [Injury!]!
  activeNationalTeam: NationalTeam
  activeSuspensions: [Suspension!]!
  age: Int!
  allAverageStats(limit: AverageLimit = LAST_10): [BasketballAverageStatWithValueType!]!

  """
  All player So5Scores ordered by descending game date
  """
  allPlayerGameScores(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int
    from: ISO8601DateTime

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    position: Position
    to: ISO8601DateTime
  ): PlayerGameScoreInterfaceConnection!
  allTotalStats: [BasketballAverageStatWithValueType!]!
  anyCardWithLivePrimaryOffer(rarity: Rarity): AnyCardInterface

  """
  The `any_cards` field cannot be nested within a list.
  """
  anyCards(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String
    age: Int
    assetIds: [String!]

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    classicOnly: Boolean
    customCardEditionName: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int
    inActiveCompetitions: [String!]
    inOrderOfRarities: Boolean @deprecated(reason: "Use `sorts` instead")
    inSeasonEligible: Boolean

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    owned: Boolean
    ownedByMe: Boolean
    ownedSinceAfter: ISO8601DateTime
    playerSlugs: [String!]

    """
    positions of the card capitalized
    """
    positions: [Position!]

    """
    rarities of the card in lowercase
    """
    rarities: [Rarity!]
    recentlyOwnedFirst: Boolean @deprecated(reason: "Use `sorts` instead")
    revealable: Boolean
    revealableFirst: Boolean @deprecated(reason: "Use `sorts` instead")
    seasonStartYears: [Int!]
    serialNumber: Int
    shirtNumber: Int
    slugs: [String!]
    sorts: [CardSort!]
    sport: Sport
    teamSlugs: [String!]
    withinDeckFirst: String
  ): AnyCardInterfaceConnection!

  """
  The `any_future_games` field cannot be nested within a list.
  """
  anyFutureGames(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    so5FixtureEligible: Boolean = false
  ): AnyGameInterfaceConnection!
  anyGameStats(last: Int!, lowCoverage: Boolean = true, so5FixtureSlug: String): [AnyPlayerGameStatsInterface]!
  anyGamesForFixture(so5FixtureSlug: String!): [AnyGameInterface!]!
  anyGamesForLeaderboard(so5LeaderboardSlug: String!): [AnyGameInterface!]!

  """
  The `any_past_games` field cannot be nested within a list.
  """
  anyPastGames(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): AnyGameInterfaceConnection!
  anyPositions: [Position!]!

  """
  Returns the 3 most followed players in the player's club The `any_related_players` field cannot be nested within a list.
  """
  anyRelatedPlayers: [AnyPlayerInterface!]!

  """
  The `any_so5_average_last_score` field cannot be nested within a list.
  """
  anySo5AverageLastScore(competitionSlug: String, location: AverageLastScoreLocation, position: Position!, span: AverageLastScoreSpan!, teamSlug: String): AverageLastScoreInterface
  appearances: Int!
  avatarPictureUrl: String!
  averageScore(position: Position, type: AveragePlayerScore!): Float
  averageStats(limit: AverageLimit = LAST_10, type: BasketballAverageStatType!): Float
  beforeLastOwningMembership: Membership
  birthDay: ISO8601Date
  cardPositions: [Position!]!
  cardPrice(rarity: Rarity!): Int

  """
  Cards of this player that are owned by a manager. Updated once a day.
  """
  cardSupply: [CardSeasonSupply!]!
  careerSeasons(
    """
    If defined only return seasons for competitions of that type
    """
    type: CompetitionType = null
  ): [Season!]!
  clubMemberships: [Membership!]!
  commonPlayer(rarity: Rarity!): CommonPlayer
  country: Country!
  currentSeason: Season
  currentUserSubscription: EmailSubscription
  displayName: String!

  """
  The `eligible_so5_competitions` field cannot be nested within a list.
  """
  eligibleSo5Competitions: [So5Competition!]!
  firstName: String!
  fullPictureUrl: String!
  hasSo5LineupForFixture(so5FixtureSlug: String!): Boolean!
  height: Int
  id: UUID! @deprecated(reason: "use slug")
  injuries: [Injury!]!
  isActive: Boolean!
  lastClub: Club
  lastFifteenSo5Appearances: Int
  lastFiveSo5Appearances: Int
  lastFortySo5Appearances: Int
  lastName: String!

  """
  Get the last 2 cards you own of the player
  """
  lastOwnedCards(
    inSeasonEligible: Boolean

    """
    rarities of the card in lowercase
    """
    rarities: [Rarity!]
    rarity: Rarity @deprecated(reason: "Use rarities instead")
  ): [AnyCardInterface!]!
  lastTenSo5Appearances: Int
  lowestPriceAnyCard(inSeason: Boolean, rarity: Rarity): AnyCardInterface
  matchName: String!
  memberships: [Membership!]!
  mySo5LeaderboardContendersForFixture(so5FixtureSlug: String!): [So5LeaderboardContender!]!
  news(last: Int!): [AnyPlayerNewsUpdate!]!
  nextClassicFixtureProjectedGrade: PlayerGameScoreProjection
  nextClassicFixtureProjectedScore: Float
  nextDailyFixtureProjectedGrade: PlayerGameScoreProjection
  nextDailyFixtureProjectedScore: Float
  nextGame(so5FixtureEligible: Boolean = false): AnyGameInterface
  ownedCardsCount(rarity: Rarity, seasonEligibility: SeasonEligibility): Int!
  playerGameScore(gameId: ID!, position: Position): PlayerGameScoreInterface

  """
  Up to 15 last So5Scores used in a So5Fixture
  """
  playerGameScores(last: Int!, lowCoverage: Boolean = true, position: Position): [PlayerGameScoreInterface]!

  """
  The `public_watchlists` field cannot be nested within a list.
  """
  publicWatchlists(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): WatchlistConnection

  """
  Up to 15 last So5Scores.score used in a So5Fixture
  """
  rawPlayerGameScores(last: Int!, lowCoverage: Boolean = true, position: Position): [Float]!
  seasonAppearances: Int
  shirtNumber: Int!
  signedAddCardPrice(rarity: Rarity!): SignedCardPrice
  signedDropCardPrice(rarity: Rarity!): SignedCardPrice
  slug: String!

  """
  The `so5_average_last_score` field cannot be nested within a list.
  """
  so5AverageLastScore(competitionSlug: String, location: AverageLastScoreLocation, position: Position!, span: AverageLastScoreSpan!, teamSlug: String): AverageLastScore @deprecated(reason: "Use any_so5_average_last_score instead")
  sport: Sport!
  squaredPictureUrl: String!
  subscriptionsCount: Int!
  suspensions: [Suspension!]!

  """
  The `token_prices` field cannot be nested within a list.
  """
  tokenPrices(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int
    includePrivateSales: Boolean

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    rarity: Rarity!
    season: Int
    seasonEligibility: SeasonEligibility
    since: ISO8601DateTime
  ): TokenPriceConnection!
  totalStats(type: BasketballAverageStatType!): Float
  user: User
  weight: Int
}

enum NBAPosition {
  CENTER
  FORWARD
  GUARD
  UNKNOWN
}

"""
A Sorare NBA user sport specific profile
"""
type NBAUserSportProfile implements Node & UserSportProfileInterface {
  achievementBadges: [SkinShopItem]
  availableOnboardingLeaderboards(rarity: Rarity): Boolean!
  background: SkinShopItem
  bannerColor: String
  bannerUrl: String
  blueprintCardsCount: Int!
  clubBadge: SkinShopItem
  clubName: String
  commonGameOnboarded: Boolean!

  """
  The `daily_claim_tasks` field cannot be nested within a list.
  """
  dailyClaimTasks: [FootballManagerTask!]!

  """
  Get a deck of cards
  """
  deck(name: String, slug: String): Deck

  """
  The `decks` field cannot be nested within a list.
  """
  decks(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Full text search query to filter decks
    """
    query: String
  ): DeckConnection!
  favoriteTeam: TeamInterface

  """
  The `forced_onboarding_so5_leaderboard` field cannot be nested within a list.
  """
  forcedOnboardingSo5Leaderboard: So5Leaderboard @deprecated(reason: "Not used anymore")
  gallerySocialPictureUrls: SocialPictureDerivative!

  """
  The `highlighted_deck` field cannot be nested within a list.
  """
  highlightedDeck: Deck
  id: ID!
  managerProfileSocialPictureUrls: SocialPictureDerivative!

  """
  The `my_favorite_team_onboarding_so5_leaderboard` field cannot be nested within a list.
  """
  myFavoriteTeamOnboardingSo5Leaderboard: So5Leaderboard @deprecated(reason: "Not used anymore")
  onboarded: Boolean!
  onboardingLeaderboards(rarity: Rarity): [OnboardingLeaderboard!]!
  onboardingSo5Fixture: So5Fixture

  """
  The `onboarding_so5_leaderboard` field cannot be nested within a list.
  """
  onboardingSo5Leaderboard: So5Leaderboard
  onboardingStatus: UserSportProfileOnboardingStatus! @deprecated(reason: "Not used anymore")

  """
  A frame to apply on top of user profile picture
  """
  pictureFrame: PictureFrameShopItem
  pictureFrameUrl(derivative: String = "tinified"): String @deprecated(reason: "Use pictureFrame")
  playerLoyaltyBoost(editedSeasonsCount: Int!, sealedCards: Int!): RewardBoost!
  rarityVaultBoost(rarity: Rarity!, sport: Sport!, unseals: Int = 0): RewardBoost!
  remainingUnsealsInPeriod(rarity: Rarity!): Int!
  selectedUserSportStatistics: [UserSportStatistic]!
  shieldUrl: String
  socialPictureFingerprint: String!
  tournamentEligibilities: [TournamentEligibility!]!
  userSportStatistics: [UserSportStatistic!]!
  variant: UserSportProfileVariant!
}

type NationalTeam implements Node & TeamInterface & WithSubscriptionsInterface {
  activeCompetitions: [Competition!]!

  """
  The `active_memberships` field cannot be nested within a list.
  """
  activeMemberships(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): MembershipConnection!

  """
  The `active_players` field cannot be nested within a list.
  """
  activePlayers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PlayerConnection!

  """
  The `any_active_players` field cannot be nested within a list.
  """
  anyActivePlayers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): AnyPlayerInterfaceConnection!

  """
  The `any_cards` field cannot be nested within a list.
  """
  anyCards(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String
    age: Int
    assetIds: [String!]

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    classicOnly: Boolean
    customCardEditionName: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int
    inActiveCompetitions: [String!]
    inOrderOfRarities: Boolean @deprecated(reason: "Use `sorts` instead")
    inSeasonEligible: Boolean

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    owned: Boolean
    ownedByMe: Boolean
    ownedSinceAfter: ISO8601DateTime
    playerSlugs: [String!]

    """
    positions of the card capitalized
    """
    positions: [Position!]

    """
    rarities of the card in lowercase
    """
    rarities: [Rarity!]
    recentlyOwnedFirst: Boolean @deprecated(reason: "Use `sorts` instead")
    revealable: Boolean
    revealableFirst: Boolean @deprecated(reason: "Use `sorts` instead")
    seasonStartYears: [Int!]
    serialNumber: Int
    shirtNumber: Int
    slugs: [String!]
    sorts: [CardSort!]
    sport: Sport
    teamSlugs: [String!]
    withinDeckFirst: String
  ): AnyCardInterfaceConnection!

  """
  The `any_games` field cannot be nested within a list.
  """
  anyGames(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    End time (inclusive) of the game.
    """
    endDate: ISO8601DateTime!

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Start time (inclusive) of the game.
    """
    startDate: ISO8601DateTime!
  ): AnyGameInterfaceConnection!

  """
  The `any_players` field cannot be nested within a list.
  """
  anyPlayers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): AnyPlayerInterfaceConnection!

  """
  The `any_recent_departures` field cannot be nested within a list.
  """
  anyRecentDepartures(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): AnyPlayerInterfaceConnection!
  code: String
  country: Country!
  currentUserSubscription: EmailSubscription
  dataPartner: DataPartner
  founded: String

  """
  The `games` field cannot be nested within a list.
  """
  games(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    End time (inclusive) of the game.
    """
    endDate: ISO8601DateTime!

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Start time (inclusive) of the game.
    """
    startDate: ISO8601DateTime!
  ): GameConnection!
  id: ID!
  internationalCompetition: Competition
  lastFiveAnyGames: [AnyGameInterface!]!
  lastFiveGames: [Game!]!

  """
  The `latest_any_games` field cannot be nested within a list.
  """
  latestAnyGames(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int
    includingLive: Boolean

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): AnyGameInterfaceConnection!

  """
  The `latest_games` field cannot be nested within a list.
  """
  latestGames(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int
    includingLive: Boolean

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): GameConnection!
  name: String!
  officialName: String!
  optaId: String
  pictureSecondaryUrl: String
  pictureUrl(derivative: String = "low_res"): String

  """
  The `players` field cannot be nested within a list.
  """
  players(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PlayerConnection!
  ready: Boolean!

  """
  The `recent_departures` field cannot be nested within a list.
  """
  recentDepartures(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PlayerConnection!
  shortName: String!
  slug: String!
  styleGuideColor: String
  subscriptionsCount: Int!

  """
  Returns top 5 players of the national team based on L15
  """
  topPlayers: [Player!]!
  upcomingAnyGames(first: Int!): [AnyGameInterface]!
  upcomingGames(first: Int!): [Game]!
  withSellablePlayers(withSingleSales: Boolean): Boolean!
}

"""
The nationality rule of a So5Leaderboard
"""
type Nationality {
  countries: [Country!]!
  max: Int
  min: Int
}

"""
So5 No Card Route Config
"""
type NoCardRoute {
  cardCountsByRarity: CardCount!
  emailAddress: String!
  id: ID!
  maxLineupsPerUser(rarity: Rarity): Int!
  nextCloseDate: ISO8601DateTime
  nextOpenDate: ISO8601DateTime
  version: Int!
}

"""
An object with an ID.
"""
interface Node {
  """
  ID of the object.
  """
  id: ID!
}

"""
User notification
"""
union Notification = AnnouncementNotification | AuctionNotification | AutoClaimNotification | CardCollectionNotification | CardNotification | ConversionCreditNotification | DecisiveActionNotification | DecisivePurchaseNotification | ExternalDepositNotification | FootballRivalsGameNotification | FootballRivalsManagerNotification | InGameCurrencyNotification | KycRequestNotification | LoanNotification | MarketingNotification | MissedLineupNotification | OfferNotification | ReferralRewardNotification | ReminderNotification | SaleNotification | ShopItemNotification | So5LineupNotification | So5UserGroupNotification | TaskNotification | UserAwardNotification | UserRelationNotification

"""
A notification filter
"""
input NotificationCategoryInput {
  name: String!
  type: String!
}

"""
User Notification
"""
interface NotificationInterface {
  body: String!
  createdAt: ISO8601DateTime!
  deeplinkUrl: String!
  iconUrl: String!
  id: ID!
  important: Boolean!
  markdownBody: String!
  name: String!
  pictureUrl: String
  read: Boolean!
  sport: SportOrShared
  title: String!
  user: CurrentUser!
}

"""
The connection type for NotificationInterface.
"""
type NotificationInterfaceConnection {
  """
  A list of edges.
  """
  edges: [NotificationInterfaceEdge!]!

  """
  A list of nodes.
  """
  nodes: [NotificationInterface!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type NotificationInterfaceEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: NotificationInterface
}

"""
A Sorare user notification preference
"""
type NotificationPreference {
  """
  The channels available for the notification preference
  """
  availableChannels: [NotificationPreferenceChannel!]!

  """
  The channels configured for the notification preference
  """
  channels: [NotificationPreferenceChannel!]

  """
  The channels used by default for the notification dispatch
  """
  defaultChannels: [NotificationPreferenceChannel!]!
  defaultValue: Json!

  """
  The description of the notification preference
  """
  description: String!

  """
  The labels corresponding to each value. May be missing when not relevant.
  """
  labels: [String!]
  name: String!

  """
  The title of the notification preference
  """
  title: String!
  value: Json
  values: [Json!]!
}

enum NotificationPreferenceChannel {
  EMAIL
  IN_APP
  PUSH
}

"""
A notification preference
"""
input NotificationPreferenceInput {
  name: String!

  """
  Sport whose notification settings is to be updated.
  """
  sport: SportOrShared!
  value: Json!
}

"""
Notification Section
"""
type NotificationSection {
  """
  Get notification settings. If no sport parameter is provided the football one will be returned
  """
  myNotificationPreferences(
    """
    Sport whose notification settings are to be returned
    """
    sport: SportOrShared
  ): [NotificationPreference!]!
  name: String!
  slug: String!
  subsections: [NotificationSubsection!]!
}

"""
Notification Subsection
"""
type NotificationSubsection {
  name: String!
  section: NotificationSection!
  slug: String!
}

"""
The entrypoint for notifications information
"""
type Notifications {
  anyNotifications(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): NotificationInterfaceConnection!
  unreadCount: Int!
}

"""
An OAuth access token
"""
type OAuthAccessToken {
  application: OAuthApplication!
  createdAt: ISO8601DateTime!
  expiresAt: ISO8601DateTime
  id: String!
  scopes: [String!]!
}

"""
An OAuth application
"""
type OAuthApplication {
  id: String!
  myAccessToken: OAuthAccessToken
  name: String!
  pictureUrl(derivative: String = null): String
  scopes: String
}

enum OAuthProvider {
  APPLE
  FACEBOOK
  GOOGLE_OAUTH2
}

enum OfferDirection {
  RECEIVED
  SENT
}

"""
An object including all arguments to migrate an offer
"""
input OfferMigrationInput {
  expirationBlock: Int!
  migrateInternalCardsSignature: String
  migrateMappedCardsSignature: String
}

"""
A user notification regarding an Offer
"""
type OfferNotification implements Node & NotificationInterface {
  body: String!
  createdAt: ISO8601DateTime!
  deeplinkUrl: String!
  iconUrl: String!
  id: ID!
  important: Boolean!
  markdownBody: String!
  name: String!
  pictureUrl: String
  read: Boolean!
  sport: SportOrShared
  title: String!
  tokenOffer: TokenOffer!
  user: CurrentUser!
}

enum OfferState {
  ACCEPTED
  BLOCKED
  CANCELLED
  ENDED
  FLAGGED
  MINTED
  OPENED
  PENDING_MIGRATION
  PENDING_REJECTION
  PENDING_REVIEW
  READY_FOR_SCORING
  REJECTED
  SCORED
  SETTLABLE
  SETTLEMENT_FAILED
  SETTLEMENT_PUBLISHED
}

enum OfferType {
  DIRECT_OFFER
  SINGLE_BUY_OFFER
  SINGLE_SALE_OFFER
}

type OnboardingLeaderboard {
  color: String!
  description: String
  displayName: String!
  id: String!
  nextPlayableLeaderboard: So5Leaderboard @deprecated(reason: "Not used anymore")
  pictureUrl: String!
  playableLeaderboard: So5Leaderboard
}

input OperationInput {
  name: String!
  path: String!
  timeMs: Int!
}

"""
A list of best PlayerGameScore by position
"""
type OrderedPlayerGameScores {
  playerGameScores: [PlayerGameScoreInterface!]!
  position: Position!
}

"""
A list of best So5Score by position
"""
type OrderedSo5Scores {
  position: String!
  positionTyped: Position!
  so5Scores: [So5Score!]!
}

enum OrdinalRatingEnum {
  HIGH
  LOW
  MEDIUM
}

enum Orientation {
  LANDSCAPE
  PORTRAIT
}

"""
A Mangopay other bank account type
"""
type OtherBankAccount implements BankAccountInterface & Node {
  """
  Account number (last 4 digits)
  """
  accountNumber: String!

  """
  Bank Identifier Code
  """
  bic: String!
  country: Country!
  id: ID!
  ownerAddress: MangopayBankAccountOwnerAddress
  ownerName: String
  status: MangopayBankAccountStatus
}

"""
An object representing the past or present ownership of a card by a user or a contract
"""
type Owner implements Node & OwnerInterface {
  account: Account
  address: String!
  amounts: MonetaryAmount
  blockchain: String!
  card: Card!
  from: ISO8601DateTime!
  id: ID!
  optimistic: Boolean!

  """
  Card price, in wei.
  """
  price: String!
  referenceId: String
  settleAt: ISO8601DateTime
  transferType: String!
}

"""
Card owner (contract or user)
"""
interface OwnerInterface {
  account: Account
  address: String!
  amounts: MonetaryAmount
  blockchain: String!
  card: Card!
  from: ISO8601DateTime!
  id: ID!
  optimistic: Boolean!

  """
  Card price, in wei.
  """
  price: String!
  referenceId: String
  settleAt: ISO8601DateTime
  transferType: String!
}

enum OwnerTransfer {
  BUNDLED_ENGLISH_AUCTION
  DEPOSIT
  DIRECT_OFFER
  ENGLISH_AUCTION
  INSTANT_BUY
  LOAN
  MINT
  PACK
  REFERRAL
  REWARD
  SHARDS
  SINGLE_BUY_OFFER
  SINGLE_SALE_OFFER
  TRANSFER
  WITHDRAWAL
}

"""
An owner with conversion rates
"""
type OwnerWithRates implements Node & OwnerInterface {
  account: Account
  address: String!
  amounts: MonetaryAmount
  blockchain: String!
  card: Card!
  from: ISO8601DateTime!
  id: ID!
  optimistic: Boolean!

  """
  Card price, in wei.
  """
  price: String!
  priceInFiat: Fiat!
  referenceId: String
  settleAt: ISO8601DateTime
  transferType: String!
}

"""
A pack
"""
type Pack implements Node {
  cards: [AnyCardInterface!]!
  claimed: Boolean!
  id: ID!
}

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String

  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!

  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!

  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
}

"""
A webauthn passkey
"""
type Passkey implements Node {
  createdAt: ISO8601DateTime!
  externalId: String!
  id: ID!
  lastUsedAt: ISO8601DateTime
  nickname: String
  publicKey: String!
  signCount: Int!
  sorarePrivateKey: SorarePrivateKey
  user: User!
}

type PasskeyChallenge {
  challenge: String!
  timeout: Int!
}

"""
Input for passkey credential
"""
input PasskeyCredentialForCreateInput {
  authenticatorAttachment: String
  clientExtensionResults: Json
  id: String!
  rawId: String!
  response: PasskeyCredentialResponseForCreateInput!
  type: String!
  user: PasskeyCredentialUserInput
}

"""
Input for passkey credential
"""
input PasskeyCredentialForGetInput {
  authenticatorAttachment: String
  clientExtensionResults: Json
  id: String!
  rawId: String!
  response: PasskeyCredentialResponseForGetInput!
  type: String!
  user: PasskeyCredentialUserInput
}

"""
Input for passkey credential response
"""
input PasskeyCredentialResponseForCreateInput {
  attestationObject: String!
  clientDataJSON: String!
  publicKey: String
  publicKeyAlgorithm: Int
  signature: String
  transports: [String!]
  userHandle: String
}

"""
Input for passkey credential response
"""
input PasskeyCredentialResponseForGetInput {
  authenticatorData: String!
  clientDataJSON: String!
  publicKey: String
  publicKeyAlgorithm: Int
  signature: String
  transports: [String!]
  userHandle: String
}

"""
Input for passkey credential user
"""
input PasskeyCredentialUserInput {
  id: String
  name: String
}

type PasswordEncryptedPrivateKey {
  iv: String!
  payload: String!
  salt: String!
}

input PasswordEncryptedPrivateKeyInput {
  iv: String!
  payload: String!
  salt: String!
}

"""
A payment intent
"""
type Payment implements Node {
  aasmState: PaymentIntentState!
  amount: WeiAmount!
  creditCardReceiptAvailable: Boolean!
  creditCardReceiptSent: Boolean!
  fiat: Boolean!
  fiatAmount: Int
  fiatCurrency: FiatCurrency
  fiatReceiptUrl: String
  id: ID!
  spentAt: ISO8601DateTime!
  tokenOperation: PaymentIntentTokenOperation
  user: User!
}

"""
The connection type for Payment.
"""
type PaymentConnection {
  """
  A list of edges.
  """
  edges: [PaymentEdge!]!

  """
  A list of nodes.
  """
  nodes: [Payment!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

enum PaymentCurrency {
  ETH
  EUR
  GBP
  USD
}

"""
Information about the status of a pre authorization
"""
type PaymentDepositStatus {
  depositStatus: DepositOperationStatus
  provider: PaymentProvider
  providerId: String
}

"""
An edge in a connection.
"""
type PaymentEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Payment
}

enum PaymentIntentState {
  CANCELLED
  FAILED
  PENDING_REFUND
  READY
  REFUNDED
  SPENT
}

"""
Object that can be a tokenOperation of a PaymentIntent
"""
union PaymentIntentTokenOperation = TokenBid | TokenOffer | TokenPrimaryOffer

"""
Payment Method
"""
type PaymentMethod {
  card: CreditCard!
  id: String!
}

enum PaymentMethodProvider {
  MANGOPAY
  STRIPE
}

enum PaymentProvider {
  APPLE_PAY
  IDEAL
  MANGOPAY
  PAYPAL
}

"""
Queries concerning payments
"""
type PaymentRoot {
  depositStatus(provider: PaymentProvider!, providerId: String!): PaymentDepositStatus!
}

"""
A paypal authorization request
"""
type PaypalAuthorizationRequest {
  amount: Int!
  currency: FiatCurrency!
  id: String!
  redirectUrl: String!
}

"""
A pending deposit to user's wallet
"""
type PendingDeposit {
  amounts: MonetaryAmount!
  date: ISO8601DateTime!
  feeAmounts: MonetaryAmount
  id: String!
  providerType: DepositProvider!
  status: DepositStatus!

  """
  Will be null if deposit is not external
  """
  transactionHash: String
}

enum Period {
  END_OF_EXTRA_TIME_BEFORE_PENALTIES
  END_OF_SECOND_HALF_BEFORE_EXTRA_TIME
  EXTRA_TIME_FIRST_HALF
  EXTRA_TIME_HALF_TIME
  EXTRA_TIME_SECOND_HALF
  FIRST_HALF
  FULL_TIME
  HALF_TIME
  PENALTY_SHOOTOUT
  PRE_MATCH
  SECOND_HALF
}

"""
A score for a game period
"""
type PeriodScore {
  awayScore: Int!
  homeScore: Int!
  periodNumber: Int!
}

"""
A pickable player
"""
type PickablePlayer {
  id: ID!
  pictureUrl: String!
  player: Player!
}

type PictureFrameShopItem implements Node & ShopItemInterface {
  cardCollectionRequirements: [CardCollectionRequirement!]!
  createdAt: ISO8601DateTime!
  description: String
  disabled: Boolean!
  expirationDate: ISO8601DateTime
  id: ID!
  infoLink: String
  limitPerUser: Int!
  myAvailableTotalPurchasesCount: Int!
  myAvailableUserShopItems: [UserShopItem!]
  myBalance: Int!
  myLimitResetAt: ISO8601DateTime
  myPurchasesCount: Int!
  name: String!
  pictureUrl(derivative: ShopItemDerivative = TINIFIED): String!
  position: ShopItemType!
  price: Int!
  requirementsRulesLink: String
  salePrice: Int
  seenInManagerId: Boolean!
  shopItemsRequired: [ShopItem!]!
  threeDimensionalAssetUrl(
    """
    Defaults to GLB
    """
    format: ShopItemThreeDimensionalAssetFormat
  ): String
  unlocked: Boolean!
}

enum PicturePositioning {
  AS_IS
  AUTO
}

enum Platform {
  ANDROID
  IOS
  MOBILE_WEB
  WEB
}

"""
A professional football player
"""
type Player implements AnyPlayerInterface & Node & WithSubscriptionsInterface {
  abbreviatedName: String!
  activeClub: Club
  activeClubMembership: Membership
  activeInjuries: [Injury!]!
  activeNationalTeam: NationalTeam
  activeSuspensions: [Suspension!]!
  age: Int!
  allAverageStats(limit: AverageLimit = LAST_15): [FootballAverageStatWithValueType!]!

  """
  All player So5Scores ordered by descending game date
  """
  allPlayerGameScores(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int
    from: ISO8601DateTime

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    position: Position
    to: ISO8601DateTime
  ): PlayerGameScoreInterfaceConnection!

  """
  All player So5Scores ordered by descending game date
  """
  allSo5Scores(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    position: Position
  ): So5ScoreConnection!
  allTotalStats: [FootballAverageStatWithValueType!]!
  anyCardWithLivePrimaryOffer(rarity: Rarity): AnyCardInterface

  """
  The `any_cards` field cannot be nested within a list.
  """
  anyCards(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String
    age: Int
    assetIds: [String!]

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    classicOnly: Boolean
    customCardEditionName: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int
    inActiveCompetitions: [String!]
    inOrderOfRarities: Boolean @deprecated(reason: "Use `sorts` instead")
    inSeasonEligible: Boolean

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    owned: Boolean
    ownedByMe: Boolean
    ownedSinceAfter: ISO8601DateTime
    playerSlugs: [String!]

    """
    positions of the card capitalized
    """
    positions: [Position!]

    """
    rarities of the card in lowercase
    """
    rarities: [Rarity!]
    recentlyOwnedFirst: Boolean @deprecated(reason: "Use `sorts` instead")
    revealable: Boolean
    revealableFirst: Boolean @deprecated(reason: "Use `sorts` instead")
    seasonStartYears: [Int!]
    serialNumber: Int
    shirtNumber: Int
    slugs: [String!]
    sorts: [CardSort!]
    sport: Sport
    teamSlugs: [String!]
    withinDeckFirst: String
  ): AnyCardInterfaceConnection!

  """
  The `any_future_games` field cannot be nested within a list.
  """
  anyFutureGames(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    so5FixtureEligible: Boolean = false
  ): AnyGameInterfaceConnection!
  anyGameStats(last: Int!, lowCoverage: Boolean = true, so5FixtureSlug: String): [AnyPlayerGameStatsInterface]!
  anyGamesForFixture(so5FixtureSlug: String!): [AnyGameInterface!]!
  anyGamesForLeaderboard(so5LeaderboardSlug: String!): [AnyGameInterface!]!

  """
  The `any_past_games` field cannot be nested within a list.
  """
  anyPastGames(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): AnyGameInterfaceConnection!
  anyPositions: [Position!]!

  """
  Returns the 3 most followed players in the player's club The `any_related_players` field cannot be nested within a list.
  """
  anyRelatedPlayers: [AnyPlayerInterface!]!

  """
  The `any_so5_average_last_score` field cannot be nested within a list.
  """
  anySo5AverageLastScore(competitionSlug: String, location: AverageLastScoreLocation, position: Position!, span: AverageLastScoreSpan!, teamSlug: String): AverageLastScoreInterface
  appearances: Int!
  avatarPictureUrl: String!
  averageScore(position: Position, type: AveragePlayerScore!): Float
  averageStats(limit: AverageLimit!, type: AverageStat!): Float
  beforeLastOwningMembership: Membership
  bestFoot: String
  birthDate: ISO8601DateTime
  birthDay: ISO8601Date
  cardPositions: [Position!]!
  cardPrice(rarity: Rarity!): Int

  """
  Cards of this player that are owned by a manager. Updated once a day.
  """
  cardSupply: [CardSeasonSupply!]!
  careerSeasons(
    """
    If defined only return seasons for competitions of that type
    """
    type: CompetitionType = null
  ): [Season!]!
  clubMemberships: [Membership!]!
  commonPlayer(rarity: Rarity!): CommonPlayer
  country: Country!
  currentSeason: Season
  currentUserSubscription: EmailSubscription
  displayName: String!

  """
  The `eligible_so5_competitions` field cannot be nested within a list.
  """
  eligibleSo5Competitions: [So5Competition!]!
  firstName: String!
  fullPictureUrl: String!

  """
  The `future_games` field cannot be nested within a list.
  """
  futureGames(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): GameConnection!
  gameForLeaderboard(so5LeaderboardSlug: String!): Game
  gameStats(last: Int!, lowCoverage: Boolean = true): [PlayerGameStats]!
  gamesForLeaderboard(so5LeaderboardSlug: String!): [Game!]!
  hasSo5LineupForFixture(so5FixtureSlug: String!): Boolean!
  height: Int
  id: ID!
  injuries: [Injury!]!
  lastClub: Club
  lastFifteenSo5Appearances: Int
  lastFiveSo5Appearances: Int
  lastFortySo5Appearances: Int
  lastName: String!

  """
  Get the last 2 cards you own of the player
  """
  lastOwnedCards(
    inSeasonEligible: Boolean

    """
    rarities of the card in lowercase
    """
    rarities: [Rarity!]
    rarity: Rarity @deprecated(reason: "Use rarities instead")
  ): [AnyCardInterface!]!
  lastTenSo5Appearances: Int
  lowestPriceAnyCard(inSeason: Boolean, rarity: Rarity): AnyCardInterface
  matchName: String!
  memberships: [Membership!]!
  mySo5LeaderboardContendersForFixture(so5FixtureSlug: String!): [So5LeaderboardContender!]!
  news(last: Int!): [AnyPlayerNewsUpdate!]!
  nextClassicFixturePlayingStatusOdds: PlayingStatusOdds
  nextClassicFixtureProjectedGrade: PlayerGameScoreProjection
  nextClassicFixtureProjectedScore: Float
  nextDailyFixtureProjectedGrade: PlayerGameScoreProjection
  nextDailyFixtureProjectedScore: Float
  nextGame(so5FixtureEligible: Boolean = false): AnyGameInterface
  optaId: String
  ownedCardsCount(rarity: Rarity, seasonEligibility: SeasonEligibility): Int!

  """
  The `past_games` field cannot be nested within a list.
  """
  pastGames(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): GameConnection!
  pictureUrl(derivative: String = "tinified"): String
  playerGameScore(gameId: ID!, position: Position): PlayerGameScoreInterface

  """
  Up to 15 last So5Scores used in a So5Fixture
  """
  playerGameScores(last: Int!, lowCoverage: Boolean = true, position: Position): [PlayerGameScoreInterface]!
  playingStatus: PlayerPlayingStatus
  position: Position!

  """
  The `public_watchlists` field cannot be nested within a list.
  """
  publicWatchlists(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): WatchlistConnection
  rankingForPositionLeague: Int

  """
  Up to 15 last So5Scores.score used in a So5Fixture
  """
  rawPlayerGameScores(last: Int!, lowCoverage: Boolean = true, position: Position): [Float]!

  """
  Up to 10 last So5Scores.score used in a So5Fixture
  """
  rawSo5Scores(last: Int!, lowCoverage: Boolean = true, position: Position): [Float]!

  """
  Returns the 3 most followed players in the player's club The `related_players` field cannot be nested within a list.
  """
  relatedPlayers: [Player!]!
  seasonAppearances: Int
  shirtNumber: Int!
  signedAddCardPrice(rarity: Rarity!): SignedCardPrice
  signedDropCardPrice(rarity: Rarity!): SignedCardPrice
  slug: String!

  """
  The `so5_average_last_score` field cannot be nested within a list.
  """
  so5AverageLastScore(competitionSlug: String, location: AverageLastScoreLocation, position: Position!, span: AverageLastScoreSpan!, teamSlug: String): AverageLastScore @deprecated(reason: "Use any_so5_average_last_score instead")

  """
  So5Score of a player with his current position for a specific Game
  """
  so5Score(gameId: ID!, position: Position): So5Score

  """
  Up to 10 last So5Scores used in a So5Fixture
  """
  so5Scores(last: Int!, lowCoverage: Boolean = true, position: Position): [So5Score]!
  sport: Sport!
  squaredPictureUrl: String!
  stats(seasonStartYear: Int!): Stats
  subscriptionsCount: Int!
  suspensions: [Suspension!]!

  """
  The `token_prices` field cannot be nested within a list.
  """
  tokenPrices(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int
    includePrivateSales: Boolean

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    rarity: Rarity!
    season: Int
    seasonEligibility: SeasonEligibility
    since: ISO8601DateTime
  ): TokenPriceConnection!
  totalStats(type: AverageStat!): Float
  u23Eligible: Boolean!
  u23EligibleUntil: ISO8601Date
  user: User
  weight: Int
}

"""
The connection type for Player.
"""
type PlayerConnection {
  """
  A list of edges.
  """
  edges: [PlayerEdge!]!

  """
  A list of nodes.
  """
  nodes: [Player!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type PlayerEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Player
}

enum PlayerFieldStatus {
  """
  The player is not on the game sheet
  """
  NOT_ON_GAME_SHEET

  """
  The player is on the bench
  """
  ON_BENCH

  """
  The player is on the field
  """
  ON_FIELD

  """
  The player has been substituted
  """
  SUBSTITUTED

  """
  No information
  """
  UNKNOWN
}

"""
A football player game score
"""
type PlayerGameScore implements Node & PlayerGameScoreInterface {
  allAroundScore: Float!
  allAroundStats: [StatScore!]!
  anyGame: AnyGameInterface!
  anyPlayer: AnyPlayerInterface!
  anyPlayerGameStats: AnyPlayerGameStatsInterface!
  decisiveScore: StatScore
  detailedScore: [StatScore!]!
  footballGame: Game!
  footballPlayer: Player!
  footballPlayerGameStats: PlayerGameStats!
  id: ID!
  negativeDecisiveStats: [StatScore!]!
  position: String!
  positionTyped: Position!
  positiveDecisiveStats: [StatScore!]!
  projectedScore: Float!
  projection: PlayerGameScoreProjection
  score: Float!
  scoreStatus: ScoreStatus!
  scoringVersion: Int!
}

"""
Player game score
"""
interface PlayerGameScoreInterface {
  anyGame: AnyGameInterface!
  anyPlayer: AnyPlayerInterface!
  anyPlayerGameStats: AnyPlayerGameStatsInterface!
  detailedScore: [StatScore!]!
  id: ID!
  position: String!
  positionTyped: Position!
  projectedScore: Float!
  projection: PlayerGameScoreProjection
  score: Float!
  scoreStatus: ScoreStatus!
  scoringVersion: Int!
}

"""
The connection type for PlayerGameScoreInterface.
"""
type PlayerGameScoreInterfaceConnection {
  """
  A list of edges.
  """
  edges: [PlayerGameScoreInterfaceEdge!]!

  """
  A list of nodes.
  """
  nodes: [PlayerGameScoreInterface!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type PlayerGameScoreInterfaceEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: PlayerGameScoreInterface
}

"""
Projection of a player game score
"""
type PlayerGameScoreProjection {
  grade: PlayerGameScoreProjectionGrade!
  id: ID!
  reliabilityBasisPoints: Int!
  score: Float!
}

enum PlayerGameScoreProjectionGrade {
  A
  B
  C
  D
  E
  F
}

"""
Stats of a player for a game
"""
type PlayerGameStats implements AnyPlayerGameStatsInterface & Node {
  accuratePass: Int
  anyGame: AnyGameInterface!
  anyPlayer: AnyPlayerInterface!
  anyTeam: TeamInterface!
  assistPenaltyWon: Int
  attFreekickTotal: Int
  attPenGoal: Int
  attPenMiss: Int
  attPenPost: Int
  attPenTarget: Int
  bigChanceCreated: Int
  cleanSheet: Int
  cleanSheet60: Int
  clearanceOffLine: Int
  cornerTaken: Int
  crossAccuracy: Int
  duelWon: Int
  effectiveClearance: Int
  errorLeadToGoal: Int
  errorLeadToShot: Int
  fieldStatus: PlayerFieldStatus!
  footballGame: Game!
  footballPlayer: Player!
  footballPlayerGameScore(
    """
    Position of the player game score
    """
    position: String
  ): PlayerGameScore
  footballPlayingStatusOdds(newVersion: Boolean): PlayingStatusOdds
  formationPlace: Int
  fouls: Int
  freekickCross: Int
  game: Game!
  gameStarted: Int
  goalAssist: Int
  goalKicks: Int
  goals: Int
  goalsConceded: Int
  id: ID!
  interceptionWon: Int
  lastManTackle: Int
  live: Boolean!
  lostCorners: Int
  minsPlayed: Int
  myBestSo5Appearance: So5Appearance
  onGameSheet: Boolean!
  ontargetScoringAtt: Int
  ownGoals: Int
  parries: Int
  passAccuracy: Int
  penaltiesSaved: Int
  penaltyConceded: Int
  penaltyKickMissed: Int
  penaltySave: Int
  penaltyTaken: Int!
  penaltyWon: Int
  playedInGame: Boolean!
  player: Player!
  playerGameScore(
    """
    Position of the player game score
    """
    position: String
  ): PlayerGameScoreInterface
  redCard: Int
  reviewed: Boolean!
  saves: Int
  setPieceTaken: Int!
  shotAccuracy: Int
  shotEfficiency: Int
  singleGoalGame: Int
  so5Score(
    """
    Position of the so5Score
    """
    position: String
  ): So5Score
  threeGoalsConceded: Int
  totalClearance: Int
  totalPass: Int
  totalScoringAtt: Int
  totalTackle: Int
  wasFouled: Int
  wonContest: Int
  wonTackle: Int
  yellowCard: Int
}

"""
Stats of a player for a game
"""
type PlayerGameStatsBaseball implements AnyPlayerGameStatsInterface & Node {
  anyGame: AnyGameInterface!
  anyPlayer: AnyPlayerInterface!
  anyTeam: TeamInterface!
  baseballGame: GameOfBaseball!
  baseballPlayer: BaseballPlayer!
  baseballPlayerGameScore(
    """
    Position of the player game score
    """
    position: String
  ): BaseballPlayerGameScore
  hittingAtBase: Int
  hittingAtPlate: Int
  hittingCaughtStealing: Int
  hittingDoubles: Int
  hittingHitByPitch: Int
  hittingHomeRuns: Int
  hittingRuns: Int
  hittingRunsBattedIn: Int
  hittingSingles: Int
  hittingStolenBases: Int
  hittingStrikeouts: Int
  hittingTriples: Int
  hittingWalks: Int
  id: ID!
  live: Boolean!
  myBestSo5Appearance: So5Appearance
  onGameSheet: Boolean!
  pitchingEarnedRuns: Int
  pitchingHitBatsmen: Int
  pitchingHitsAllowed: Int
  pitchingHolds: Int
  pitchingInningsPitched: Int
  pitchingNoHitters: Int
  pitchingPitchCount: Int
  pitchingReliefAppearance: Int
  pitchingSaves: Int
  pitchingStrikeouts: Int
  pitchingWalks: Int
  pitchingWins: Int
  playedInGame: Boolean!
  playerGameScore(
    """
    Position of the player game score
    """
    position: String
  ): PlayerGameScoreInterface
  probablePitcher: Boolean!
  projectedHittingAtBase: Float
  projectedHittingAtPlate: Float
  projectedHittingCaughtStealing: Float
  projectedHittingDoubles: Float
  projectedHittingHitByPitch: Float
  projectedHittingHomeRuns: Float
  projectedHittingRuns: Float
  projectedHittingRunsBattedIn: Float
  projectedHittingSingles: Float
  projectedHittingStolenBases: Float
  projectedHittingStrikeouts: Float
  projectedHittingTriples: Float
  projectedHittingWalks: Float
  projectedPitchingEarnedRuns: Float
  projectedPitchingHitBatsmen: Float
  projectedPitchingHitsAllowed: Float
  projectedPitchingHolds: Float
  projectedPitchingInningsPitched: Float
  projectedPitchingNoHitters: Float
  projectedPitchingPitchCount: Float
  projectedPitchingReliefAppearance: Float
  projectedPitchingSaves: Float
  projectedPitchingStrikeouts: Float
  projectedPitchingWalks: Float
  projectedPitchingWins: Float
  reviewed: Boolean!
}

"""
Stats of a player for a game
"""
type PlayerGameStatsBasketball implements AnyPlayerGameStatsInterface & Node {
  anyGame: AnyGameInterface!
  anyPlayer: AnyPlayerInterface!
  anyTeam: TeamInterface!
  assists: Int
  basketballGame: GameOfBasketball!
  basketballPlayer: NBAPlayer!
  basketballPlayerGameScore(
    """
    Position of the player game score
    """
    position: String
  ): BasketballPlayerGameScore
  blocks: Int
  doubleDouble: Int
  id: ID!
  live: Boolean!
  minsPlayed: Int
  myBestSo5Appearance: So5Appearance
  onGameSheet: Boolean!
  playedInGame: Boolean!
  playerGameScore(
    """
    Position of the player game score
    """
    position: String
  ): PlayerGameScoreInterface
  points: Int
  rebounds: Int
  reviewed: Boolean!
  steals: Int
  threePointsMade: Int
  tripleDouble: Int
  turnovers: Int
}

type PlayerHeightRule implements So5RuleInterface {
  boundaries: ValueOpenBoundaries
  descriptions: [So5RuleDescription!]!
  key: String!
  maxHeight: Int
  minHeight: Int
}

enum PlayerPlayingStatus {
  NOT_PLAYING
  REGULAR
  RETIRED
  STARTER
  SUBSTITUTE
  SUPER_SUBSTITUTE
}

"""
Recommended cards for a manager
"""
type PlayerRecommendation implements Node {
  anyCardWithLivePrimaryOffer(rarity: Rarity): AnyCardInterface
  anyPlayer: AnyPlayerInterface!
  id: ID!
  lowestPriceAnyCard(inSeason: Boolean, rarity: Rarity): AnyCardInterface
  playerSlug: String!
  ranking: Int!
  sport: Sport!
}

"""
A professional football player with current season supply
"""
type PlayerWithSupply {
  anyPlayer: AnyPlayerInterface!
  availableSupply: Int
  slug: String!
}

"""
Playing status odds of a player for a game
"""
type PlayingStatusOdds {
  nonPlayingOddsBasisPoints: Int!
  providerIconUrl: String!
  providerRedirectUrl: String!
  reliability: OrdinalRatingEnum!
  starterOddsBasisPoints: Int!
  substituteOddsBasisPoints: Int!
}

"""
A pool key share
"""
type PoolKeyShardsCount implements Node {
  count: Int!
  displayName: String!
  id: ID!
  logoUrl: String
  slug: String!
  so5League: So5League
}

enum Position {
  Coach
  Defender
  Forward
  Goalkeeper
  Midfielder
  Unknown
  baseball_catcher
  baseball_designated_hitter
  baseball_first_base
  baseball_outfield
  baseball_relief_pitcher
  baseball_second_base
  baseball_shortstop
  baseball_starting_pitcher
  baseball_third_base
  basketball_center
  basketball_forward
  basketball_guard
}

"""
A Sorare user postal address
"""
type PostalAddress {
  additionalAddress: String
  city: String
  company: String
  country: Country
  countryCode: String
  firstName: String
  lastName: String
  region: String
  streetAddress: String
  zipcode: String
}

input PostalAddressInput {
  additionalAddress: String
  city: String!
  company: String
  countryCode: String!
  firstName: String
  lastName: String
  streetAddress: String!
  zipcode: String!
}

type PotentialDiscountBreakdown {
  conversionCredit: ConversionCredit!
  discountAmount: String!
}

"""
An object representing the breakdown of the power of a Card
"""
type PowerBreakdown {
  activeClubsBasisPoints: Int!
  averageScoresBasisPoints: Int!
  boost: String!
  boostBasisPoints: Int!
  captain: String!
  captainBasisPoints: Int!
  collection: String!
  collectionBasisPoints: Int!
  differentNationalitiesBasisPoints: Int!
  fidelity: String!
  fidelityBasisPoints: Int!
  lineup: String!
  lineupBasisPoints: Int!
  malusAfterTransferBasisPoints: Int!
  nationalityBasisPoints: Int!

  """
  legacy bonuses are stored in this field
  """
  otherBonusBasisPoints: Int!
  playerBasisPoints: Int!
  positionStacksBasisPoints: Int!
  positionsBasisPoints: Int!
  sameActiveClubBasisPoints: Int!
  scarcity: String!
  scarcityBasisPoints: Int!
  season: String!
  seasonBasisPoints: Int!
  specialEditionCardBasisPoints: Int!
  version: Int!
  xp: String!
  xpBasisPoints: Int!
}

union PowerBreakdownOrPowerPointsBreakdown = PowerBreakdown | PowerPointsBreakdown

"""
An object representing the breakdown of the gain power of an appearance
"""
type PowerPointsBreakdown {
  activeClubsPoints: Float!
  averageScoresPoints: Float!
  boostPoints: Float!
  captainPoints: Float!
  collectionPoints: Float!
  differentNationalitiesPoints: Float!
  lineupPoints: Float!
  malusAfterTransferPoints: Float!
  nationalityPoints: Float!
  playerPoints: Float!
  positionStacksPoints: Float!
  positionsPoints: Float!
  sameActiveClubPoints: Float!
  scarcityPoints: Float!
  seasonPoints: Float!
  specialEditionCardPoints: Float!
  xpPoints: Float!
}

"""
A Mangopay Pre Registration Data
"""
type PreRegistrationData {
  accessKey: String!
  cardRegistrationUrl: String!
  data: String!
  id: String!
}

enum PreferredSide {
  BOTH
  LEFT
  RIGHT
}

type PrimaryOfferSource implements HistoryTransactionInterface {
  date: ISO8601DateTime!
  description: String
  id: String!
  label: String!
  logoUrl: String
  quantityByFlavour: [PoolKeyShardsCount!]!
  totalQuantity: Int!
}

"""
An Account
"""
type PrivateAccount implements Node {
  account: Account!
  accountable: PrivateAccountable!
  id: ID!
}

"""
Object that can be an account accountable
"""
union PrivateAccountable = PrivateEmptyAccount | PrivateFiatWalletAccount | StarkwarePrivateAccount

"""
An Account with no private info
"""
type PrivateEmptyAccount implements Node {
  id: ID!
}

"""
A Fiat Wallet Account
"""
type PrivateFiatWalletAccount implements Node {
  availableBalance: Int!
  countryOfResidence: String
  countryOfResidenceCode: String
  depositBankAccount: BankAccount
  dob: String
  firstName: String
  id: ID!
  kycRefusedReason: FiatWalletKycRefusedReason
  kycStatus: FiatWalletKycState
  lastName: String
  nationality: String
  nationalityCode: String
  publicInfo: FiatWalletAccount!
  state: FiatWalletAccountState!
  totalBalance: Int!
  withdrawalBankAccounts(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): BankAccountConnection
}

input PrivateKeyRecoveryInput {
  appId: String!
  email: String
  encryptionKey: String!
  iv: String!
  payload: String!
  phone: String
  teamId: String!
}

"""
Recovery option for a UserWallet.
"""
type PrivateKeyRecoveryOption implements Node {
  destination: String!
  id: ID!
  method: PrivateKeyRecoveryOptionMethodEnum!
  status: PrivateKeyRecoveryOptionStatusEnum!
}

enum PrivateKeyRecoveryOptionMethodEnum {
  EMAIL
  PHONE
}

enum PrivateKeyRecoveryOptionStatusEnum {
  ACTIVE
  INACTIVE
  PENDING_VALIDATION
}

type PrivateKeyRecoveryPayload {
  encryptionKey: String!
  iv: String!
  ivTemp: String!
  payload: String!
}

"""
A probabilistic bundle
"""
type ProbabilisticBundle implements Node {
  config: ProbabilisticBundleConfig!
  drawnSlotConfigIds: [String!]!
  id: ID!
  isOpenable: Boolean!
  items: [ProbabilisticBundleSlotItemInterface!]!
  openableAt: ISO8601DateTime
  opened: Boolean!
  openingDisclaimers: [ProbabilisticBundleOpeningDisclaimer!]!
  so5Reward: So5Reward
}

"""
A probabilistic bundle config
"""
type ProbabilisticBundleConfig {
  description: String!
  design: ProbabilisticBundleDesign!
  division: Int
  iconUrl: String!
  id: String!
  name: String!
  neonColor: String!
  openableAt: ISO8601DateTime
  openingScnUrl: String!
  pictureUrl: String!
  quality: ProbabilisticBundleQuality!
  rarity: Rarity!
  slots: [ProbabilisticBundleConfigSlot!]!
  stars: Int
}

"""
A probabilistic bundle config slot
"""
type ProbabilisticBundleConfigSlot {
  probableConfigs: [ProbabilisticBundleSlotConfig!]!
}

"""
The connection type for ProbabilisticBundle.
"""
type ProbabilisticBundleConnection {
  """
  A list of edges.
  """
  edges: [ProbabilisticBundleEdge!]!
  hasAny: Boolean!

  """
  A list of nodes.
  """
  nodes: [ProbabilisticBundle!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  raritiesCount: [RarityCount!]!
  totalCount: Int!
}

enum ProbabilisticBundleDesign {
  LOYALTY
  NEON_CHRISTMAS
  PRO
  RIVALS
}

"""
An edge in a connection.
"""
type ProbabilisticBundleEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProbabilisticBundle
}

enum ProbabilisticBundleIntensity {
  BRIGHT
  DEFAULT
  HIGH
  INTENSE
  MODERATE
}

"""
A probabilistic bundle opening disclaimer
"""
type ProbabilisticBundleOpeningDisclaimer {
  message: String
  slug: String!
}

enum ProbabilisticBundleQuality {
  LITE
  PREMIUM
  STANDARD
}

"""
A Probabilistic Bundle Reward
"""
type ProbabilisticBundleReward implements AnyRewardInterface & Node {
  aasmState: RewardState!
  config: ProbabilisticBundleRewardConfig!
  id: ID!
  probabilisticBundle: ProbabilisticBundle!
}

type ProbabilisticBundleRewardConfig implements AnyRewardConfigInterface {
  boostedRewardConfigs: [AnyRewardConfigInterface!]
  id: ID!
  probabilisticBundleConfig: ProbabilisticBundleConfig!
}

"""
A probabilistic bundle slot arena tickets item
"""
type ProbabilisticBundleSlotArenaTicketItem implements ProbabilisticBundleSlotItemInterface {
  id: ID!
  intensity: ProbabilisticBundleIntensity
  neonColor: String
  quantity: Int!
}

"""
A probabilistic bundle slot card item
"""
type ProbabilisticBundleSlotCardItem implements ProbabilisticBundleSlotItemInterface {
  anyCard: AnyCardInterface!
  id: ID!
  intensity: ProbabilisticBundleIntensity
  neonColor: String
}

"""
A probabilistic bundle slot card shards item
"""
type ProbabilisticBundleSlotCardShardItem implements ProbabilisticBundleSlotItemInterface {
  id: ID!
  intensity: ProbabilisticBundleIntensity
  neonColor: String
  quantity: Int!
  rarity: Rarity!
}

"""
A probabilistic bundle slot config
"""
type ProbabilisticBundleSlotConfig {
  arenaTickets: Int!
  cardShards: [CardShardRewardConfig!]!
  cards: [So5RewardCardConfig!]!
  conversionCredit: ConversionCreditRewardConfig
  deliverableItems: [RewardDeliverableItem!]!
  id: String!
  inGameCurrencies: [InGameCurrencyRewardConfig!]!
  probability: Float!
  rewardShopItems: [FootballRewardShopItem!]!
}

"""
A probabilistic bundle slot conversion credit item
"""
type ProbabilisticBundleSlotConversionCreditItem implements ProbabilisticBundleSlotItemInterface {
  id: ID!
  intensity: ProbabilisticBundleIntensity
  maxDiscount: MonetaryAmount!
  neonColor: String
  percentageDiscount: Float!
}

"""
A probabilistic bundle slot deliverable item
"""
type ProbabilisticBundleSlotDeliverableItem implements ProbabilisticBundleSlotItemInterface {
  id: ID!
  intensity: ProbabilisticBundleIntensity
  neonColor: String
  rewardDeliverableItem: RewardDeliverableItem
}

"""
A probabilistic bundle slot in game currency item
"""
type ProbabilisticBundleSlotInGameCurrencyItem implements ProbabilisticBundleSlotItemInterface {
  amount: Int!
  currency: InGameCurrency!
  id: ID!
  intensity: ProbabilisticBundleIntensity
  neonColor: String
}

interface ProbabilisticBundleSlotItemInterface {
  id: ID!
  intensity: ProbabilisticBundleIntensity
  neonColor: String
}

"""
A probabilistic bundle slot reward shop item
"""
type ProbabilisticBundleSlotRewardShopItem implements ProbabilisticBundleSlotItemInterface {
  id: ID!
  intensity: ProbabilisticBundleIntensity
  neonColor: String
  rewardShopItem: FootballRewardShopItem!
}

type ProbabilisticBundleSource implements HistoryTransactionInterface {
  date: ISO8601DateTime!
  description: String
  id: String!
  label: String!
  logoUrl: String
  quantityByFlavour: [PoolKeyShardsCount!]!
  totalQuantity: Int!
}

"""
Aggregated rewards overview
"""
type ProbabilisticBundlesRewardsOverview {
  rarities: [RarityCount!]!
}

"""
Probable pitchers of a given game week
"""
type ProbablePitchersForGameWeek {
  endDate: ISO8601DateTime!
  gameWeek: Int!
  longDisplayName: String!
  playerSlugs: [String!]!
  shortDisplayName: String!
  slug: String!
  startDate: ISO8601DateTime!
}

"""
A probable reward config of a PromotionalEvent
"""
type ProbableRewardConfig {
  id: String!
  probabilityBasisPoint: Int!
  rewardConfigs: [AnyRewardConfigInterface!]!
}

"""
A probable reward config  thresholds of a PromotionalEvent
"""
type ProgressionForRewardConfigThresholds {
  id: String!
  monetaryAmountScore: MonetaryAmount
  score: Float
  thresholds: [RewardConfigThreshold!]!
}

enum PromotionType {
  AIRDROP
  CARD_SHARD_THRESHOLDS
  CART_PURCHASE_REWARD
  COMPLETABLE
  DEPOSIT
  MARKET
  REACTIVATION
  SPECIAL_EDITION
  WHEEL_COST
  XP_COOLDOWN
}

"""
A promotional event completion for a user.
"""
type PromotionalEventCompletion implements Node {
  aasmState: PromotionalEventCompletionState!
  actualAmounts: MonetaryAmount!
  expiresAt: ISO8601DateTime!
  id: ID!
  promotionalEvent: DepositPromotionalEvent!
  rarity: Rarity
  targetAmount: MonetaryAmount!
  user: User!
}

enum PromotionalEventCompletionState {
  COMPLETED
  EXPIRED
  PENDING
}

interface PromotionalEventInterface {
  algoliaFilters: String!
  blogUrl: String
  description: String!
  eligibilityRules: EligibilityRules!
  endDate: ISO8601DateTime!
  id: ID!
  logoUrl: String
  marketBannerTitle: String!
  name: String!
  pictureUrl: String
  probableRewardConfigs: [ProbableRewardConfig!]!
  promotionType: PromotionType!
  rewardsProbabilisticBundleConfig: [ProbabilisticBundleConfig!]!
  slug: String!
  sport: Sport
  startDate: ISO8601DateTime!
  termsAndConditionsUrl: String
  title: String!
}

interface PromotionalEventsInterface {
  eligiblePromotionalEvents: [PromotionalEventInterface!]!
  eligiblePromotionalEventsProbableRewards: [ProbableRewardConfig!]!
  eligibleRewardsProbabilisticBundleConfigs: [ProbabilisticBundleConfig!]!
}

"""
Public user information
"""
interface PublicUserInfoInterface {
  active: Boolean
  anyPlayer: AnyPlayerInterface
  anyUserSportProfile(sport: Sport!, variant: UserSportProfileVariant): UserSportProfileInterface
  baseballUserProfile: BaseballUserSportProfile

  """
  Get a list of all blueprint cards
  """
  blueprintCards(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String
    age: Int
    assetIds: [String!]

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    classicOnly: Boolean
    customCardEditionName: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int
    inActiveCompetitions: [String!]
    inOrderOfRarities: Boolean @deprecated(reason: "Use `sorts` instead")
    inSeasonEligible: Boolean

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    owned: Boolean
    ownedByMe: Boolean
    ownedSinceAfter: ISO8601DateTime
    playerSlugs: [String!]

    """
    positions of the card capitalized
    """
    positions: [Position!]

    """
    rarities of the card in lowercase
    """
    rarities: [Rarity!]
    recentlyOwnedFirst: Boolean @deprecated(reason: "Use `sorts` instead")
    revealable: Boolean
    revealableFirst: Boolean @deprecated(reason: "Use `sorts` instead")
    seasonStartYears: [Int!]
    serialNumber: Int
    shirtNumber: Int
    slugs: [String!]
    sorts: [CardSort!]
    sport: Sport
    teamSlugs: [String!]
    withinDeckFirst: String
  ): AnyCardInterfaceConnection!

  """
  The `bought_primary_offers` field cannot be nested within a list.
  """
  boughtPrimaryOffers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    sortByEndDate: SortingOption
    sport: [Sport!]
  ): TokenPrimaryOfferConnection!

  """
  The `bought_single_sale_token_offers` field cannot be nested within a list.
  """
  boughtSingleSaleTokenOffers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    sortByEndDate: SortingOption
    sport: [Sport!]
  ): TokenOfferConnection!

  """
  The `buying_token_auctions` field cannot be nested within a list.
  """
  buyingTokenAuctions(
    """
    Returns auctions sorted by `startDate` in descending order when set.
    """
    newlyListed: Boolean
    sport: [Sport!]
  ): [TokenAuction!]!

  """
  The `card_collections` field cannot be nested within a list.
  """
  cardCollections(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int
    forCompetitions: [String!]
    inSeasonOnly: Boolean

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Full text search query to filter card collections
    """
    query: String

    """
    Default to playable rarities
    """
    rarities: [Rarity]
    seasonStartYears: [Int!]
    sortType: CardCollectionSortingOption = HIGHEST_SCORE
    sport: Sport
    startedOnly: Boolean
  ): CardCollectionConnection
  cardCounts(sport: Sport!): CardCount!

  """
  Get a list of all cards
  """
  cards(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String
    age: Int
    assetIds: [String!]

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    classicOnly: Boolean
    customCardEditionName: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int
    inActiveCompetitions: [String!]
    inOrderOfRarities: Boolean @deprecated(reason: "Use `sorts` instead")
    inSeasonEligible: Boolean

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    owned: Boolean
    ownedByMe: Boolean
    ownedSinceAfter: ISO8601DateTime
    playerSlugs: [String!]

    """
    positions of the card capitalized
    """
    positions: [Position!]

    """
    rarities of the card in lowercase
    """
    rarities: [Rarity!]
    recentlyOwnedFirst: Boolean @deprecated(reason: "Use `sorts` instead")
    revealable: Boolean
    revealableFirst: Boolean @deprecated(reason: "Use `sorts` instead")
    seasonStartYears: [Int!]
    serialNumber: Int
    shirtNumber: Int
    slugs: [String!]
    sorts: [CardSort!]
    sport: Sport
    teamSlugs: [String!]
    withinDeckFirst: String
  ): AnyCardInterfaceConnection!
  cardsCount: Int!
  createdAt: ISO8601DateTime!

  """
  The `ended_with_no_buyer_single_sale_token_offers` field cannot be nested within a list.
  """
  endedWithNoBuyerSingleSaleTokenOffers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    sortByEndDate: SortingOption
    sport: [Sport!]
  ): TokenOfferConnection!
  ethVaultId: Int
  ethereumAddress: EthereumAddress
  followed: EmailSubscription

  """
  The `followers` field cannot be nested within a list.
  """
  followers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserWithSubscriptionSlugConnection!
  followersCount: Int!

  """
  The `following` field cannot be nested within a list.
  """
  following(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserWithSubscriptionSlugConnection!
  followingCount: Int!

  """
  The `football_card_collections` field cannot be nested within a list.
  """
  footballCardCollections(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Full text search query to filter card collections
    """
    query: String

    """
    Default to playable rarities
    """
    rarities: [Rarity]
    seasonStartYears: [Int!]
    startedOnly: Boolean
  ): CardCollectionConnection @deprecated(reason: "Use cardCollections instead")
  footballRivalsManager: FootballRivalsManager! @deprecated(reason: "Not used anymore")
  footballUserProfile(variant: UserSportProfileVariant): FootballUserSportProfile

  """
  Typical number of hours the manager takes to answer trades
  """
  hoursToAnswerTrades: Int
  id: ID!

  """
  The `live_single_sale_token_offers` field cannot be nested within a list.
  """
  liveSingleSaleTokenOffers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    sortByEndDate: SortingOption
    sport: [Sport!]
  ): TokenOfferConnection!

  """
  The `lost_token_auctions` field cannot be nested within a list.
  """
  lostTokenAuctions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    sortByEndDate: SortingOption
    sport: [Sport!]
  ): TokenAuctionConnection!

  """
  The `manager_teams` field cannot be nested within a list.
  """
  managerTeams(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ManagerTeamConnection!
  nbaUserProfile: NBAUserSportProfile
  nickname: String!
  pictureUrl(derivative: String = "low_res"): String
  player: Player

  """
  The `podium_rankings` field cannot be nested within a list.
  """
  podiumRankings(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    ranking: Int
    so5LeaderboardType: So5LeaderboardType
    sport: Sport
  ): So5RankingConnection!

  """
  The `podiums` field cannot be nested within a list.
  """
  podiums(sport: Sport): [So5Podium!]!
  profile: UserProfile!

  """
  The `public_watchlists` field cannot be nested within a list.
  """
  publicWatchlists(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    sport: Sport!
  ): WatchlistConnection

  """
  The `recommended_managers` field cannot be nested within a list.
  """
  recommendedManagers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    sport: Sport
  ): UserConnection!

  """
  The `rewarded_rankings` field cannot be nested within a list.
  """
  rewardedRankings(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    so5LeaderboardType: So5LeaderboardType
    sport: Sport
  ): So5RankingConnection!

  """
  The `search_card_facet_values` field cannot be nested within a list.
  """
  searchCardFacetValues(advancedFilters: String, facetQuery: String!, field: String!, filters: [SearchFilterInput!], limit: Int, query: String, rarity: Rarity, refinements: [SearchRefinementInput!], sport: Sport): [SearchFacetValue!]!

  """
  The `search_cards` field cannot be nested within a list.
  """
  searchCards(
    advancedFilters: String
    duplicatedKey: String
    facets: [SearchFacetDefinitionInput!]
    filters: [SearchFilterInput!]
    page: Int
    pageSize: Int
    query: String

    """
    will only return common cards if rarity is set and equal  to common
    """
    rarity: Rarity
    refinements: [SearchRefinementInput!]
    sorts: [SearchSortInput!]
    sport: Sport
  ): SearchCards!

  """
  The `single_sale_token_offers` field cannot be nested within a list.
  """
  singleSaleTokenOffers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    sortByEndDate: SortingOption
    sport: [Sport!]
  ): TokenOfferConnection!
  slug: String!

  """
  The `so5_trophies_summary` field cannot be nested within a list.
  """
  so5TrophiesSummary(sport: Sport): TrophiesSummary!

  """
  The `sold_single_sale_token_offers` field cannot be nested within a list.
  """
  soldSingleSaleTokenOffers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    sortByEndDate: SortingOption
    sport: [Sport!]
  ): TokenOfferConnection!
  sorareAddress: EthereumAddress
  starkKey: String
  status: String

  """
  Set to true if the user deleted his account or was suspended
  """
  suspended: Boolean!

  """
  The `token_auctions` field cannot be nested within a list.
  """
  tokenAuctions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    sortByEndDate: SortingOption
    sport: [Sport!]
  ): TokenAuctionConnection!

  """
  The `trades` field cannot be nested within a list.
  """
  trades(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    sortByEndDate: SortingOption
    sport: [Sport!]
  ): TokenDealConnection!

  """
  The `trophies` field cannot be nested within a list.
  """
  trophies: [So5Trophies!]!
  userCardCollectionsPresence(rarity: Rarity!, sport: Sport!): Boolean!

  """
  The `won_token_auctions` field cannot be nested within a list.
  """
  wonTokenAuctions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    sortByEndDate: SortingOption
    sport: [Sport!]
  ): TokenAuctionConnection!
}

type Query {
  """
  Get latest announcements
  """
  announcements(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Filters announcements by ids
    """
    announcementIds: [String!]

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filters announcements by sports
    """
    sports: [Sport!]
  ): AnnouncementConnection!

  """
  Get a blockchain card.
  """
  anyCard(assetId: String, slug: String): AnyCardInterface!

  """
  Get a list of cards
  """
  anyCards(
    age: Int
    assetIds: [String!]
    classicOnly: Boolean
    customCardEditionName: String
    inActiveCompetitions: [String!]
    inOrderOfRarities: Boolean @deprecated(reason: "Use `sorts` instead")
    inSeasonEligible: Boolean
    owned: Boolean
    ownedByMe: Boolean
    ownedSinceAfter: ISO8601DateTime
    playerSlugs: [String!]

    """
    positions of the card capitalized
    """
    positions: [Position!]

    """
    rarities of the card in lowercase
    """
    rarities: [Rarity!]
    recentlyOwnedFirst: Boolean @deprecated(reason: "Use `sorts` instead")
    revealable: Boolean
    revealableFirst: Boolean @deprecated(reason: "Use `sorts` instead")
    seasonStartYears: [Int!]
    serialNumber: Int
    shirtNumber: Int
    slugs: [String!]
    sorts: [CardSort!]
    sport: Sport
    teamSlugs: [String!]
    withinDeckFirst: String
  ): [AnyCardInterface!]!

  """
  Get a sport game.
  """
  anyGame(id: ID!): AnyGameInterface!
  anyPlayer(providerId: ExternalProviderIdInput, slug: String): AnyPlayerInterface!
  availableTaskCampaigns: [TaskCampaign!]! @deprecated(reason: "Should retrieve campaigns from streaks instead")
  cardCollection(slug: String!): CardCollection!
  cardShardsPool(quality: CardQuality!, rarity: Rarity!, sport: Sport): [PlayerWithSupply!]!
  cardShardsPoolComputedAt(sport: Sport): ISO8601DateTime

  """
  Get a list of all cards
  """
  cardsWhere(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String
    age: Int
    assetIds: [String!]

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    classicOnly: Boolean
    customCardEditionName: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int
    inActiveCompetitions: [String!]
    inOrderOfRarities: Boolean @deprecated(reason: "Use `sorts` instead")
    inSeasonEligible: Boolean

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    owned: Boolean
    ownedByMe: Boolean
    ownedSinceAfter: ISO8601DateTime
    playerSlugs: [String!]

    """
    positions of the card capitalized
    """
    positions: [Position!]

    """
    rarities of the card in lowercase
    """
    rarities: [Rarity!]
    recentlyOwnedFirst: Boolean @deprecated(reason: "Use `sorts` instead")
    revealable: Boolean
    revealableFirst: Boolean @deprecated(reason: "Use `sorts` instead")
    seasonStartYears: [Int!]
    serialNumber: Int
    shirtNumber: Int
    slugs: [String!]
    sorts: [CardSort!]
    sport: Sport
    teamSlugs: [String!]
    withinDeckFirst: String
  ): AnyCardInterfaceConnection!
  commonPlayers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    playerSlugs: [String!]
    quality: CardQuality

    """
    Full text search query to filter common players
    """
    query: String
    sport: Sport = FOOTBALL
  ): CommonPlayerConnection!

  """
  Get sport games for a window of maximum 2 days.
  """
  competitionGames(fromDate: ISO8601DateTime, sport: Sport!, toDate: ISO8601DateTime): [CompetitionGames!]!

  """
  Get config
  """
  config: Config!

  """
  Get a list of countries
  """
  countries(slugs: [String!]!): [Country!]!

  """
  Get a country
  """
  country(slug: String!): Country!

  """
  Get the current block height of Ethereum blockchain
  """
  currentBlockHeight: Int!

  """
  Fetch the current user.
  """
  currentUser: CurrentUser

  """
  Get a deck of cards
  """
  deck(slug: String!): Deck!

  """
  Get a list of cards owned by an ethereum account
  """
  ethereumCards(address: String!): [AnyCardInterface!]!
  football: FootballRoot!
  forYou: ForYouRoot!

  """
  Get a potential referrer for a given name
  """
  fullReferrer(name: String!): Referrer
  isNicknameAvailable(nickname: String!): Boolean!
  mangopay: MangopayRoot!
  market: MarketRoot!

  """
  Get the next batch nonce for a given address
  """
  nextRelayBatchNonce(address: String!): Int!

  """
  Fetches an object given its ID.
  """
  node(
    """
    ID of the object.
    """
    id: ID!
  ): Node

  """
  Fetches a list of objects given a list of IDs.
  """
  nodes(
    """
    IDs of the objects.
    """
    ids: [ID!]!
  ): [Node]!

  """
  Lists every sections of notifications
  """
  notificationSections(forSettings: Boolean): [NotificationSection!]!

  """
  Lists subsections of a notification section
  """
  notificationSubsections(
    """
    The section to list subsections for
    """
    sectionSlug: String!
  ): [NotificationSubsection!]!

  """
  Get an OAuth application from the client id
  """
  oauthApplication(clientId: String!): OAuthApplication!
  payments: PaymentRoot!
  players(providerIds: [ExternalProviderIdInput!], slugs: [String!]): [AnyPlayerInterface!]!
  probabilisticBundle(id: ID!): ProbabilisticBundle!
  probabilisticBundleConfig(id: ID!): ProbabilisticBundleConfig!

  """
  Returns a referral leaderboard for the specified referral special event
  """
  referralLeaderboard(
    """
    Identifier of the referral special event whose leaderboard is to be returned
    """
    referralSpecialEventId: String!
  ): ReferralLeaderboard!

  """
  Get a potential referrer for a given name
  """
  referrer(name: String!): String
  revealableCardCampaign(slug: String!): RevealableCardCampaign!

  """
  Get information needed to screenshot a card
  """
  screenshottableCard(id: ID!, serialNumber: Int): ScreenshottableCard!

  """
  The `search_card_facet_values` field cannot be nested within a list.
  """
  searchCardFacetValues(advancedFilters: String, facetQuery: String!, field: String!, filters: [SearchFilterInput!], limit: Int, onSaleOnly: Boolean, query: String, refinements: [SearchRefinementInput!]): [SearchFacetValue!]! @deprecated(reason: "search has been decommissioned. This field returns empty results.")

  """
  The `search_cards` field cannot be nested within a list.
  """
  searchCards(advancedFilters: String, facets: [SearchFacetDefinitionInput!], filters: [SearchFilterInput!], onSaleOnly: Boolean, page: Int, pageSize: Int, query: String, refinements: [SearchRefinementInput!], sorts: [SearchSortInput!]): SearchCardHits! @deprecated(reason: "search has been decommissioned. This field returns empty results.")

  """
  The `search_grouped_cards` field cannot be nested within a list.
  """
  searchGroupedCards(advancedFilters: String, cheapestWithinGroup: Boolean, facets: [SearchFacetDefinitionInput!], filters: [SearchFilterInput!], groupBy: [String!]!, groupLimit: Int = 1, onSaleOnly: Boolean, page: Int, pageSize: Int, query: String!, refinements: [SearchRefinementInput!], sorts: [SearchSortInput!]): SearchGroupedCards! @deprecated(reason: "search has been decommissioned. This field returns empty results.")

  """
  The `search_player_facet_values` field cannot be nested within a list.
  """
  searchPlayerFacetValues(advancedFilters: String, facetQuery: String!, field: String!, filters: [SearchFilterInput!], limit: Int, onlyFollowed: Boolean, query: String, refinements: [SearchRefinementInput!]): [SearchFacetValue!]!

  """
  The `search_players` field cannot be nested within a list.
  """
  searchPlayers(advancedFilters: String, facets: [SearchFacetDefinitionInput!], filters: [SearchFilterInput!], onlyFollowed: Boolean, page: Int, pageSize: Int, query: String, refinements: [SearchRefinementInput!], so5LeaderboardSlug: String, sorts: [SearchSortInput!]): SearchPlayers!

  """
  Get a season
  """
  season(startYear: Int!): Season!

  """
  Get paginated available shop items
  """
  shopItems(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    sortType: ShopItemsSortInput
    sport: Sport = FOOTBALL
    types: [ShopItemType!]
    unlockedOnly: Boolean
  ): ClubShopItemConnection!
  so5: So5Root!

  """
  Get a Starkware account.
  """
  starkwareAccount(starkKey: String!): StarkwareAccount!
  taskCampaignsHomepage: TaskCampaignsHomepage!
  team(slug: String!): TeamInterface!
  teams(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    sport: Sport = FOOTBALL
  ): TeamInterfaceConnection!
  tokens: TokenRoot!

  """
  Get a user.
  """
  user(slug: String!): User!

  """
  Get a user by ID.
  """
  userById(id: String!): User!
  userCardCollection(id: String!): UserCardCollection!

  """
  Get a UserGroup
  """
  userGroup(joinSecret: String, slug: String): UserGroupInterface!

  """
  Get a list of users.
  """
  users(slugs: [String!]!): [User!]!
  usersPaginated(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int
    followingOnly: Boolean

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    query: String
  ): UserConnection!
}

type RaffleShopItem implements Node & ShopItemInterface {
  cardCollectionRequirements: [CardCollectionRequirement!]!
  createdAt: ISO8601DateTime!
  currentStockCount: Int!
  description: String
  disabled: Boolean!
  expirationDate: ISO8601DateTime
  id: ID!
  infoLink: String
  initialStockCount: Int!
  limitPerUser: Int!
  myAvailableTotalPurchasesCount: Int!
  myAvailableUserShopItems: [UserShopItem!]
  myBalance: Int!
  myLimitResetAt: ISO8601DateTime
  myPurchasesCount: Int!
  name: String!
  pictureUrl(derivative: ShopItemDerivative = TINIFIED): String!
  position: ShopItemType!
  price: Int!
  requirementsRulesLink: String
  salePrice: Int
  seenInManagerId: Boolean!
  shopItemsRequired: [ShopItem!]!
  threeDimensionalAssetUrl(
    """
    Defaults to GLB
    """
    format: ShopItemThreeDimensionalAssetFormat
  ): String
  unlocked: Boolean!
}

type Range {
  """
  Max price, in wei.
  """
  max: WeiAmount!

  """
  Min price, in wei.
  """
  min: WeiAmount!
}

input RangeInput {
  max: Int
  min: Int
}

enum RankingRatioRange {
  LOW
  MEDIUM
  TOP
}

enum Rarity {
  common
  custom_series
  limited
  rare
  super_rare
  unique
}

type RarityCount {
  count: Int!
  rarity: Rarity!
}

"""
A rarity and its associated reward configs
"""
type RarityRewardConfigs {
  rarity: Rarity
  rewardConfigs: [AnyRewardConfigInterface!]!
}

type Rates {
  """
  Conversion rate to Cents (EUR)
  """
  eurCents: Int!

  """
  Conversion rate to Cents (EUR)
  """
  eurMinor: Int! @deprecated(reason: "Use eurCents instead")

  """
  Conversion rate to Cents (GBP)
  """
  gbpCents: Int!

  """
  Conversion rate to Pence (GBP)
  """
  gbpMinor: Int! @deprecated(reason: "Use gbpCents instead")

  """
  Conversion rate to Cents (USD)
  """
  usdCents: Int!

  """
  Conversion rate to Pennies (USD)
  """
  usdMinor: Int! @deprecated(reason: "Use usdCents instead")
}

enum RecommendationEngine {
  BEST_F2P
  HOT_STREAK
  POPULAR
  POPULAR_OR_HOT_STREAK
}

"""
A Conversion Credit Task with its player recommendation
"""
type RecommendedConversionCreditTask implements ManagerTaskInterface & TaskInterface {
  aasmState: ManagerProgressionTaskState!
  alternativeRewardConfigs: [AlternativeRewardConfig!]
  cards: [AnyCardInterface!]!
  claimedAt: ISO8601DateTime
  color: String
  completedAt: ISO8601DateTime
  declarative: Boolean! @deprecated(reason: "Not used anymore")
  description: String!
  genre: TaskGenre!
  group: TaskGroup
  iconUrl: String
  id: String!
  name: ManagerProgressionTaskSlug!
  periodicity: ManagerTaskPeriodicity
  possibleRewardConfigsIconUrl: String
  probabilisticBundles: [ProbabilisticBundle!]!
  progress: Int!
  rarity: Rarity
  recommendedBy: String
  recommendedByPictureUrl: String!

  """
  The `recommended_players` field cannot be nested within a list.
  """
  recommendedPlayers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): AnyPlayerInterfaceConnection!
  rewardConfigs(mergedConfigsByType: Boolean = false): [AnyRewardConfigInterface!]!
  target: Int!
  taskConfigSlug: String!
  templateIconUrl: String!
  title: String!

  """
  The `top_recommended_player` field cannot be nested within a list.
  """
  topRecommendedPlayer: AnyPlayerInterface

  """
  The `top_recommended_so5_appearance` field cannot be nested within a list.
  """
  topRecommendedSo5Appearance: So5Appearance
}

"""
A referral
"""
type Referral implements Node {
  aasmState: String!
  completedAt: ISO8601DateTime
  expirationDate: ISO8601DateTime!
  id: ID!
  referee: User!
  refereeCardsBoughtAtAuctionCount: Int!
  refereeConfirmedAt: ISO8601DateTime
  refereeIdentification: String
  refereeInvitationSentAt: ISO8601DateTime
  refereeSportCardsBoughtFromPrimaryMarketCount(sport: Sport!): Int!
  referrer: Referrer!
  referrerRewards: [ReferralReward!]!
  sport: Sport
  state: ReferralState!
}

type ReferralChallengeStats {
  completed: Int!
  failed: Int!
  inProgress: Int!
}

type ReferralConversionCreditConfig {
  maxDiscount: MonetaryAmount!
  percentageDiscountBasisPoints: Int!
}

type ReferralLeaderboard {
  id: String!
  lastRefreshedAt: ISO8601DateTime
  rankings(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ReferralLeaderboardRankingConnection!
}

type ReferralLeaderboardRanking {
  id: String!
  ranking: Int!
  score: Int!
  scoreReachedAt: ISO8601DateTime!
  user: User!
}

"""
The connection type for ReferralLeaderboardRanking.
"""
type ReferralLeaderboardRankingConnection {
  """
  A list of edges.
  """
  edges: [ReferralLeaderboardRankingEdge!]!

  """
  A list of nodes.
  """
  nodes: [ReferralLeaderboardRanking!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type ReferralLeaderboardRankingEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ReferralLeaderboardRanking
}

type ReferralPaginated {
  currentPage: Int!
  nodes: [Referral!]!
  pages: Int!
  referrals: [Referral!]!
  totalCount: Int!
}

"""
Referral configuration object
"""
type ReferralProgramConfig {
  id: ID!
  maxDiscount: MonetaryAmount!
  nature: ReferralProgramNature!
  numberCardsToBuy: Int!
  percentageDiscountBasisPoints: Int!
}

enum ReferralProgramNature {
  POWER_HOUR
  REGULAR
}

"""
A referral reward
"""
type ReferralReward implements Node {
  anyCard: AnyCardInterface
  claimableAt: ISO8601DateTime
  claimableState: ReferralRewardState!
  conversionCredit: ConversionCredit
  conversionCreditId: String
  id: ID!
  shippingState: ShippingState!
}

"""
The connection type for ReferralReward.
"""
type ReferralRewardConnection {
  """
  A list of edges.
  """
  edges: [ReferralRewardEdge!]!
  hasAny: Boolean!

  """
  A list of nodes.
  """
  nodes: [ReferralReward!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ReferralRewardEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ReferralReward
}

"""
A user notification regarding a referral reward
"""
type ReferralRewardNotification implements Node & NotificationInterface {
  body: String!
  createdAt: ISO8601DateTime!
  deeplinkUrl: String!
  iconUrl: String!
  id: ID!
  important: Boolean!
  markdownBody: String!
  name: String!
  pictureUrl: String
  read: Boolean!
  referralReward: ReferralReward!
  sport: SportOrShared
  title: String!
  user: CurrentUser!
}

enum ReferralRewardState {
  CLAIMABLE
  CLAIMED
  NOT_CLAIMABLE_YET
  NOT_CLAIMABLE_YET_1_GW_MISSING
  NOT_CLAIMABLE_YET_2_GW_MISSING
}

type ReferralSpecialEvent {
  challenges: [ReferralSpecialEventChallenge!]!
  config: ReferralConversionCreditConfig
  id: String!
  leaderboard: ReferralLeaderboard!
  stats: ReferralChallengeStats!
  tile: ReferralTile!
}

type ReferralSpecialEventChallenge {
  description: String!
  id: String!
  stats: ReferralChallengeStats!
}

enum ReferralState {
  ALL
  BLOCKED
  COMPLETED
  EXPIRED
  IN_PROGRESS
  PENDING_REFEREE_CONFIRMATION
  PENDING_REVIEW
}

"""
A referral tile
"""
type ReferralTile {
  backgroundUrl: String!
  congratsMessage: String!
  description: String!
  dialogBackgroundUrl: String
  iconUrl: String!
  id: String!
  title: String!
}

"""
Object that can be a referrer
"""
union Referrer = User | UserSource

"""
A remindable element
"""
union Remindable = TokenAuction

"""
A user notification regarding an reminder
"""
type ReminderNotification implements Node & NotificationInterface {
  body: String!
  createdAt: ISO8601DateTime!
  deeplinkUrl: String!
  iconUrl: String!
  id: ID!
  important: Boolean!
  markdownBody: String!
  name: String!
  pictureUrl: String
  read: Boolean!
  remindable: Remindable!
  similar: Remindable
  sport: SportOrShared
  title: String!
  user: CurrentUser!
}

"""
An authorization to move assets
"""
union Request = BaseWithdrawalAuthorizationRequest | CheckoutCreditCardAuthorizationRequest | EthereumBankTransferAuthorizationRequest | MangopayApplePayAuthorizationRequest | MangopayCreditCardAuthorizationRequest | MangopayKlarnaAuthorizationRequest | MangopayWalletTransferAuthorizationRequest | PaypalAuthorizationRequest | StarkexLimitOrderAuthorizationRequest | StarkexTransferAuthorizationRequest | StarkexV6TokenTransferAuthorizationRequest | StripeCreditCardAuthorizationRequest

"""
The cost in in-game currency or essence to reveal a property on pulled cards
"""
type RevealCost {
  amountInCurrency: Int!
  amountInShards: Int!
  currency: InGameCurrency!
  propertyName: RevealableProperty!
}

"""
A configuration of revealable card campaign
"""
type RevealableCardCampaign implements Node {
  active: Boolean!
  backgroundImagePortraitUrl: String
  blueprintCardEditions: [String!]!
  cardRotationY: Int!
  classicCardEditions: [String!]!
  environmentPictureUrl: String
  id: ID!
  logoUrl: String

  """
  Get a list of all blueprint cards
  """
  myBlueprintCards(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String
    age: Int
    assetIds: [String!]

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    classicOnly: Boolean
    customCardEditionName: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int
    inActiveCompetitions: [String!]
    inOrderOfRarities: Boolean @deprecated(reason: "Use `sorts` instead")
    inSeasonEligible: Boolean

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    owned: Boolean
    ownedByMe: Boolean
    ownedSinceAfter: ISO8601DateTime
    playerSlugs: [String!]

    """
    positions of the card capitalized
    """
    positions: [Position!]

    """
    rarities of the card in lowercase
    """
    rarities: [Rarity!]
    recentlyOwnedFirst: Boolean @deprecated(reason: "Use `sorts` instead")
    revealable: Boolean
    revealableFirst: Boolean @deprecated(reason: "Use `sorts` instead")
    seasonStartYears: [Int!]
    serialNumber: Int
    shirtNumber: Int
    slugs: [String!]
    sorts: [CardSort!]
    sport: Sport
    teamSlugs: [String!]
    withinDeckFirst: String
  ): AnyCardInterfaceConnection!
  myRevealedCardsSummary(seasonStartYear: Int, sport: Sport!): RevealedCardsSummary
  name: String!
  slug: String!
  specialCardEditions: [String!]!
}

type RevealableCardConfig {
  blueprintEdition: String!
  revealedEditionsConfig: [RevealedEditionsConfig!]!
}

enum RevealableProperty {
  COMPETITION
  COUNTRY
  FIFTY_FIFTY
}

"""
Revealed cards summary
"""
type RevealedCardsSummary {
  cards(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): AnyCardInterfaceConnection!
  id: String!
  season: Season
  sport: Sport!
  totalCards: Int!
  totalSpecialEditionCards: Int!
}

type RevealedEditionsConfig {
  edition: [String!]!
  odds: Float!
  oddsPercent: Float!
}

type RewardBoost {
  boostLevel: BoostLevel!
  maximumBoostLevel: BoostLevel!
  nextBoostLevel: BoostLevel
  points: Int!
}

"""
A rewarded card
"""
type RewardCard implements Node {
  anyCard: AnyCardInterface
  backPictureUrl: String
  id: ID!
  pictureUrl: String
  quality: String
  so5Reward: So5Reward
  upgradedQuality: String
}

"""
A reward config
"""
type RewardConfig {
  arenaTicketAmount: Int
  cardShards: [CardShardsReward!]
  cards: [So5RewardCardConfig!]!
  coinAmount: Int
  probabilisticBundleConfiguration: ProbabilisticBundleConfig
}

enum RewardConfigRarity {
  common
  custom_series
  limited
  rare
  super_rare
  unique
  unknown_rarity
}

type RewardConfigThreshold {
  monetaryThreshold: MonetaryAmount
  probableRewards: [ProbableRewardConfig!]!
  threshold: Float
}

type RewardDeliverableItem {
  deliverableItem: DeliverableItemInterface!
  quantity: Int!
}

"""
RewardMultiplierConfiguration is the graphQL Type for a leaderboard reward multiplier configuration.
"""
type RewardMultiplierConfiguration {
  cardBoosts: [CardBoostConfig!]!
}

enum RewardState {
  CLAIMED
  UNCLAIMED
}

"""
Aggregated rewards overview
"""
type RewardsOverview {
  cards: Json!
  deliverableItems: DeliverableItemsRewardsOverview!
  experiences: Json
  experiencesDetails: [So5RewardExperience!]!
  prizePool: Float!
  prizePoolCurrency: PaymentCurrency!
  probabilisticBundles: ProbabilisticBundlesRewardsOverview!
}

type RivalryStatus {
  color: String! @deprecated(reason: "Not used anymore")
  emoji: String! @deprecated(reason: "Not used anymore")
  title: String! @deprecated(reason: "Not used anymore")
}

type RivalsGameEndedActivity implements ActivitiesInterface & Node {
  celebratable: Boolean!
  createdAt: ISO8601DateTime!
  game: FootballRivalsGame! @deprecated(reason: "Not used anymore")
  id: ID!
  reactions: [ActivityReactionType!]!
  topScore: Float! @deprecated(reason: "Not used anymore")
  topScorer: User! @deprecated(reason: "Not used anymore")
}

type RivalsGameStartedActivity implements ActivitiesInterface & Node {
  celebratable: Boolean!
  createdAt: ISO8601DateTime!
  game: FootballRivalsGame! @deprecated(reason: "Not used anymore")
  id: ID!
  reactions: [ActivityReactionType!]!
}

"""
A Rivals Squad membership
"""
type RivalsSquadMembership implements Node & UserGroupMembershipInterface {
  administrator: Boolean!
  createdAt: ISO8601DateTime!
  id: ID!
  ranking: Int
  score: Int!
  user: User!
}

"""
A Rivals User Group
"""
type RivalsUserGroup implements Node & UserGroupInterface {
  administrator: User
  affiliate: Boolean! @deprecated(reason: "Not used anymore")
  affiliateLinkTitle: String @deprecated(reason: "Not used anymore")
  affiliateLinkUrl: String @deprecated(reason: "Not used anymore")
  canJoin: Validity!
  conversionCredit: ConversionCredit
  conversionCreditCampaign: ConversionCreditCampaign
  description: String
  displayName: String!
  featured: Boolean! @deprecated(reason: "Not used anymore")
  id: ID!
  joinDisabled: Boolean!
  joinRules: So5Rules!
  joinSecret: String!

  """
  The `live_games` field cannot be nested within a list.
  """
  liveGames: [FootballRivalsGame!]! @deprecated(reason: "Not used anymore")
  logo: SkinShopItem
  membership(userSlug: String!): UserGroupMembershipInterface
  memberships: [UserGroupMembershipInterface!]!
  membershipsCount: Int!
  membershipsPaginated(page: Int, pageSize: Int): So5UserGroupMembershipsPaginated!
  myMembership: UserGroupMembershipInterface

  """
  The `past_games` field cannot be nested within a list.
  """
  pastGames(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): FootballRivalsGameConnection! @deprecated(reason: "Not used anymore")
  pictureUrl: String
  publiclyAccessible: Boolean!
  rewardsConfig: LeaderboardRewardsConfig!
  slug: String!
  socialPictureFingerprint(myLineupId: ID, userSlug: String): String! @deprecated(reason: "Not used anymore")
  socialPictureUrls(myLineupId: ID, userSlug: String): SocialPictureDerivative! @deprecated(reason: "Not used anymore")

  """
  The `starting_games` field cannot be nested within a list.
  """
  startingGames: [FootballRivalsGame!]! @deprecated(reason: "Not used anymore")
  status: UserGroupStatus!
  totalRewardConfigs(highestConfigByType: Boolean): [AnyRewardConfigInterface!]!

  """
  High level overview of the rewards
  """
  totalRewards: RewardsOverview!
  tournament: RivalsUserGroupTournament! @deprecated(reason: "Not used anymore")
  tournamentRanking: Int @deprecated(reason: "Not used anymore")
  tournamentScore: Int! @deprecated(reason: "Not used anymore")

  """
  The `upcoming_games` field cannot be nested within a list.
  """
  upcomingGames(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    excludingStarting: Boolean

    """
    Returns the first _n_ elements from the list.
    """
    first: Int
    fromDate: ISO8601DateTime

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    toDate: ISO8601DateTime
  ): FootballRivalsGameConnection! @deprecated(reason: "Not used anymore")
}

"""
The connection type for RivalsUserGroup.
"""
type RivalsUserGroupConnection {
  """
  A list of edges.
  """
  edges: [RivalsUserGroupEdge!]!
  hasAny: Boolean!

  """
  A list of nodes.
  """
  nodes: [RivalsUserGroup!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type RivalsUserGroupEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: RivalsUserGroup
}

"""
A Rivals User Group membership
"""
type RivalsUserGroupMembership implements Node & UserGroupMembershipInterface {
  administrator: Boolean!
  createdAt: ISO8601DateTime!
  id: ID!
  liveRanking: FootballRivalsPrivateRanking @deprecated(reason: "Not used anymore")
  ranking: Int
  rankingHistory(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): FootballRivalsPrivateRankingConnection! @deprecated(reason: "Not used anymore")
  score: Int!
  user: User!
}

"""
A Rivals User Group Tournament
"""
type RivalsUserGroupTournament implements Node {
  """
  The `affiliate_user_groups` field cannot be nested within a list.
  """
  affiliateUserGroups(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    featured: Boolean = false

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RivalsUserGroupConnection! @deprecated(reason: "Not used anymore")
  id: ID!

  """
  The `live_games` field cannot be nested within a list.
  """
  liveGames: [FootballRivalsGame!]! @deprecated(reason: "Not used anymore")

  """
  The `my_featured_games` field cannot be nested within a list.
  """
  myFeaturedGames: [FootballRivalsGame!]! @deprecated(reason: "Not used anymore")

  """
  The `next_game` field cannot be nested within a list.
  """
  nextGame: FootballRivalsGame @deprecated(reason: "Not used anymore")
  rewardsConfig: LeaderboardRewardsConfig! @deprecated(reason: "Not used anymore")

  """
  The `user_groups` field cannot be nested within a list.
  """
  userGroups(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RivalsUserGroupConnection! @deprecated(reason: "Not used anymore")
}

"""
RoomsConfig is the graphQL Type for a rooms configuration.
"""
type RoomsConfig {
  boostedRewardsRoomsName: String
  boostedRewardsRoomsSo5RewardConfigs: [So5RewardConfig!]
  roomsSize: Int!
  roomsWithBoostedRewardsBasisPoint: Int
  roomsWithBoostedRewardsCount: Int
  slug: String!
}

enum SCAEnrollmentState {
  SCA_ENROLLED
  SCA_NOT_ENROLLED
  SCA_PENDING_CONFIRMATION
}

"""
A user notification regarding a Sale
"""
type SaleNotification implements Node & NotificationInterface {
  amounts: MonetaryAmount
  anyCard: AnyCardInterface
  body: String!
  buyer: User
  createdAt: ISO8601DateTime!
  deeplinkUrl: String!
  iconUrl: String!
  id: ID!
  important: Boolean!
  markdownBody: String!
  name: String!
  pictureUrl: String
  priceInWei: String!
  read: Boolean!
  seller: User!
  sport: SportOrShared
  title: String!
  user: CurrentUser!
}

enum ScoreStatus {
  DID_NOT_PLAY
  FINAL
  NO_GAME
  PENDING
  REVIEWING
}

"""
A So5 Scoring Matrix
"""
type ScoringMatrix implements Node {
  customMatrix: JSON
  id: ID!
  statCustomScorings: [StatCustomScoring!]!
}

"""
Information needed for a card screenshot
"""
type ScreenshottableCard {
  age: Int!
  baseballPositions: [BaseballPosition!]
  birthPlaceCountry: String!
  cardEditionName: String!
  cardSample: CardSample!
  cropped: Boolean!
  footballPosition: FootballPosition
  layout: CardLayout!
  locale: String!
  nbaPositions: [NBAPosition!]
  playerDisplayName: String!
  playerPicture: SeasonPicture
  rarity: Rarity!
  rookie: Boolean!
  season: Int!
  serialNumber: Int!
  shirtNumber: Int!
  singleCivilYear: Boolean!
  sport: Sport!
  teamPictureUrl(derivative: String = "avatar"): String
  teamShortName: String!
  teamSlug: String!
  threeDimensionalLayout: ThreeDimensionalCardLayout!
}

"""
Sealing configuration object
"""
type SealingConfig {
  fullRarityVaultMatrix(rarity: Rarity!, sport: Sport!): [BoostLevel!]!
  unsealCooldownDays: Int!
  unsealPeriodDays: Int!
  unsealsPerPeriod: Int!
}

type SearchCardHit {
  card: AnyCardInterface
  rarity: Rarity!
  sale: SearchCardSale
  season: String!
  slug: String!
}

"""
Card search results enriched with result from search engine
"""
type SearchCardHits implements SearchInterface {
  facets: [SearchFacet!]!
  hitIds: [String!]!
  hits: [SearchCardHit!]!
  nbHits: Int!
  nbPages: Int!
  page: Int!
  processingTimeMs: SearchProcessingTime!
}

type SearchCardSale {
  distinctKey: String
  price: Int!
  type: String!
}

"""
Card search results
"""
type SearchCards implements SearchInterface {
  facets: [SearchFacet!]!
  hitIds: [String!]!
  hits: [AnyCardInterface!]!
  nbHits: Int!
  nbPages: Int!
  page: Int!
  processingTimeMs: SearchProcessingTime!
}

type SearchFacet {
  field: String!
  max: SearchFacetValue
  min: SearchFacetValue
  values: [SearchFacetValue!]!
}

input SearchFacetDefinitionInput {
  field: String!
  limit: Int!
  type: SearchFaceting!
}

type SearchFacetValue {
  count: Int!
  value: String!
}

enum SearchFaceting {
  CONJUNCTIVE
  DISJUNCTIVE
}

input SearchFilterInput {
  field: String!
  operator: SearchOperator!
  values: [SearchValueInput!]!
}

type SearchGroup {
  cards: [AnyCardInterface!]!
  group: [SearchGroupValue!]!
  hitIds: [String!]!
  hits: [SearchCardHit!]!
  nbHits: Int!
}

type SearchGroupValue {
  key: String!
  value: String!
}

type SearchGroupedCards implements SearchInterface {
  facets: [SearchFacet!]!
  groups: [SearchGroup!]!
  hitIds: [String!]!
  nbHits: Int!
  nbPages: Int!
  page: Int!
  processingTimeMs: SearchProcessingTime!
}

interface SearchInterface {
  facets: [SearchFacet!]!
  hitIds: [String!]!
  nbHits: Int!
  nbPages: Int!
  page: Int!
  processingTimeMs: SearchProcessingTime!
}

enum SearchOperator {
  EQUAL
  GREATER_THAN
  GREATER_THAN_OR_EQUAL
  LESS_THAN
  LESS_THAN_OR_EQUAL
  NOT_EQUAL
}

"""
Player search results
"""
type SearchPlayers implements SearchInterface {
  commonPlayerHits: [CommonPlayer!]!
  facets: [SearchFacet!]!
  hitIds: [String!]!
  hits: [ComposeTeamBenchObjectInterface!]!
  nbHits: Int!
  nbPages: Int!
  page: Int!
  processingTimeMs: SearchProcessingTime!
}

type SearchProcessingTime {
  facetValuesFts: Int!
  faceting: Int!
  filtering: Int!
  fts: Int!
  sorting: Int!
  total: Int!
}

input SearchRefinementInput {
  field: String!
  operator: SearchOperator!
  values: [SearchValueInput!]!
}

enum SearchSortDirection {
  ASC
  DESC
}

input SearchSortInput {
  direction: SearchSortDirection!
  field: String!
}

input SearchValueInput {
  booleanValue: Boolean
  floatValue: Float
  integerValue: Int
  nullValue: Boolean
  stringValue: String
}

"""
A football season
"""
type Season implements Node {
  """
  The `any_cards` field cannot be nested within a list.
  """
  anyCards(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String
    age: Int
    assetIds: [String!]

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    classicOnly: Boolean
    customCardEditionName: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int
    inActiveCompetitions: [String!]
    inOrderOfRarities: Boolean @deprecated(reason: "Use `sorts` instead")
    inSeasonEligible: Boolean

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    owned: Boolean
    ownedByMe: Boolean
    ownedSinceAfter: ISO8601DateTime
    playerSlugs: [String!]

    """
    positions of the card capitalized
    """
    positions: [Position!]

    """
    rarities of the card in lowercase
    """
    rarities: [Rarity!]
    recentlyOwnedFirst: Boolean @deprecated(reason: "Use `sorts` instead")
    revealable: Boolean
    revealableFirst: Boolean @deprecated(reason: "Use `sorts` instead")
    seasonStartYears: [Int!]
    serialNumber: Int
    shirtNumber: Int
    slugs: [String!]
    sorts: [CardSort!]
    sport: Sport
    teamSlugs: [String!]
    withinDeckFirst: String
  ): AnyCardInterfaceConnection!
  id: ID!
  name: String!
  startYear: Int!
}

"""
The season bonus rule of a So5Leaderboard
"""
type SeasonBonus {
  max: Int
  min: Int
  season: Season
  teams: [Club!]!
}

type SeasonCount {
  count: Int!
  season: Season!
  snapshotted: Boolean!
}

enum SeasonEligibility {
  CLASSIC
  IN_SEASON
}

"""
A player season picture
"""
type SeasonPicture implements Node {
  backgroundUrl: String
  chinY: Float
  chinYTarget: Int
  eyeLeft: FaceLandmark!
  eyeRight: FaceLandmark!
  height: Int!
  id: ID!
  kit: String
  nose: FaceLandmark!
  offsetX: Int!
  offsetY: Int!
  pictureUrl(derivative: String = "tinified"): String
  positioning: PicturePositioning!
  width: Int!
  zoom: Float
}

enum SettlementDelayReason {
  """
  The token was bought using Apple IAP
  """
  APPLE_IAP

  """
  A conversion credit was used to buy the token
  """
  CONVERSION_CREDIT_USED

  """
  The token was bought using Google IAP
  """
  GOOGLE_IAP

  """
  The token was bought using Klarna
  """
  KLARNA
}

enum ShippingState {
  CLAIMED
  READY_TO_CLAIM
}

enum ShirtSize {
  L
  M
  S
  XL
  XS
  XXL
}

"""
A shop item to customize a user gallery
"""
type ShopItem implements Node & ShopItemInterface {
  cardCollectionRequirements: [CardCollectionRequirement!]!
  color: String
  createdAt: ISO8601DateTime!
  description: String
  disabled: Boolean!
  expirationDate: ISO8601DateTime
  id: ID!
  infoLink: String
  limitPerUser: Int!
  myAvailableTotalPurchasesCount: Int!
  myAvailableUserShopItems: [UserShopItem!]
  myBalance: Int!
  myLimitResetAt: ISO8601DateTime
  myPurchasesCount: Int!
  name: String!
  pictureUrl(derivative: ShopItemDerivative = TINIFIED): String!
  position: ShopItemType!
  price: Int!
  requirementsRulesLink: String
  salePrice: Int
  seenInManagerId: Boolean!
  shopItemsRequired: [ShopItem!]!
  threeDimensionalAssetUrl(
    """
    Defaults to GLB
    """
    format: ShopItemThreeDimensionalAssetFormat
  ): String
  unlocked: Boolean!
}

enum ShopItemDerivative {
  MOBILE
  TINIFIED
}

interface ShopItemInterface {
  cardCollectionRequirements: [CardCollectionRequirement!]!
  createdAt: ISO8601DateTime!
  description: String
  disabled: Boolean!
  expirationDate: ISO8601DateTime
  id: ID!
  infoLink: String
  limitPerUser: Int!
  myAvailableTotalPurchasesCount: Int!
  myAvailableUserShopItems: [UserShopItem!]
  myBalance: Int!
  myLimitResetAt: ISO8601DateTime
  myPurchasesCount: Int!
  name: String!
  pictureUrl(derivative: ShopItemDerivative = TINIFIED): String!
  position: ShopItemType!
  price: Int!
  requirementsRulesLink: String
  salePrice: Int
  seenInManagerId: Boolean!
  shopItemsRequired: [ShopItem!]!
  threeDimensionalAssetUrl(
    """
    Defaults to GLB
    """
    format: ShopItemThreeDimensionalAssetFormat
  ): String
  unlocked: Boolean!
}

"""
A user notification regarding a Shop Item
"""
type ShopItemNotification implements Node & NotificationInterface {
  body: String!
  createdAt: ISO8601DateTime!
  deeplinkUrl: String!
  iconUrl: String!
  id: ID!
  important: Boolean!
  markdownBody: String!
  name: String!
  pictureUrl: String
  read: Boolean!
  shopItem: ShopItem!
  sport: SportOrShared
  title: String!
  user: CurrentUser!
}

"""
A Shop Item Reward
"""
type ShopItemReward implements AnyRewardInterface & Node {
  aasmState: RewardState!
  config: AnyRewardConfigInterface!
  id: ID!
  shopItem: ShopItem!
}

"""
A Shop Item Reward Config
"""
type ShopItemRewardConfig implements AnyRewardConfigInterface {
  boostedRewardConfigs: [AnyRewardConfigInterface!]
  id: ID!
  shopItem: ShopItem!
}

enum ShopItemThreeDimensionalAssetFormat {
  USDZ
}

enum ShopItemType {
  ACHIEVEMENT_BADGE
  APPEARANCE_BOOST
  BACKGROUND
  BANNER
  CARD_XP_BOOST
  CHALLENGES_BADGE
  CLUB_BADGE
  COLLECTION_BADGE
  COMMON_CARD_SWAP
  COUNTRY_BADGE
  DELIVERABLE_WITH_CUSTOM_VARIANT
  DELIVERABLE_WITH_NO_VARIANT
  EVENT_BADGE
  EXTRA_SWAP
  EXTRA_TEAMS_CAP
  JERSEY
  LEVEL_UP
  LOGO
  MANAGER_PROGRESSION_BADGE
  RAFFLE
  RIVALS_SQUAD_LOGO
  SHIELD
  SHOP_BADGE
}

input ShopItemsSortInput {
  direction: SortingOption!
  type: ShopItemsSorting!
}

enum ShopItemsSorting {
  DATE
  NAME
  PRICE
  UNLOCKED
}

"""
Autogenerated return type of SignInMutation.
"""
type SignInMutationPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  currentUser: CurrentUser
  errors: [UserError!]!

  """
  Generate a JWT Token. null if, and only if, currentUser is null.
  """
  jwtToken(
    """
    Audience claim identifies the intended audience for this token. Consider
    using a value that uniquely identifies your use case.
    """
    aud: String!
  ): JwtToken
  otpSessionChallenge: String

  """
  tcuToken is returned when the user must accept the TCUs before signing in
  """
  tcuToken: String
}

"""
Autogenerated return type of SignInWithOAuthMutation.
"""
type SignInWithOAuthMutationPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  currentUser: CurrentUser
  errors: [UserError!]!
  isSignUp: Boolean

  """
  Generate a JWT Token. null if, and only if, currentUser is null.
  """
  jwtToken(
    """
    Audience claim identifies the intended audience for this token. Consider
    using a value that uniquely identifies your use case.
    """
    aud: String!
  ): JwtToken

  """
  tcuToken is returned when the user must accept the TCUs before signing in
  """
  tcuToken: String
}

"""
Autogenerated return type of SignUpMutation.
"""
type SignUpMutationPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  currentUser: CurrentUser
  errors: [UserError!]!

  """
  Generate a JWT Token. null if, and only if, currentUser is null.
  """
  jwtToken(
    """
    Audience claim identifies the intended audience for this token. Consider
    using a value that uniquely identifies your use case.
    """
    aud: String!
  ): JwtToken
}

type SignedCardPrice {
  player: AnyPlayerInterface!
  price: Int!
  rarity: Rarity!
  signedPrice: String!
  team: TeamInterface!
  validUntil: ISO8601DateTime!
}

enum SignupPlatform {
  ANDROID
  IOS
  MOBILE_WEB
  WEB
}

type SkinShopItem implements Node & ShopItemInterface {
  cardCollectionRequirements: [CardCollectionRequirement!]!
  color: String
  createdAt: ISO8601DateTime!
  description: String
  disabled: Boolean!
  expirationDate: ISO8601DateTime
  id: ID!
  infoLink: String
  limitPerUser: Int!
  myAvailableTotalPurchasesCount: Int!
  myAvailableUserShopItems: [UserShopItem!]
  myBalance: Int!
  myLimitResetAt: ISO8601DateTime
  myPurchasesCount: Int!
  name: String!
  pictureUrl(derivative: ShopItemDerivative = TINIFIED): String!
  position: ShopItemType!
  price: Int!
  requirementsRulesLink: String
  salePrice: Int
  seenInManagerId: Boolean!
  shopItemsRequired: [ShopItem!]!
  threeDimensionalAssetUrl(
    """
    Defaults to GLB
    """
    format: ShopItemThreeDimensionalAssetFormat
  ): String
  unlocked: Boolean!
}

"""
The active clubs bonus of an appearance
"""
type So5ActiveClubsBonus implements So5AppearanceBonusInterface {
  bonusBasisPoints: Int!
  description: String
  iconUrl: String!
  key: String!
  maxBonusBasisPoints: Int!
  smallIconUrl: String!
  title: String!
}

"""
The active clubs rule of a So5Leaderboard
"""
type So5ActiveClubsRule implements So5RuleInterface {
  clubs: [Club!]!
  descriptions: [So5RuleDescription!]!
  key: String!
}

"""
The active national teams rule of a So5Leaderboard
"""
type So5ActiveNationalTeamsRule implements So5RuleInterface {
  descriptions: [So5RuleDescription!]!
  key: String!
  nationalTeams: [NationalTeam!]!
}

type So5AgeRule implements So5RuleInterface {
  age: Age!
  descriptions: [So5RuleDescription!]!
  key: String!
}

"""
A SO5 Appearance - a card selected in a team for a SO5 fixture
"""
type So5Appearance implements ComposeTeamBenchObjectInterface & Node & So5AppearanceInterface {
  activeSuspensions(so5LeaderboardSlug: String!): [Suspension!]!
  anyCard: AnyCardInterface
  anyPlayer: AnyPlayerInterface!
  anyPlayerGameStats: AnyPlayerGameStatsInterface
  anyTeam: TeamInterface!
  averageScore(type: AveragePlayerScore!): Float
  bonus: Float
  bonusPoints: Float
  bonusRating: BonusOrdinalRatingEnum
  bonuses: [So5AppearanceBonusInterface!]!
  boosted: Boolean!
  captain: Boolean!
  cardBorderRadius: Int!
  cleanScore: Float
  eligiblePlayerGameScores(so5LeaderboardSlug: String): [PlayerGameScoreInterface!]!
  eligibleSo5Scores: [So5Score!]!
  energized: Boolean!
  firstGame: AnyGameInterface

  """
  Appearance card level at that time
  """
  grade: Int!
  id: ID!
  index: Int!
  licensed: Boolean!

  """
  When a bench object will be locked for a leaderboard
  """
  lockedAt(so5LeaderboardSlug: String): ISO8601DateTime!

  """
  Wether a bench object can be updated for a leaderboard
  """
  lockedForLeaderboard(so5LeaderboardSlug: String): Boolean!
  pictureUrl(derivative: String = "tinified"): String
  playedGames: [AnyGameInterface!]!
  player: Player!
  playerGameScore: PlayerGameScoreInterface
  position: Position!
  positions: [Position!]!
  powerBreakdown: PowerBreakdown!

  """
  PowerBreakdown as long as leaderboard is playable. PowerPointsBreakdown after
  """
  powerBreakdownOrPowerPointsBreakdown: PowerBreakdownOrPowerPointsBreakdown
  projectedScore(so5LeaderboardSlug: String!): Float
  rarity: Rarity!
  relevantStats: Json!
  score(withBonus: Boolean = true): Float!
  scoreStatus: ScoreStatus!
  so5Fixture: So5Fixture!
  so5Lineup: So5Lineup!
  so5Score: So5Score
  status: String!
  upcomingGame: AnyGameInterface
  videoUrl(derivative: String): String

  """
  Appearance card XP at that time
  """
  xp: Int!

  """
  XP end range of appearance card level at that time
  """
  xpNeededForNextGrade: Int
}

interface So5AppearanceBonusInterface {
  bonusBasisPoints: Int!
  description: String
  iconUrl: String!
  key: String!
  maxBonusBasisPoints: Int!
  smallIconUrl: String!
  title: String!
}

"""
The connection type for So5Appearance.
"""
type So5AppearanceConnection {
  """
  A list of edges.
  """
  edges: [So5AppearanceEdge!]!
  hasAny: Boolean!

  """
  A list of nodes.
  """
  nodes: [So5Appearance!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type So5AppearanceEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: So5Appearance
}

"""
A SO5 Appearance - a compose team bench object selected in a team for a SO5 fixture
"""
input So5AppearanceInput {
  boost: Boolean = false
  captain: Boolean!
  cardSlug: String
  composeTeamBenchObjectId: ID
}

"""
Shared interface between So5Appearance and MissedAppearance
"""
interface So5AppearanceInterface implements ComposeTeamBenchObjectInterface {
  activeSuspensions(so5LeaderboardSlug: String!): [Suspension!]!
  anyCard: AnyCardInterface
  anyPlayer: AnyPlayerInterface!
  anyPlayerGameStats: AnyPlayerGameStatsInterface
  anyTeam: TeamInterface!
  averageScore(type: AveragePlayerScore!): Float
  bonus: Float
  bonusPoints: Float
  bonusRating: BonusOrdinalRatingEnum
  bonuses: [So5AppearanceBonusInterface!]!
  boosted: Boolean!
  captain: Boolean!
  cardBorderRadius: Int!
  cleanScore: Float
  eligiblePlayerGameScores(so5LeaderboardSlug: String): [PlayerGameScoreInterface!]!
  eligibleSo5Scores: [So5Score!]!
  energized: Boolean!
  firstGame: AnyGameInterface

  """
  Appearance card level at that time
  """
  grade: Int!
  id: ID!
  index: Int!
  licensed: Boolean!

  """
  When a bench object will be locked for a leaderboard
  """
  lockedAt(so5LeaderboardSlug: String): ISO8601DateTime!

  """
  Wether a bench object can be updated for a leaderboard
  """
  lockedForLeaderboard(so5LeaderboardSlug: String): Boolean!
  pictureUrl(derivative: String = "tinified"): String
  playedGames: [AnyGameInterface!]!
  player: Player!
  playerGameScore: PlayerGameScoreInterface
  position: Position!
  positions: [Position!]!
  powerBreakdown: PowerBreakdown!

  """
  PowerBreakdown as long as leaderboard is playable. PowerPointsBreakdown after
  """
  powerBreakdownOrPowerPointsBreakdown: PowerBreakdownOrPowerPointsBreakdown
  projectedScore(so5LeaderboardSlug: String!): Float
  rarity: Rarity!
  relevantStats: Json!
  score(withBonus: Boolean = true): Float!
  scoreStatus: ScoreStatus!
  so5Fixture: So5Fixture!
  so5Score: So5Score
  status: String!
  upcomingGame: AnyGameInterface
  videoUrl(derivative: String): String

  """
  Appearance card XP at that time
  """
  xp: Int!

  """
  XP end range of appearance card level at that time
  """
  xpNeededForNextGrade: Int
}

"""
Preview appearance information
"""
type So5AppearancePreview {
  bonuses: [So5AppearanceBonusInterface!]!
  energized: Boolean!
  id: ID!

  """
  Total card bonus (XP + Season bonus)
  """
  power: String!
  powerBreakdown: PowerBreakdown!
}

"""
The at least of clubs rule of a So5Leaderboard
"""
type So5AtLeastOfClubs implements So5RuleInterface {
  clubs: [Club!]!
  descriptions: [So5RuleDescription!]!
  key: String!
  min: Int!
}

"""
The at least of competitions rule of a So5Leaderboard
"""
type So5AtLeastOfCompetitions implements So5RuleInterface {
  competitions: [Competition!]!
  descriptions: [So5RuleDescription!]!
  key: String!
  min: Int!
}

"""
The average scores bonus of an appearance
"""
type So5AverageScoresBonus implements So5AppearanceBonusInterface {
  bonusBasisPoints: Int!
  description: String
  iconUrl: String!
  key: String!
  max: Int!
  maxBonusBasisPoints: Int!
  smallIconUrl: String!
  title: String!
}

type So5AverageScoresRule implements So5RuleInterface {
  averageType: AveragePlayerScore!
  descriptions: [So5RuleDescription!]!
  immuneAppearances: Int!
  key: String!
  max: Int!
}

"""
The boost bonus of an appearance
"""
type So5BoostBonus implements So5AppearanceBonusInterface {
  bonusBasisPoints: Int!
  description: String
  iconUrl: String!
  key: String!
  maxBonusBasisPoints: Int!
  smallIconUrl: String!
  title: String!
}

"""
A So5 Campaign
"""
type So5Campaign {
  description: String!
  endDate: ISO8601DateTime!
  entered: Boolean!
  faqUrl: String
  pictureUrl: String
  rewardDescription: String
  sections: [So5CampaignSection!]!
  slug: String!
  so5Leaderboards: [So5Leaderboard!]
  startDate: ISO8601DateTime!
  status: So5CampaignStatus!
  termsFilename: String
  thumbnailUrl: String
  title: String!
}

"""
A So5 Campaign section
"""
type So5CampaignSection {
  iconUrl: String
  items: [So5CampaignSectionItem!]!
  title: String!
}

"""
A So5 Campaign section item
"""
type So5CampaignSectionItem {
  iconUrl: String
  subtitle: String!
  title: String!
}

enum So5CampaignStatus {
  LIVE
  PAST
  UPCOMING
}

"""
The captain bonus of an appearance
"""
type So5CaptainBonus implements So5AppearanceBonusInterface {
  bonusBasisPoints: Int!
  description: String
  iconUrl: String!
  key: String!
  maxBonusBasisPoints: Int!
  smallIconUrl: String!
  title: String!
}

type So5CaptainRule implements So5RuleInterface {
  bonus: Float!
  descriptions: [So5RuleDescription!]!
  inSeason: Boolean
  key: String!
  rarities: [Rarity!]!
}

type So5CaptainScarcityRule implements So5RuleInterface {
  bonus: Float!
  descriptions: [So5RuleDescription!]!
  inSeason: Boolean
  key: String!
  rarities: [Rarity!]!
}

type So5CardEditionsCountRule implements So5RuleInterface {
  descriptions: [So5RuleDescription!]!
  key: String!
}

type So5CardRewardBoost implements So5RewardBoostInterface {
  boostLevel: BoostLevel!
  maximumBoostLevel: BoostLevel!
  nbCards: Int!
  nextBoostLevel: BoostLevel
  points: Int!
  rarity: Rarity!
  seasonality: So5LeaderboardSeasonality!
}

"""
A card shards entry item
"""
type So5CardShardsEntryItem implements So5EntryItemInterface {
  id: ID!
  myCardShardsChest: CardShardsChest
  myEntryItemId: ID
  quantity: Int!
  rarity: Rarity!
}

"""
The collection bonus of an appearance
"""
type So5CollectionBonus implements So5AppearanceBonusInterface {
  bonusBasisPoints: Int!
  description: String
  iconUrl: String!
  key: String!
  maxBonusBasisPoints: Int!
  smallIconUrl: String!
  title: String!
}

"""
A So5 Competition
"""
type So5Competition {
  algoliaFilters: String!
  backgroundUrl: String!

  """
  The `cards` field cannot be nested within a list.
  """
  cards(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String
    age: Int
    assetIds: [String!]

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    classicOnly: Boolean
    customCardEditionName: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int
    inActiveCompetitions: [String!]
    inOrderOfRarities: Boolean @deprecated(reason: "Use `sorts` instead")
    inSeasonEligible: Boolean

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    owned: Boolean
    ownedByMe: Boolean
    ownedSinceAfter: ISO8601DateTime
    playerSlugs: [String!]

    """
    positions of the card capitalized
    """
    positions: [Position!]

    """
    rarities of the card in lowercase
    """
    rarities: [Rarity!]
    recentlyOwnedFirst: Boolean @deprecated(reason: "Use `sorts` instead")
    revealable: Boolean
    revealableFirst: Boolean @deprecated(reason: "Use `sorts` instead")
    seasonStartYears: [Int!]
    serialNumber: Int
    shirtNumber: Int
    slugs: [String!]
    sorts: [CardSort!]
    sport: Sport
    teamSlugs: [String!]
    withinDeckFirst: String
  ): AnyCardInterfaceConnection!
  commonGameAvailable: Boolean!
  competitions: [Competition!]!
  displayName: String!
  headerBackgroundDesktopUrl: String!
  headerBackgroundUrl: String!
  iconUrl: String!
  logoUrl: String!

  """
  The `playable_so5_leaderboard_group_interfaces` field cannot be nested within a list.
  """
  playableSo5LeaderboardGroupInterfaces: [So5LeaderboardGroupInterface!]!
  scoutable: Boolean!
  seasonalityInYears: [Int!]!
  seasonalityName(seasonality: So5LeaderboardSeasonality!): String!
  slug: String!
}

type So5CompetitionsRule implements So5RuleInterface {
  competitions: [Competition!]!
  descriptions: [So5RuleDescription!]!
  key: String!
}

"""
So5 Global Config
"""
type So5Config {
  cardCollections: [CardCollection!]!
  energyCostPerAppearance(eventType: So5FixtureEvent!, sport: Sport!): Int
  id: ID!
  leaguesAlgoliaFilters(sport: Sport!): Json!
  noCardRoute(eventType: So5FixtureEvent, sport: Sport): NoCardRoute!
  probablePitchersForNextGameWeeks: [ProbablePitchersForGameWeek!]!
  tasksExpiresAt(periodicity: ManagerTaskPeriodicity!): ISO8601DateTime
  teamsPlayingNextGameWeeks(eventType: So5FixtureEvent, first: Int, sport: Sport!): [TeamsPlayingNextGameWeek!]!

  """
  List of all the possible tournament rarity types
  """
  tournamentRarityTypes: [String!]!

  """
  List of all the possible tournament types
  """
  tournamentTypes: [String!]!
}

"""
Object that can be a So5 cover
"""
union So5Cover = FeaturedSo5LeaderboardContenders | FeaturedSo5LeaderboardGroups | So5Leaderboard

interface So5CurrentUserInterface {
  """
  List of current user blockchain cards engaged in lineups (for live or upcoming fixtures)
  """
  blockchainCardsInLineups(sport: Sport = FOOTBALL): [String!]!
  footballLast30DaysLineupsCount: Int!
  forcedIntoOnboarding(sport: Sport): Boolean!
  last30DaysLineupsCount: IntegerBySportType!

  """
  Boosted rewards based on eligible reward configs The
  `my_unclaimed_boosted_reward_configs_by_rarity` field cannot be nested within a list.
  """
  myUnclaimedBoostedRewardConfigsByRarity(sport: Sport!): [RarityRewardConfigs!]!

  """
  The `my_unclaimed_eligible_reward_configs` field cannot be nested within a list.
  """
  myUnclaimedEligibleRewardConfigs(multiplyBaseRewards: Boolean = false, sport: Sport!): [AnyRewardConfigInterface!]!
  myUnclaimedSo5RewardsNeedKycVerification(sport: Sport!): Boolean!
  myUnclaimedSo5RewardsNeedPhoneVerification(sport: Sport!): Boolean!
  onboardingFlow(sport: Sport): String

  """
  If the so5 no card route is open for submission
  """
  so5NoCardRouteOpened(sport: Sport = FOOTBALL): Boolean!
  unclaimedSo5Rewards(sport: Sport): [So5Reward!]!
}

"""
A SO5 Deliverable Item Reward
"""
type So5DeliverableItemReward {
  deliverableItem: DeliverableItemInterface
  quantity: Int!
}

"""
The different nationalities bonus of an appearance
"""
type So5DifferentNationalitiesBonus implements So5AppearanceBonusInterface {
  bonusBasisPoints: Int!
  description: String
  iconUrl: String!
  key: String!
  maxBonusBasisPoints: Int!
  smallIconUrl: String!
  title: String!
}

interface So5EntryItemInterface {
  id: ID!
  myEntryItemId: ID
}

"""
The entry item rule of a So5Leaderboard
"""
type So5EntryItemRule implements So5RuleInterface {
  descriptions: [So5RuleDescription!]!
  entryItem: So5EntryItemInterface!
  key: String!
}

"""
A SO5 fixture
"""
type So5Fixture implements Node & So5FixturePublicInterface {
  aasmState: String!

  """
  The `any_games` field cannot be nested within a list.
  """
  anyGames(fromDate: ISO8601DateTime, toDate: ISO8601DateTime): [AnyGameInterface!]!
  canCompose: Boolean!

  """
  The `competitions` field cannot be nested within a list.
  """
  competitions: [Competition!]!
  cutOffDate: ISO8601DateTime!
  displayName: String!
  endDate: ISO8601DateTime!
  event: Event
  eventName: String
  eventType: String!
  expectedRewardsDistributionDate: ISO8601DateTime

  """
  The `fixture_games_with_player_game_scores_preview` field cannot be nested within a list.
  """
  fixtureGamesWithPlayerGameScoresPreview(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int
    fromDate: ISO8601DateTime

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    myGamesOnly: Boolean = false
    toDate: ISO8601DateTime
  ): GameWithPlayerGameScoresPreviewConnection!
  gameWeek: Int!

  """
  The `games` field cannot be nested within a list.
  """
  games(fromDate: ISO8601DateTime, toDate: ISO8601DateTime): [Game!]!

  """
  The `games_with_my_player_game_scores_preview` field cannot be nested within a list.
  """
  gamesWithMyPlayerGameScoresPreview(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int
    fromDate: ISO8601DateTime
    includeWithoutPlayerGameScores: Boolean

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    toDate: ISO8601DateTime
  ): GameWithPlayerGameScoresPreviewConnection!
  id: ID!
  live: Boolean!
  longDisplayName: String!

  """
  Boosted rewards based on eligible reward configs The
  `my_boosted_reward_configs_by_rarity` field cannot be nested within a list.
  """
  myBoostedRewardConfigsByRarity: [RarityRewardConfigs!]!

  """
  The `my_completed_thresholds_streak_tasks_count` field cannot be nested within a list.
  """
  myCompletedThresholdsStreakTasksCount: Int!

  """
  Eligible rewards until so5 fixture is closed, actual so5 rewards after The
  `my_eligible_or_so5_rewards` field cannot be nested within a list.
  """
  myEligibleOrSo5Rewards(multiplyBaseRewards: Boolean = false): [So5RewardOrConfig!]!

  """
  The `my_eligible_reward_configs` field cannot be nested within a list.
  """
  myEligibleRewardConfigs(multiplyBaseRewards: Boolean = false): [AnyRewardConfigInterface!]!

  """
  The `my_featured_so5_leaderboard_group` field cannot be nested within a list.
  """
  myFeaturedSo5LeaderboardGroup(includingHidden: Boolean): So5LeaderboardGroupInterface

  """
  The `my_friends_fixture_results` field cannot be nested within a list.
  """
  myFriendsFixtureResults(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserFixtureResultsConnection
  myFriendsFixtureResultsPreview: UsersFixtureResultsPreview!

  """
  The `my_live_player_game_scores_count` field cannot be nested within a list.
  """
  myLivePlayerGameScoresCount: Int!

  """
  The `my_lobby_section` field cannot be nested within a list.
  """
  myLobbySection(section: LobbySectionType!): LobbySection!
  myMissedLineup(slug: String!): MissedLineup!

  """
  The `my_missed_lineups` field cannot be nested within a list.
  """
  myMissedLineups: [MissedLineup!]!

  """
  The `my_so5_games` field cannot be nested within a list.
  """
  mySo5Games: [Game!]!

  """
  The `my_so5_leaderboard_contenders` field cannot be nested within a list.
  """
  mySo5LeaderboardContenders(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    sortType: So5LeaderboardContenderSort
    withTraining: Boolean
  ): So5LeaderboardContenderConnection!

  """
  The `my_so5_league_tracks` field cannot be nested within a list.
  """
  mySo5LeagueTracks: [So5LeagueTrack!]!
  mySo5Lineups(draft: Boolean, so5LeaderboardSlug: String, sortType: CustomSortingOption, withTraining: Boolean): [So5Lineup!]!

  """
  The `my_so5_lineups_count` field cannot be nested within a list.
  """
  mySo5LineupsCount(draft: Boolean, so5LeaderboardSlug: String, training: Boolean): Int!
  mySo5LineupsPaginated(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    draft: Boolean

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    so5LeaderboardSlug: String
    sortType: CustomSortingOption
    withTraining: Boolean
  ): So5LineupConnection!
  mySo5Rankings(first: Int, withDraft: Boolean, withTraining: Boolean): [So5Ranking!]!
  mySo5Rewards: [So5Reward!]!

  """
  The `my_so5_user_groups` field cannot be nested within a list.
  """
  mySo5UserGroups(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    statuses: [UserGroupStatus!]
  ): So5UserGroupConnection!
  myTotalXpWon: Int!
  myUnclaimedSo5RewardsNeedKycVerification: Boolean!
  myUnclaimedSo5RewardsNeedPhoneVerification: Boolean!

  """
  The `my_user_groups` field cannot be nested within a list.
  """
  myUserGroups(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    statuses: [UserGroupStatus!]
  ): UserGroupInterfaceConnection!

  """
  The `next` field cannot be nested within a list.
  """
  next: So5Fixture

  """
  The `no_card_route_pick_configs` field cannot be nested within a list.
  """
  noCardRoutePickConfigs: [So5NoCardRouteFixturePickConfig!]!

  """
  The `onboarding_so5_leaderboard` field cannot be nested within a list.
  """
  onboardingSo5Leaderboard: So5Leaderboard @deprecated(reason: "Not used anymore")

  """
  The `ordered_player_game_scores` field cannot be nested within a list.
  """
  orderedPlayerGameScores(first: Int!): [OrderedPlayerGameScores!]!

  """
  Get ordered PlayerGameScore by position (default to all positions)
  """
  orderedPlayerGameScoresByPosition(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    minScore: Int
    position: String @deprecated(reason: "Use positions_typed instead")
    positionsTyped: [Position!]
    sellable: Boolean
  ): PlayerGameScoreInterfaceConnection!

  """
  The `ordered_so5_scores` field cannot be nested within a list.
  """
  orderedSo5Scores(first: Int!): [OrderedSo5Scores!]!

  """
  Get ordered So5Score by position (default to all positions)
  """
  orderedSo5ScoresByPosition(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    minScore: Int
    myCardsRarities: [Rarity!]
    position: String @deprecated(reason: "Use positions_typed instead")
    positionsTyped: [Position!]
    sellable: Boolean
  ): So5ScoreConnection!

  """
  The `players` field cannot be nested within a list.
  """
  players(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filters: BenchFilterInput

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): AnyPlayerInterfaceConnection!

  """
  The `previous` field cannot be nested within a list.
  """
  previous: So5Fixture
  projectedLineupsReadyAt: ISO8601DateTime
  replayedFixture: So5Fixture
  rewardsDeliveryDate: ISO8601DateTime!
  seasonGameWeek: Int
  shortDisplayName: String!
  slug: String!

  """
  The `so5_fixture_players` field cannot be nested within a list.
  """
  so5FixturePlayers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    competitionSlugs: [String!]
    excludingSealed: Boolean

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    myCardsRarities: [Rarity!]
    positions: [Position!]
  ): FixturePlayerConnection!

  """
  The `so5_leaderboard` field cannot be nested within a list.
  """
  so5Leaderboard(so5LeaderboardType: So5LeaderboardType!): So5Leaderboard

  """
  The `so5_leaderboard_contenders` field cannot be nested within a list.
  """
  so5LeaderboardContenders(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    userSlug: String!
    withTraining: Boolean
  ): So5LeaderboardContenderConnection!

  """
  The `so5_leaderboard_groups` field cannot be nested within a list.
  """
  so5LeaderboardGroups(groupType: So5LeaderboardGroupType = RARITY, includeClosed: Boolean = false): [So5LeaderboardGroupInterface!]!

  """
  The `so5_leaderboards` field cannot be nested within a list.
  """
  so5Leaderboards(sortType: CustomSortingOption): [So5Leaderboard!]!

  """
  The `so5_leaderboards_paginated` field cannot be nested within a list.
  """
  so5LeaderboardsPaginated(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    sortType: CustomSortingOption
  ): So5LeaderboardConnection!

  """
  The `so5_leagues` field cannot be nested within a list.
  """
  so5Leagues: [So5League!]!
  so5LineupsPaginated(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    draft: Boolean

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    so5LeaderboardSlug: String
    sortType: CustomSortingOption
    userSlug: String!
    withTraining: Boolean
  ): So5LineupConnection!
  specialWeeklyBanner: SpecialWeeklyBanner
  sport: Sport!
  startDate: ISO8601DateTime!
  timeZone: String!
  totalRewards: RewardsOverview!
  type: So5FixtureEvent!
  userFixtureResults(userSlug: String!): UserFixtureResults
}

"""
The connection type for So5Fixture.
"""
type So5FixtureConnection {
  """
  A list of edges.
  """
  edges: [So5FixtureEdge!]!

  """
  A list of nodes.
  """
  nodes: [So5Fixture!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type So5FixtureEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: So5Fixture
}

enum So5FixtureEvent {
  CLASSIC
  DAILY
  MEDIA_LEAGUE
  RANDOMIZED
}

type So5FixturePreparing implements Node & So5FixturePublicInterface {
  cutOffDate: ISO8601DateTime!
  displayName: String!
  endDate: ISO8601DateTime!
  eventName: String
  expectedRewardsDistributionDate: ISO8601DateTime
  gameWeek: Int!
  id: ID!
  longDisplayName: String!
  seasonGameWeek: Int
  shortDisplayName: String!
  slug: String!
  sport: Sport!
  startDate: ISO8601DateTime!
  timeZone: String!
}

interface So5FixturePublicInterface {
  cutOffDate: ISO8601DateTime!
  displayName: String!
  endDate: ISO8601DateTime!
  eventName: String
  expectedRewardsDistributionDate: ISO8601DateTime
  gameWeek: Int!
  longDisplayName: String!
  seasonGameWeek: Int
  shortDisplayName: String!
  slug: String!
  sport: Sport!
  startDate: ISO8601DateTime!
  timeZone: String!
}

"""
The connection type for So5FixturePublicInterface.
"""
type So5FixturePublicInterfaceConnection {
  """
  A list of edges.
  """
  edges: [So5FixturePublicInterfaceEdge!]!

  """
  A list of nodes.
  """
  nodes: [So5FixturePublicInterface!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type So5FixturePublicInterfaceEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: So5FixturePublicInterface
}

"""
The grade bonus of an appearance
"""
type So5GradeBonus implements So5AppearanceBonusInterface {
  bonusBasisPoints: Int!
  description: String
  iconUrl: String!
  key: String!
  maxBonusBasisPoints: Int!
  smallIconUrl: String!
  title: String!
}

"""
A So5 Leaderboard
"""
type So5Leaderboard implements Node & So5LeaderboardRulesInterface {
  algoliaFilters: String
  canCompose: Validity!
  composeBuy: Boolean!
  composeDisclaimer: String
  cutOffDate: ISO8601DateTime!
  defaultAverageScore: AveragePlayerScore
  defaultSortType: BenchSort!
  description: String
  displayName(short: Boolean, withSeasonality: Boolean): String!
  displayedRules: So5Rules
  displayedTypedRules: [So5RuleInterface!]!
  division: Int!
  divisionChangeConfiguration: DivisionChangeConfiguration
  divisionIconUrl: String!
  eligibleCardsCountByPosition: [UserCardsCount!]!
  eligibleToPreviousLineupLoader: Boolean!
  eligibleToSuggestedLineupLoader: Boolean!
  endDate: ISO8601DateTime!
  engineConfiguration: EngineConfiguration!

  """
  The `fixture_games_with_player_game_scores_preview` field cannot be nested within a list.
  """
  fixtureGamesWithPlayerGameScoresPreview(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int
    fromDate: ISO8601DateTime

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    myGamesOnly: Boolean = false
    toDate: ISO8601DateTime
  ): GameWithPlayerGameScoresPreviewConnection!
  gameWeek: Int!

  """
  The `games_with_my_cards_preview` field cannot be nested within a list.
  """
  gamesWithMyCardsPreview(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    By default sort by cards_total_count and game_date otherwise
    """
    sortBy: GameWithCardsPreviewSortType
    withCards: Boolean
  ): GameWithCardsPreviewConnection!

  """
  The `games_with_my_player_game_scores_preview` field cannot be nested within a list.
  """
  gamesWithMyPlayerGameScoresPreview(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int
    fromDate: ISO8601DateTime
    includeWithoutPlayerGameScores: Boolean

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    toDate: ISO8601DateTime
  ): GameWithPlayerGameScoresPreviewConnection!
  highlightedRecommendations(positions: [Position!], recommendationEngine: RecommendationEngine!, sport: Sport!): [PlayerRecommendation!]!
  iconUrl: String
  id: ID!
  lineupLiveFeedbacksRules(appearances: [So5AppearanceInput!]!): [So5RuleFeedback!]
  mainRarityType: Rarity
  marketOpened: Boolean! @deprecated(reason: "Not used anymore")

  """
  The `my_bench` field cannot be nested within a list.
  """
  myBench(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    deckId: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    The card grades to filter on
    """
    grades: RangeInput
    inSeasonEligible: Boolean

    """
    Whether to include cards with no game in this fixture (default false)
    """
    includeNoGame: Boolean

    """
    Whether to filter on cards with players injured or suspended (default false)
    """
    includeUnavailablePlayers: Boolean

    """
    Whether to include cards already used in this fixture (default false)
    """
    includeUsed: Boolean

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    lastFifteenSo5AverageScore: RangeInput
    lastTenPlayedSo5AverageScore: RangeInput

    """
    Whether to include cards that plays from home
    """
    playingHomeOnly: Boolean

    """
    The card positions to filter on
    """
    positions: [Position!]

    """
    Full text search query to filter cards
    """
    query: String

    """
    The card rarities to filter on (default to all rarities)
    """
    rarities: [Rarity!]

    """
    Objects already selected in the current lineup. It can be a So5Appearance or a ComposeTeamBenchObject.
    """
    selectedObjectIds: [String!]
    so5LineupId: String
    sortType: EligibleCardsSort

    """
    The player starting prediction to filter on
    """
    starterOddsBasisPointsRange: RangeInput
  ): ComposeTeamBenchObjectInterfaceConnection! @deprecated(reason: "Use myFilteredBench instead")

  """
  Get a list of ComposeTeamBenchObject by ids
  """
  myComposeTeamBenchObjects(ids: [String!]!): [ComposeTeamBenchObjectInterface!]!

  """
  The `my_filtered_bench` field cannot be nested within a list.
  """
  myFilteredBench(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filters: BenchFilterInput!

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ComposeTeamBenchObjectInterfaceConnection!

  """
  The `my_live_player_game_scores_count` field cannot be nested within a list.
  """
  myLivePlayerGameScoresCount: Int!
  myManagerTeams: [ManagerTeam!]!
  mySo5LeaderboardContenders(includeHiddenManagerTeam: Boolean): [So5LeaderboardContender!]!
  mySo5Lineups: [So5Lineup!]!
  mySo5Rankings(so5UserGroupSlug: String): [So5Ranking!]!

  """
  The `my_so5_user_groups` field cannot be nested within a list.
  """
  mySo5UserGroups(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    statuses: [UserGroupStatus!]
  ): So5UserGroupConnection!
  myTasks: [TaskInterface!]!

  """
  The `my_user_groups` field cannot be nested within a list.
  """
  myUserGroups(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    statuses: [UserGroupStatus!]
  ): UserGroupInterfaceConnection!
  nextGame(onlyEligibleForCommonGame: Boolean @deprecated(reason: "Not used anymore")): AnyGameInterface
  nextThresholdTask: TaskInterface
  onboardingTasks: [TaskInterface!]!
  played: Boolean!
  possibleBenchSortingTypes: [SortingType!]!
  powerCap: Float
  previewSo5Lineup(appearances: [So5AppearanceInput!]!, lineupId: String, so5LineupId: ID): So5LineupPreview!
  projectedLineupsReadyAt: ISO8601DateTime
  rarityType: String!

  """
  Slug to suffix with the position to filter PlayerRecommendation
  """
  recommendableSlug: String
  requiresManagerTeam: Boolean!
  rewardMultiplierConfiguration: RewardMultiplierConfiguration
  rewardPool(first: Int, quality: String!): [PlayerWithSupply!]!
  rewardedLineupsCount: Int!
  rewardsConfig: LeaderboardRewardsConfig!
  roomWithBoostedRewards: Boolean!
  roomsConfig: RoomsConfig
  rules: So5Rules
  rulesSummary: String!
  seasonality: So5LeaderboardSeasonality
  seasonalityInYears: [Int!]
  seasonalityName: String
  showDropAndAddCommonCards: Boolean!
  slug: String!
  so5Fixture: So5Fixture!
  so5LeaderboardGroup(groupType: So5LeaderboardGroupType = RARITY): So5LeaderboardGroupInterface!
  so5LeaderboardType: So5LeaderboardType!
  so5League: So5League!
  so5LeagueTrack: So5LeagueTrack!
  so5Lineup(id: String): So5Lineup
  so5LineupsCount: Int!

  """
  The `so5_lineups_paginated` field cannot be nested within a list.
  """
  so5LineupsPaginated(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    userSlug: String
  ): So5LineupConnection!

  """
  Get associated rankings, sorted by rank in ascending order. Empty until
  fixture has started. The `so5_rankings` field cannot be nested within a list.
  """
  so5Rankings(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Show only followed users rankings
    """
    onlyFollowed: Boolean
  ): So5RankingConnection!

  """
  Get associated rankings, sorted by rank in ascending order. Empty until
  fixture has started. The `so5_rankings_paginated` field cannot be nested within a list.
  """
  so5RankingsPaginated(
    """
    Show only followed users rankings
    """
    onlyFollowed: Boolean
    page: Int
    pageSize: Int
    so5UserGroupSlug: String
  ): So5RankingsPaginated!

  """
  Get associated rankings, sorted by rank in ascending order. Unlike
  so5Rankings, it is nestable, though limited to 5. Empty until fixture has started.
  """
  so5RankingsPreview(size: Int = 3): [So5Ranking!]!

  """
  Get associated rewards. Empty until fixture is closed. The `so5_rewards` field cannot be nested within a list.
  """
  so5Rewards(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): So5RewardConnection!
  so5TournamentType: So5Tournament!
  stadiumUrl: String
  startDate: ISO8601DateTime!
  svgLogoUrl: String!
  teamsCap: Int
  title: String
  topRecommendations(
    playingHomeOnly: Boolean
    positions: [Position!]

    """
    Full text search query to filter cards
    """
    query: String
    recommendationEngine: RecommendationEngine!
    sortType: EligibleCardsSort
    sport: Sport!

    """
    The player starting prediction to filter on
    """
    starterOddsBasisPointsRange: RangeInput
  ): [PlayerRecommendation!]!
  totalRewardConfigs(highestConfigByType: Boolean): [AnyRewardConfigInterface!]!

  """
  High level overview of the rewards for the leaderboard
  """
  totalRewards: RewardsOverview!
  tournamentType: String!
  trainingCenter: Boolean!
  universalSo5UserGroups: [So5UserGroup!]!
  universalUserGroups: [UserGroupInterface!]!
  upsellSo5Leaderboard: So5Leaderboard
}

"""
The connection type for So5Leaderboard.
"""
type So5LeaderboardConnection {
  """
  A list of edges.
  """
  edges: [So5LeaderboardEdge!]!

  """
  A list of nodes.
  """
  nodes: [So5Leaderboard!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
A ManagerTeam with optional So5Lineup, or a So5Lineup without ManagerTeam
"""
type So5LeaderboardContender {
  managerTeam: ManagerTeam
  slug: String!
  so5Leaderboard: So5Leaderboard!
  so5Lineup: So5Lineup
}

"""
The connection type for So5LeaderboardContender.
"""
type So5LeaderboardContenderConnection {
  """
  A list of edges.
  """
  edges: [So5LeaderboardContenderEdge!]!
  hasAny: Boolean!

  """
  A list of nodes.
  """
  nodes: [So5LeaderboardContender!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type So5LeaderboardContenderEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: So5LeaderboardContender
}

enum So5LeaderboardContenderSort {
  BEST_REWARDS
  LEADERBOARD
  PROJECTED_RANK
  RANK
  RANK_RATIO
}

"""
An edge in a connection.
"""
type So5LeaderboardEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: So5Leaderboard
}

type So5LeaderboardEntryItemSource implements HistoryTransactionInterface {
  date: ISO8601DateTime!
  description: String
  id: String!
  label: String!
  logoUrl: String
  quantityByFlavour: [PoolKeyShardsCount!]!
  totalQuantity: Int!
}

type So5LeaderboardGroup implements So5LeaderboardGroupInterface {
  bannerUrl: String!
  canCompose: Validity!
  color(
    """
    Default to secondary
    """
    variant: ColorVariant = SECONDARY
  ): String!
  compactBannerUrl: String
  cutOffDate: ISO8601DateTime!
  description: String!
  displayName: String!
  eligibleCardsCountByPosition: [UserCardsCount!]!
  featured: Boolean!
  featuredBannerUrl: String!
  hasLeaderboards: Boolean!
  headerBackgroundUrl(seasonality: So5LeaderboardSeasonality): String!
  headerUrl(nonSvg: Boolean @deprecated(reason: "Not used anymore")): String!
  iconUrl: String!
  leagueSummary: String
  lockType: LockTypeEnum
  logoUrl: String!

  """
  Eligible rewards until so5 fixture is closed, actual so5 rewards after
  """
  myEligibleOrSo5Rewards: [So5RewardOrConfig!]!
  mySo5LeaderboardContenders(includeHiddenManagerTeam: Boolean, sortType: So5LeaderboardContenderSort): [So5LeaderboardContender!]!
  mySo5Leaderboards: [So5Leaderboard!]!
  myThresholdsStreakTasks: [ThresholdsStreakTask!]!
  percentageOfGamesPlayed: Float!
  pictureUrl(seasonality: So5LeaderboardSeasonality): String
  quickAdd: Boolean! @deprecated(reason: "No longer used")
  seasonalities: [So5LeaderboardSeasonality!]!
  shortDescription: String
  slug: String!
  so5Competition: So5Competition!
  so5Fixture: So5Fixture!
  so5LeaderboardContenders(includeHiddenManagerTeam: Boolean, sortType: So5LeaderboardContenderSort, userSlug: String!): [So5LeaderboardContender!]!
  so5Leaderboards: [So5Leaderboard!]!
  so5LeagueTrack(slug: String!): So5LeagueTrack
  so5LeagueTrackGroup(slug: String!): So5LeagueTrackGroup
  so5LeagueTrackGroups: [So5LeagueTrackGroup!]!
  so5LeagueTracks: [So5LeagueTrack!]!
  so5LineupsCount: Int!
  stadiumUrl(boostedRewards: Boolean, seasonality: So5LeaderboardSeasonality): String
  tileBackgroundUrl: String
  totalRewardConfigs(highestConfigByType: Boolean, onlyPlayable: Boolean, seasonality: So5LeaderboardSeasonality): [AnyRewardConfigInterface!]!
  totalRewards(seasonality: So5LeaderboardSeasonality): RewardsOverview!
  vaultPointsRequired: Boolean!
}

"""
So5LeaderboardGroupInterface
"""
interface So5LeaderboardGroupInterface {
  bannerUrl: String!
  canCompose: Validity!
  color(
    """
    Default to secondary
    """
    variant: ColorVariant = SECONDARY
  ): String!
  compactBannerUrl: String
  cutOffDate: ISO8601DateTime!
  description: String!
  displayName: String!
  eligibleCardsCountByPosition: [UserCardsCount!]!
  featured: Boolean!
  featuredBannerUrl: String!
  hasLeaderboards: Boolean!
  headerBackgroundUrl(seasonality: So5LeaderboardSeasonality): String!
  headerUrl(nonSvg: Boolean @deprecated(reason: "Not used anymore")): String!
  iconUrl: String!
  leagueSummary: String
  lockType: LockTypeEnum
  logoUrl: String!

  """
  Eligible rewards until so5 fixture is closed, actual so5 rewards after
  """
  myEligibleOrSo5Rewards: [So5RewardOrConfig!]!
  mySo5LeaderboardContenders(includeHiddenManagerTeam: Boolean, sortType: So5LeaderboardContenderSort): [So5LeaderboardContender!]!
  mySo5Leaderboards: [So5Leaderboard!]!
  myThresholdsStreakTasks: [ThresholdsStreakTask!]!
  percentageOfGamesPlayed: Float!
  pictureUrl(seasonality: So5LeaderboardSeasonality): String
  quickAdd: Boolean! @deprecated(reason: "No longer used")
  seasonalities: [So5LeaderboardSeasonality!]!
  shortDescription: String
  slug: String!
  so5Competition: So5Competition!
  so5Fixture: So5Fixture!
  so5LeaderboardContenders(includeHiddenManagerTeam: Boolean, sortType: So5LeaderboardContenderSort, userSlug: String!): [So5LeaderboardContender!]!
  so5Leaderboards: [So5Leaderboard!]!
  so5LeagueTrack(slug: String!): So5LeagueTrack
  so5LeagueTrackGroup(slug: String!): So5LeagueTrackGroup
  so5LeagueTrackGroups: [So5LeagueTrackGroup!]!
  so5LeagueTracks: [So5LeagueTrack!]!
  so5LineupsCount: Int!
  stadiumUrl(boostedRewards: Boolean, seasonality: So5LeaderboardSeasonality): String
  tileBackgroundUrl: String
  totalRewardConfigs(highestConfigByType: Boolean, onlyPlayable: Boolean, seasonality: So5LeaderboardSeasonality): [AnyRewardConfigInterface!]!
  totalRewards(seasonality: So5LeaderboardSeasonality): RewardsOverview!
  vaultPointsRequired: Boolean!
}

"""
The connection type for So5LeaderboardGroupInterface.
"""
type So5LeaderboardGroupInterfaceConnection {
  """
  A list of edges.
  """
  edges: [So5LeaderboardGroupInterfaceEdge!]!
  hasAny: Boolean!

  """
  A list of nodes.
  """
  nodes: [So5LeaderboardGroupInterface!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type So5LeaderboardGroupInterfaceEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: So5LeaderboardGroupInterface
}

enum So5LeaderboardGroupType {
  COMPETITION
  RARITY
}

enum So5LeaderboardRarity {
  COMMON
  LIMITED
  MIX
  RARE
  RARE_PRO
  SUPER_RARE
  UNIQUE
}

"""
So5Leaderboard Rules
"""
interface So5LeaderboardRulesInterface {
  canCompose: Validity!
  defaultAverageScore: AveragePlayerScore
  displayedRules: So5Rules
  displayedTypedRules: [So5RuleInterface!]!
  rules: So5Rules
  rulesSummary: String!
}

enum So5LeaderboardSeasonality {
  ALL_SEASONS
  IN_SEASON
}

"""
So5 Leaderboard Task
"""
type So5LeaderboardTask implements ManagerTaskInterface & So5LeaderboardTaskInterface & TaskInterface {
  aasmState: ManagerProgressionTaskState!
  alternativeRewardConfigs: [AlternativeRewardConfig!]
  cards: [AnyCardInterface!]!
  claimedAt: ISO8601DateTime
  color: String
  completedAt: ISO8601DateTime
  declarative: Boolean! @deprecated(reason: "Not used anymore")
  description: String!
  genre: TaskGenre!
  group: TaskGroup
  iconUrl: String
  id: String!
  name: ManagerProgressionTaskSlug!
  periodicity: ManagerTaskPeriodicity
  playableSo5Leaderboard: So5Leaderboard
  possibleRewardConfigsIconUrl: String
  probabilisticBundles: [ProbabilisticBundle!]!
  progress: Int!
  rarity: Rarity
  rewardConfigs(mergedConfigsByType: Boolean = false): [AnyRewardConfigInterface!]!
  target: Int!
  taskConfigSlug: String!
  templateIconUrl: String!
  title: String!
}

"""
Manager Task
"""
interface So5LeaderboardTaskInterface implements ManagerTaskInterface & TaskInterface {
  aasmState: ManagerProgressionTaskState!
  alternativeRewardConfigs: [AlternativeRewardConfig!]
  cards: [AnyCardInterface!]!
  claimedAt: ISO8601DateTime
  color: String
  completedAt: ISO8601DateTime
  declarative: Boolean! @deprecated(reason: "Not used anymore")
  description: String!
  genre: TaskGenre!
  group: TaskGroup
  iconUrl: String
  id: String!
  name: ManagerProgressionTaskSlug!
  periodicity: ManagerTaskPeriodicity
  playableSo5Leaderboard: So5Leaderboard
  possibleRewardConfigsIconUrl: String
  probabilisticBundles: [ProbabilisticBundle!]!
  progress: Int!
  rarity: Rarity
  rewardConfigs(mergedConfigsByType: Boolean = false): [AnyRewardConfigInterface!]!
  target: Int!
  taskConfigSlug: String!
  templateIconUrl: String!
  title: String!
}

enum So5LeaderboardType {
  ALL_SEASONS_ALL_STAR_COMMON
  ALL_SEASONS_ALL_STAR_LIMITED
  ALL_SEASONS_ALL_STAR_RARE
  ALL_SEASONS_ALL_STAR_SUPER_RARE
  ALL_SEASONS_ALL_STAR_UNIQUE
  ALL_SEASONS_CHALLENGERS_LIMITED
  ALL_SEASONS_CHALLENGERS_ONBOARDING
  ALL_SEASONS_CHALLENGERS_RARE
  ALL_SEASONS_CHALLENGERS_SUPER_RARE
  ALL_SEASONS_CHALLENGERS_UNIQUE
  ALL_SEASONS_CHAMPIONS_LIMITED
  ALL_SEASONS_CHAMPIONS_ONBOARDING
  ALL_SEASONS_CHAMPIONS_RARE
  ALL_SEASONS_CHAMPIONS_SUPER_RARE
  ALL_SEASONS_CHAMPIONS_UNIQUE
  ALL_SEASONS_CONTENDERS_LIMITED
  ALL_SEASONS_CONTENDERS_ONBOARDING
  ALL_SEASONS_CONTENDERS_RARE
  ALL_SEASONS_CONTENDERS_SUPER_RARE
  ALL_SEASONS_CONTENDERS_UNIQUE
  ALL_SEASONS_ENGLAND_LIMITED
  ALL_SEASONS_ENGLAND_ONBOARDING
  ALL_SEASONS_ENGLAND_RARE
  ALL_SEASONS_ENGLAND_SUPER_RARE
  ALL_SEASONS_ENGLAND_UNIQUE
  ALL_SEASONS_GERMANY_LIMITED
  ALL_SEASONS_GERMANY_ONBOARDING
  ALL_SEASONS_GERMANY_RARE
  ALL_SEASONS_GERMANY_SUPER_RARE
  ALL_SEASONS_GERMANY_UNIQUE
  ALL_SEASONS_SPAIN_LIMITED
  ALL_SEASONS_SPAIN_ONBOARDING
  ALL_SEASONS_SPAIN_RARE
  ALL_SEASONS_SPAIN_SUPER_RARE
  ALL_SEASONS_SPAIN_UNIQUE
  ALL_SEASONS_UNDER_TWENTY_ONE_LIMITED
  ALL_SEASONS_UNDER_TWENTY_ONE_ONBOARDING
  ALL_SEASONS_UNDER_TWENTY_ONE_RARE
  ALL_SEASONS_UNDER_TWENTY_ONE_SUPER_RARE
  ALL_SEASONS_UNDER_TWENTY_ONE_UNIQUE
  ALL_SEASONS_US_LIMITED
  ALL_SEASONS_US_ONBOARDING
  ALL_SEASONS_US_RARE
  ALL_SEASONS_US_SUPER_RARE
  ALL_SEASONS_US_UNIQUE
  CHALLENGER_EUROPE_LIMITED
  CHALLENGER_EUROPE_RARE
  CHALLENGER_EUROPE_RARE_PRO
  CHALLENGER_EUROPE_SUPER_RARE
  CHALLENGER_EUROPE_UNIQUE
  CHAMPION_AMERICA_LIMITED
  CHAMPION_AMERICA_RARE
  CHAMPION_AMERICA_RARE_PRO
  CHAMPION_AMERICA_SUPER_RARE
  CHAMPION_AMERICA_UNIQUE
  CHAMPION_ASIA_LIMITED
  CHAMPION_ASIA_RARE
  CHAMPION_ASIA_RARE_PRO
  CHAMPION_ASIA_SUPER_RARE
  CHAMPION_ASIA_UNIQUE
  CHAMPION_EUROPE_LIMITED
  CHAMPION_EUROPE_RARE
  CHAMPION_EUROPE_RARE_PRO
  CHAMPION_EUROPE_SUPER_RARE
  CHAMPION_EUROPE_UNIQUE
  CHAMPION_JUPILER_RARE
  CHAMPION_JUPILER_RARE_PRO
  CHAMPION_JUPILER_SUPER_RARE
  CHAMPION_JUPILER_UNIQUE
  FIRST_DIVISION_ENGLAND_AMATEUR
  FIRST_DIVISION_ENGLAND_PRO
  FIRST_DIVISION_ENGLAND_SEMI_PRO
  FIRST_DIVISION_FRANCE_AMATEUR
  FIRST_DIVISION_FRANCE_PRO
  FIRST_DIVISION_FRANCE_SEMI_PRO
  FIRST_DIVISION_GERMANY_AMATEUR
  FIRST_DIVISION_GERMANY_PRO
  FIRST_DIVISION_GERMANY_SEMI_PRO
  FIRST_DIVISION_ITALY_AMATEUR
  FIRST_DIVISION_ITALY_PRO
  FIRST_DIVISION_ITALY_SEMI_PRO
  FIRST_DIVISION_SPAIN_AMATEUR
  FIRST_DIVISION_SPAIN_PRO
  FIRST_DIVISION_SPAIN_SEMI_PRO
  FIRST_DIVISION_US_AMATEUR
  FIRST_DIVISION_US_PRO
  FIRST_DIVISION_US_SEMI_PRO
  GLOBAL_ALL_STAR_LIMITED
  GLOBAL_ALL_STAR_RARE
  GLOBAL_ALL_STAR_RARE_PRO
  GLOBAL_ALL_STAR_SUPER_RARE
  GLOBAL_ALL_STAR_UNIQUE
  GLOBAL_ARENA_COMMON
  GLOBAL_ARENA_LIMITED
  GLOBAL_ARENA_RARE
  GLOBAL_ARENA_SUPER_RARE
  GLOBAL_ARENA_UNCAPPED_LIMITED
  GLOBAL_ARENA_UNCAPPED_RARE
  GLOBAL_ARENA_UNCAPPED_SUPER_RARE
  GLOBAL_ARENA_UNCAPPED_UNIQUE
  GLOBAL_ARENA_UNIQUE
  GLOBAL_CAP_220_LIMITED
  GLOBAL_CAP_220_RARE
  GLOBAL_CAP_220_SUPER_RARE
  GLOBAL_CAP_220_UNIQUE
  GLOBAL_CAP_240_LIMITED
  GLOBAL_CAP_240_RARE
  GLOBAL_CAP_240_SUPER_RARE
  GLOBAL_CAP_240_UNIQUE
  GLOBAL_CAP_270_LIMITED
  GLOBAL_CAP_270_RARE
  GLOBAL_CAP_270_SUPER_RARE
  GLOBAL_CAP_270_UNIQUE
  GLOBAL_KICKOFF_LIMITED
  GLOBAL_KICKOFF_RARE
  GLOBAL_KICKOFF_SUPER_RARE
  GLOBAL_KICKOFF_UNIQUE
  GLOBAL_ONBOARDING_COMMON
  GLOBAL_ONBOARDING_PRO
  GLOBAL_SPECIALIST_LIMITED
  GLOBAL_SPECIALIST_RARE
  GLOBAL_SPECIALIST_SUPER_RARE
  GLOBAL_SPECIALIST_SUPER_RARE_UNIQUE
  GLOBAL_SPECIALIST_UNIQUE
  GLOBAL_UNDERDOG_LIMITED
  GLOBAL_UNDERDOG_RARE
  GLOBAL_UNDERDOG_SUPER_RARE
  GLOBAL_UNDERDOG_UNIQUE
  GLOBAL_UNDER_TWENTY_ONE_LIMITED
  GLOBAL_UNDER_TWENTY_ONE_RARE
  GLOBAL_UNDER_TWENTY_ONE_RARE_PRO
  GLOBAL_UNDER_TWENTY_ONE_SUPER_RARE
  GLOBAL_UNDER_TWENTY_ONE_UNIQUE
  GLOBAL_UNIQUE_ONLY
  IN_SEASON_CHALLENGERS_COMMON
  IN_SEASON_CHALLENGERS_COMMON_PERMANENT
  IN_SEASON_CHALLENGERS_COMMON_PRO
  IN_SEASON_CHALLENGERS_LIMITED
  IN_SEASON_CHALLENGERS_RARE
  IN_SEASON_CHALLENGERS_SUPER_RARE
  IN_SEASON_CHALLENGERS_UNIQUE
  IN_SEASON_CHAMPIONS_COMMON
  IN_SEASON_CHAMPIONS_COMMON_PERMANENT
  IN_SEASON_CHAMPIONS_COMMON_PRO
  IN_SEASON_CHAMPIONS_LIMITED
  IN_SEASON_CHAMPIONS_RARE
  IN_SEASON_CHAMPIONS_SUPER_RARE
  IN_SEASON_CHAMPIONS_UNIQUE
  IN_SEASON_CONTENDERS_COMMON
  IN_SEASON_CONTENDERS_COMMON_PERMANENT
  IN_SEASON_CONTENDERS_COMMON_PRO
  IN_SEASON_CONTENDERS_LIMITED
  IN_SEASON_CONTENDERS_RARE
  IN_SEASON_CONTENDERS_SUPER_RARE
  IN_SEASON_CONTENDERS_UNIQUE
  IN_SEASON_ENGLAND_COMMON
  IN_SEASON_ENGLAND_COMMON_PERMANENT
  IN_SEASON_ENGLAND_COMMON_PRO
  IN_SEASON_ENGLAND_LIMITED
  IN_SEASON_ENGLAND_RARE
  IN_SEASON_ENGLAND_SUPER_RARE
  IN_SEASON_ENGLAND_UNIQUE
  IN_SEASON_FRANCE_COMMON
  IN_SEASON_FRANCE_LIMITED
  IN_SEASON_FRANCE_RARE
  IN_SEASON_FRANCE_SUPER_RARE
  IN_SEASON_GERMANY_COMMON
  IN_SEASON_GERMANY_LIMITED
  IN_SEASON_GERMANY_RARE
  IN_SEASON_GERMANY_SUPER_RARE
  IN_SEASON_GERMANY_UNIQUE
  IN_SEASON_GLOBAL_ALL_STAR_COMMON
  IN_SEASON_JUPILER_LIMITED
  IN_SEASON_JUPILER_RARE
  IN_SEASON_JUPILER_SUPER_RARE
  IN_SEASON_NETHERLANDS_LIMITED
  IN_SEASON_NETHERLANDS_RARE
  IN_SEASON_NETHERLANDS_SUPER_RARE
  IN_SEASON_SPAIN_COMMON
  IN_SEASON_SPAIN_LIMITED
  IN_SEASON_SPAIN_RARE
  IN_SEASON_SPAIN_SUPER_RARE
  IN_SEASON_SPAIN_UNIQUE
  IN_SEASON_US_COMMON
  IN_SEASON_US_LIMITED
  IN_SEASON_US_RARE
  IN_SEASON_US_SUPER_RARE
  IN_SEASON_US_UNIQUE
  LEGEND
  LEGEND_PRO
  MLB_COMMON_ALL_STAR
  MLB_COMMON_DAILY_DERBY
  MLB_COMMON_DAILY_DERBY_ONBOARDING
  MLB_COMMON_DAILY_SWING
  MLB_COMMON_MINORS
  MLB_COMMON_PROSPECT
  MLB_COMMON_WEEKLY
  MLB_LIMITED_ALL_STAR
  MLB_LIMITED_AMERICAN_LEAGUE
  MLB_LIMITED_CHALLENGER
  MLB_LIMITED_CHAMPION
  MLB_LIMITED_DAILY_DERBY
  MLB_LIMITED_DAILY_SWING
  MLB_LIMITED_MAJORS
  MLB_LIMITED_NATIONAL_LEAGUE
  MLB_LIMITED_PRO
  MLB_LIMITED_SPECIAL
  MLB_LIMITED_SPECIAL_DAILY
  MLB_LIMITED_UNDER_25
  MLB_LIMITED_VAULT
  MLB_LIMITED_WEEKLY
  MLB_MONTHLY_CHASE_COMMON
  MLB_MONTHLY_CHASE_LIMITED
  MLB_MONTHLY_CHASE_RARE
  MLB_MONTHLY_CHASE_SUPER_RARE
  MLB_MONTHLY_CHASE_UNIQUE
  MLB_RARE_ALL_STAR
  MLB_RARE_AMERICAN_LEAGUE
  MLB_RARE_CHALLENGER
  MLB_RARE_CHAMPION
  MLB_RARE_DAILY_DERBY
  MLB_RARE_DAILY_SWING
  MLB_RARE_NATIONAL_LEAGUE
  MLB_RARE_PRO
  MLB_RARE_SPECIAL
  MLB_RARE_SPECIAL_DAILY
  MLB_RARE_UNDER_25
  MLB_RARE_VAULT
  MLB_RARE_WEEKLY
  MLB_SANDLOT
  MLB_SUPER_RARE_ALL_STAR
  MLB_SUPER_RARE_AMERICAN_LEAGUE
  MLB_SUPER_RARE_CHALLENGER
  MLB_SUPER_RARE_CHAMPION
  MLB_SUPER_RARE_DAILY_DERBY
  MLB_SUPER_RARE_DAILY_SWING
  MLB_SUPER_RARE_NATIONAL_LEAGUE
  MLB_SUPER_RARE_PRO
  MLB_SUPER_RARE_SPECIAL
  MLB_SUPER_RARE_SPECIAL_DAILY
  MLB_SUPER_RARE_UNDER_25
  MLB_SUPER_RARE_VAULT
  MLB_SUPER_RARE_WEEKLY
  MLB_TRAINING
  MLB_UNIQUE_ALL_STAR
  MLB_UNIQUE_CHALLENGER
  MLB_UNIQUE_CHAMPION
  MLB_UNIQUE_DAILY_DERBY
  MLB_UNIQUE_DAILY_SWING
  MLB_UNIQUE_PRO
  MLB_UNIQUE_SPECIAL
  MLB_UNIQUE_SPECIAL_DAILY
  MLB_UNIQUE_UNDER_25
  MLB_UNIQUE_VAULT
  MLB_UNIQUE_WEEKLY
  NBA_COMMON_CHAMPION
  NBA_COMMON_CONTENDER
  NBA_COMMON_DAILY
  NBA_COMMON_DAILY_HOOPS
  NBA_COMMON_DAILY_PICKUP
  NBA_COMMON_DAILY_SPECIAL
  NBA_COMMON_TIP_OFF
  NBA_LIMITED_ARENA_140
  NBA_LIMITED_ARENA_75
  NBA_LIMITED_ARENA_UNCAPPED
  NBA_LIMITED_CHALLENGER
  NBA_LIMITED_CHAMPION
  NBA_LIMITED_CONTENDER
  NBA_LIMITED_DAILY
  NBA_LIMITED_DAILY_HOOPS
  NBA_LIMITED_DAILY_SPECIAL
  NBA_LIMITED_IN_SEASON_CHAMPION
  NBA_LIMITED_IN_SEASON_CONTENDER
  NBA_LIMITED_IN_SEASON_UNDERDOG
  NBA_LIMITED_TIP_OF
  NBA_LIMITED_UNDERDOG
  NBA_RARE_ARENA_140
  NBA_RARE_ARENA_75
  NBA_RARE_ARENA_UNCAPPED
  NBA_RARE_CHALLENGER
  NBA_RARE_CHAMPION
  NBA_RARE_CONTENDER
  NBA_RARE_DAILY
  NBA_RARE_DAILY_HOOPS
  NBA_RARE_DAILY_SPECIAL
  NBA_RARE_IN_SEASON_CHAMPION
  NBA_RARE_IN_SEASON_CONTENDER
  NBA_RARE_IN_SEASON_UNDERDOG
  NBA_RARE_UNDERDOG
  NBA_SUPER_RARE_ARENA_140
  NBA_SUPER_RARE_ARENA_75
  NBA_SUPER_RARE_ARENA_UNCAPPED
  NBA_SUPER_RARE_CHALLENGER
  NBA_SUPER_RARE_CHAMPION
  NBA_SUPER_RARE_CONTENDER
  NBA_SUPER_RARE_DAILY
  NBA_SUPER_RARE_DAILY_HOOPS
  NBA_SUPER_RARE_DAILY_SPECIAL
  NBA_SUPER_RARE_IN_SEASON_CHAMPION
  NBA_SUPER_RARE_IN_SEASON_CONTENDER
  NBA_TRAINING
  NBA_UNIQUE_CHAMPION
  NBA_UNIQUE_CONTENDER
  NBA_UNIQUE_DAILY
  NBA_UNIQUE_DAILY_HOOPS
  NBA_UNIQUE_DAILY_SPECIAL
  NBA_UNIQUE_IN_SEASON_CHAMPION
  NBA_UNIQUE_IN_SEASON_CONTENDER
  SECOND_DIVISION_EUROPE_LIMITED
  SECOND_DIVISION_EUROPE_RARE
  SECOND_DIVISION_EUROPE_RARE_PRO
  SECOND_DIVISION_EUROPE_SUPER_RARE
  SECOND_DIVISION_EUROPE_UNIQUE
  SPECIAL_GLOBAL_CUP
  SPECIAL_TRAINING_CENTER
  SPECIAL_WEEKLY
  STARTER_ACADEMY_ADVANCED
  STARTER_ACADEMY_INTERMEDIATE
  STARTER_ACADEMY_NOVICE
  STARTER_ACADEMY_PROFICIENT
  STARTER_ROOKIE
}

"""
A So5 league
"""
type So5League implements Node & So5LeaderboardGroupInterface {
  bannerUrl: String!
  canCompose: Validity!
  category: String!
  color(
    """
    Default to secondary
    """
    variant: ColorVariant = SECONDARY
  ): String!
  compactBannerUrl: String
  competitions: [Competition!]!
  cutOffDate: ISO8601DateTime!
  description: String!
  displayName: String!
  eligibleCardsCountByPosition: [UserCardsCount!]!
  featured: Boolean!
  featuredBannerUrl: String!

  """
  The `games` field cannot be nested within a list.
  """
  games: [Game!]!
  hasLeaderboards: Boolean!
  headerBackgroundUrl(seasonality: So5LeaderboardSeasonality): String!
  headerUrl(nonSvg: Boolean @deprecated(reason: "Not used anymore")): String!
  highlightedRecommendations(positions: [Position!], recommendationEngine: RecommendationEngine!, sport: Sport!): [PlayerRecommendation!]!
  iconUrl: String!
  id: ID!
  leagueSummary: String
  lockType: LockTypeEnum
  logoUrl: String!

  """
  Eligible rewards until so5 fixture is closed, actual so5 rewards after
  """
  myEligibleOrSo5Rewards: [So5RewardOrConfig!]!

  """
  The `my_so5_games` field cannot be nested within a list.
  """
  mySo5Games: [Game!]!
  mySo5LeaderboardContenders(includeHiddenManagerTeam: Boolean, sortType: So5LeaderboardContenderSort): [So5LeaderboardContender!]!
  mySo5Leaderboards: [So5Leaderboard!]!
  myThresholdsStreakTasks: [ThresholdsStreakTask!]!
  name: String!

  """
  The `ordered_player_game_scores` field cannot be nested within a list.
  """
  orderedPlayerGameScores(first: Int!): [OrderedPlayerGameScores!]!

  """
  Get ordered PlayerGameScore by position (default to all positions)
  """
  orderedPlayerGameScoresByPosition(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    minScore: Int
    position: String @deprecated(reason: "Use positions_typed instead")
    positionsTyped: [Position!]
    sellable: Boolean
  ): PlayerGameScoreInterfaceConnection!

  """
  The `ordered_so5_scores` field cannot be nested within a list.
  """
  orderedSo5Scores(first: Int!): [OrderedSo5Scores!]!

  """
  Get ordered So5Score by position (default to all positions)
  """
  orderedSo5ScoresByPosition(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    minScore: Int
    myCardsRarities: [Rarity!]
    position: String @deprecated(reason: "Use positions_typed instead")
    positionsTyped: [Position!]
    sellable: Boolean
  ): So5ScoreConnection!
  percentageOfGamesPlayed: Float!
  pictureUrl(seasonality: So5LeaderboardSeasonality): String
  quickAdd: Boolean! @deprecated(reason: "No longer used")
  rewardPool(quality: String!, rarity: String!): [PlayerWithSupply!]!
  rewardPoolComputedAt: ISO8601DateTime
  scoringMatrix: ScoringMatrix!
  seasonalities: [So5LeaderboardSeasonality!]!
  shortDescription: String
  shortDisplayName: String!
  slug: String!
  so5Competition: So5Competition!
  so5Fixture: So5Fixture!
  so5LeaderboardContenders(includeHiddenManagerTeam: Boolean, sortType: So5LeaderboardContenderSort, userSlug: String!): [So5LeaderboardContender!]!
  so5Leaderboards: [So5Leaderboard!]!
  so5LeagueTrack(slug: String!): So5LeagueTrack
  so5LeagueTrackGroup(slug: String!): So5LeagueTrackGroup
  so5LeagueTrackGroups: [So5LeagueTrackGroup!]!
  so5LeagueTracks: [So5LeagueTrack!]!
  so5LineupsCount: Int!
  squarePictureUrl: String!
  stadiumUrl(boostedRewards: Boolean, seasonality: So5LeaderboardSeasonality): String
  tileBackgroundUrl: String
  topRecommendations(
    playingHomeOnly: Boolean
    positions: [Position!]

    """
    Full text search query to filter cards
    """
    query: String
    recommendationEngine: RecommendationEngine!
    sortType: EligibleCardsSort
    sport: Sport!

    """
    The player starting prediction to filter on
    """
    starterOddsBasisPointsRange: RangeInput
  ): [PlayerRecommendation!]!
  totalRewardConfigs(highestConfigByType: Boolean, onlyPlayable: Boolean, seasonality: So5LeaderboardSeasonality): [AnyRewardConfigInterface!]!
  totalRewards(seasonality: So5LeaderboardSeasonality): RewardsOverview!
  unlockedWithAnyCard: AnyCardInterface @deprecated(reason: "No longer used")
  vaultPointsRequired: Boolean!
}

"""
A So5 League Track
"""
type So5LeagueTrack {
  canCompose: Validity!
  completed: Boolean
  displayName: String!
  entrySo5Leaderboard: So5Leaderboard!
  groupSlug: String!
  iconUrl: String
  maxManagerTeamsCount: Int!
  myManagerTeams: [ManagerTeam!]!
  mySo5LeaderboardContenders(includeHiddenManagerTeam: Boolean, sortType: So5LeaderboardContenderSort): [So5LeaderboardContender!]!
  myThresholdsStreakTask: ThresholdsStreakTask
  seasonality: So5LeaderboardSeasonality
  seasonalityName: String
  slug: String!
  so5Leaderboards: [So5Leaderboard!]!
  so5LineupsCount: Int!
  totalRewardConfigs(highestConfigByType: Boolean): [AnyRewardConfigInterface!]!
  totalRewards: RewardsOverview!
  unlockedManagerTeamsCount: Int!
}

"""
A So5 League Track
"""
type So5LeagueTrackGroup {
  displayName: String!
  mainRarityType: Rarity
  seasonalities: [So5LeaderboardSeasonality!]!
  slug: String!
  so5LeagueTracks: [So5LeagueTrack!]!
  so5LineupsCount: Int!
}

"""
A SO5 lineup
"""
type So5Lineup implements Node & SocialPicturesInterface {
  anyEarliestGame: AnyGameInterface
  bonusPoints: Float
  bonusRating: BonusOrdinalRatingEnum
  bonuses: [So5AppearanceBonusInterface!]!
  cancelledAt: ISO8601DateTime
  cancelledReason: String
  confirmable: Boolean!
  deletable: Boolean!
  draft: Boolean!
  earliestGame: Game
  hasLiveGames: Boolean!
  id: ID!
  managerTeam: ManagerTeam
  missingCaptain: Boolean!
  myThresholdsStreakTask: ThresholdsStreakTask
  name: String
  rewardMultiplier: Float!
  scheduledCaptainSo5Appearance: Boolean!
  scheduledSo5AppearancesCount: Int!
  so5Appearances: [So5Appearance!]!
  so5Fixture: So5Fixture!
  so5Leaderboard: So5Leaderboard
  so5LeaderboardContender: So5LeaderboardContender!

  """
  Only 1 ranking is returned. An array because a lineup could be played in multiple leaderboards previously.
  """
  so5Rankings: [So5Ranking!]!
  socialPictureFingerprint: String!
  socialPictureUrls: SocialPictureDerivative!
  updatable: Boolean!
  user: User!
}

"""
The lineup bonus of an appearance
"""
type So5LineupBonus implements So5AppearanceBonusInterface {
  bonusBasisPoints: Int!
  description: String
  iconUrl: String!
  key: String!
  maxBonusBasisPoints: Int!
  smallIconUrl: String!
  title: String!
}

"""
The connection type for So5Lineup.
"""
type So5LineupConnection {
  """
  A list of edges.
  """
  edges: [So5LineupEdge!]!
  hasAny: Boolean!

  """
  A list of nodes.
  """
  nodes: [So5Lineup!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type So5LineupEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: So5Lineup
}

"""
A So5 lineup import
"""
type So5LineupImport implements Node {
  aasmState: So5LineupImportState!
  appearances: [ImportedSo5Appearance!]!
  errorMessage: String
  id: ID!
  managerTeam: ManagerTeam
  so5Leaderboard: So5Leaderboard
}

"""
A So5 lineup import input
"""
input So5LineupImportInput {
  managerTeamId: ID
  shouldCreateManagerTeam: Boolean
  so5Appearances: [So5AppearanceInput!]!
  so5LeaderboardSlug: String!
  targetedRewardSlug: String
}

enum So5LineupImportState {
  DECLINED
  EXPIRED
  FAILED
  PREPARED
  PREPARING
  PROCESSED
  PROCESSING
}

type So5LineupImportsBatch {
  cancelledSo5Lineups: [So5Lineup!]
  id: String!
  so5LineupImports: [So5LineupImport!]!
  status: So5LineupImportsBatchStatus!
  url: String!
}

enum So5LineupImportsBatchStatus {
  DECLINED
  EXPIRED
  PREPARED
  PREPARING
  PROCESSED
  PROCESSING
}

"""
A user notification regarding a So5Lineup
"""
type So5LineupNotification implements Node & NotificationInterface {
  anyCard: AnyCardInterface
  body: String!
  createdAt: ISO8601DateTime!
  deeplinkUrl: String!
  iconUrl: String!
  id: ID!
  important: Boolean!
  markdownBody: String!
  name: String!
  pictureUrl: String
  read: Boolean!
  so5Lineup: So5Lineup!
  sport: SportOrShared
  title: String!
  user: CurrentUser!
}

"""
Live lineup information
"""
type So5LineupPreview {
  appearances: [So5AppearancePreview!]!
  bonuses: [So5AppearanceBonusInterface!]!
  consumedEnergies: [InGameCurrencyBalance!]!
  feedbackRules: [So5RuleFeedback!]
  rewardBoosts: [So5RewardBoostInterface!]!
  rewardMultiplier: Float!
  rewardsConfig: LeaderboardRewardsConfig!
}

type So5LineupSimulatedResult {
  score: Float!
  so5Fixture: So5Fixture!
}

type So5LineupSimulatedResults {
  averageLineupScore: Float!
  simulatedResults: [So5LineupSimulatedResult!]!
}

"""
The malus after transfer of a card
"""
type So5MalusAfterTransferBonus implements So5AppearanceBonusInterface {
  bonusBasisPoints: Int!
  description: String
  iconUrl: String!
  key: String!
  maxBonusBasisPoints: Int!
  smallIconUrl: String!
  title: String!
}

type So5MaximumPlayersAverageScoreRule implements So5RuleInterface {
  averageScoreBoundaries: AverageScoreOpenBoundaries!
  descriptions: [So5RuleDescription!]!
  key: String!
}

type So5MinimumPlayersAverageScoreRule implements So5RuleInterface {
  averageScoreBoundaries: AverageScoreOpenBoundaries!
  descriptions: [So5RuleDescription!]!
  key: String!
}

"""
The nationality bonus of an appearance
"""
type So5NationalityBonus implements So5AppearanceBonusInterface {
  bonusBasisPoints: Int!
  description: String
  iconUrl: String!
  key: String!
  maxBonusBasisPoints: Int!
  smallIconUrl: String!
  title: String!
}

"""
The nationality rule of a So5Leaderboard
"""
type So5NationalityRule implements So5RuleInterface {
  countries: [Country!]!
  descriptions: [So5RuleDescription!]!
  key: String!
  max: Int
  min: Int
}

"""
An Appearance of a So5NoCardLineup
"""
type So5NoCardAppearance {
  player: Player
  position: Position
  positions: [Position!]
  so5Score: So5Score
}

"""
A draftable player
"""
type So5NoCardDraftableAppearance {
  anyTeam: TeamInterface
  bonus: Float
  id: ID!
  player: AnyPlayer!
  position: Position!
  positions: [Position!]!
  season: Season!
}

"""
A So5NoCardLineup
"""
type So5NoCardLineup implements Node {
  appearances: [So5NoCardAppearance!]!
  id: ID!
  so5Fixture: So5Fixture!
  so5Leaderboard: So5Leaderboard
  user: User!
}

"""
A picking config for a So5Fixture No Card Route
"""
type So5NoCardRouteFixturePickConfig {
  id: ID!
  name: String!
  pickingSlots: [So5NoCardRoutePickingSlot!]!
  signature: String!
}

"""
So5 No Card Route Picking Slot
"""
type So5NoCardRoutePickingSlot {
  index: Int!
  name: String!
  positions: [Position!]!
}

"""
An onboarding promotional event on So5
"""
type So5OnboardingPromotionalEvent {
  endDate: ISO8601DateTime!
  id: ID!
  myPromotionalEvent: AirdropPromotionalEvent
  so5Leaderboard: So5Leaderboard!
}

"""
The player bonus of an appearance
"""
type So5PlayerBonus implements So5AppearanceBonusInterface {
  bonusBasisPoints: Int!
  description: String
  iconUrl: String!
  key: String!
  maxBonusBasisPoints: Int!
  smallIconUrl: String!
  title: String!
}

type So5PlayerLoyaltyRewardBoost implements So5RewardBoostInterface {
  boostLevel: BoostLevel!
  maximumBoostLevel: BoostLevel!
  nbCards: Int!
  nextBoostLevel: BoostLevel
  player: AnyPlayerInterface!
  points: Int!
  rarity: Rarity!
}

"""
A podium in a So5 Leaderboard
"""
type So5Podium {
  count: Int!
  displayName(short: Boolean): String!
  ranking: Int!
  so5LeaderboardType: So5LeaderboardType!
  svgLogoUrl: String!
}

"""
The position bonus of an appearance
"""
type So5PositionBonus implements So5AppearanceBonusInterface {
  bonusBasisPoints: Int!
  description: String
  iconUrl: String!
  key: String!
  maxBonusBasisPoints: Int!
  smallIconUrl: String!
  title: String!
}

"""
The position stacks bonus of an appearance
"""
type So5PositionStacksBonus implements So5AppearanceBonusInterface {
  bonusBasisPoints: Int!
  description: String
  iconUrl: String!
  key: String!
  maxBonusBasisPoints: Int!
  smallIconUrl: String!
  title: String!
}

"""
Potential So5 reward configs for a certain score
"""
type So5PotentialRewardConfigs {
  eligibleRewards: [So5RewardConfig!]!
  score: Float!
}

"""
A SO5 Ranking
"""
type So5Ranking implements Node & UserRankingInterface {
  adjacentSo5Rankings(delta: Int = 1): [So5Ranking!]!
  eligibleDivisionChange: DivisionChange
  eligibleForReward: Boolean!

  """
  Eligible rewards until so5 fixture is closed, actual so5 rewards after
  """
  eligibleOrSo5Rewards: [So5RewardOrConfig!]!
  eligibleRewards: [So5RewardConfig!]!
  id: ID!
  liveBestRanking: Int
  liveProjectedRanking: Int
  liveWorstRanking: Int
  lockedRewards: [So5RewardConfig!]!
  nextEligibleRewards: So5PotentialRewardConfigs
  overallRanking: Int
  overallScore: Float!
  previousEligibleRewards: So5PotentialRewardConfigs
  ranking: Int
  rankingRatio(top: Boolean): Int
  score: Float!
  so5Fixture: So5Fixture!
  so5Leaderboard: So5Leaderboard!
  so5Lineup: So5Lineup!
  so5Rewards: [So5Reward!]!
  targetedReward: So5RewardConfig
  targetedRewardWithEligibility: So5RewardConfigWithEligibility
  tiebreakerScore: Float! @deprecated(reason: "Not used anymore")
  unlockedRewards: [So5RewardConfig!]!
  user: User!
}

"""
The connection type for So5Ranking.
"""
type So5RankingConnection {
  """
  A list of edges.
  """
  edges: [So5RankingEdge!]!

  """
  A list of nodes.
  """
  nodes: [So5Ranking!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type So5RankingEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: So5Ranking
}

type So5RankingsPaginated {
  currentPage: Int!
  nodes: [So5Ranking!]!
  pages: Int!
  so5Rankings: [So5Ranking!]!
  totalCount: Int!
}

"""
The rarity rule of a So5Leaderboard
"""
type So5Rarity {
  common: ValueBoundaries!
  customSeries: ValueBoundaries!
  limited: ValueBoundaries!
  rare: ValueBoundaries!
  superRare: ValueBoundaries!
  unique: ValueBoundaries!
}

type So5RarityVaultRewardBoost implements So5RewardBoostInterface {
  boostLevel: BoostLevel!
  maximumBoostLevel: BoostLevel!
  nbCards: Int!
  nextBoostLevel: BoostLevel
  points: Int!
  rarity: Rarity!
}

"""
A SO5 Reward
"""
type So5Reward implements Node {
  aasmState: String!
  alternativeRewardConfigs: [AlternativeRewardConfig!]
  amount: MonetaryAmount
  coinAmount: Int!
  conversionCredit: FootballConversionCredit
  deliverableItems: [So5DeliverableItemReward!]
  id: ID!
  poolSize: Int!
  probabilisticBundle: ProbabilisticBundle
  rewardCards: [RewardCard!]!
  rewardConfigs(multiplyBaseRewards: Boolean = true): [AnyRewardConfigInterface!]!
  rewardMultiplier: Float!
  rewardShopItems: [FootballRewardShopItem!]!
  rewards: [AnyRewardInterface!]!
  slug: String!
  so5Fixture: So5Fixture!
  so5Leaderboard: So5Leaderboard!
  so5Ranking: So5Ranking
  so5UserGroupMembership: So5UserGroupMembership
  weiAmount: WeiAmount!
}

interface So5RewardBoostInterface {
  boostLevel: BoostLevel!
  maximumBoostLevel: BoostLevel!
  nbCards: Int!
  nextBoostLevel: BoostLevel
  points: Int!
  rarity: Rarity!
}

"""
A So5 Reward card config
"""
type So5RewardCardConfig {
  anyPlayer: AnyPlayerInterface
  customCardEditionName: String
  customCardEditionNames: [String!]
  description: String
  displayEdition: String
  player: Player
  playerSlugs: [String!]
  players: [AnyPlayerInterface!]
  qualities: [CardQuality!]
  quality: CardQuality
  quantity: Int!
  rarity: Rarity!
  teamSlugs: [String!]
  title: String
}

"""
A So5 Reward config
"""
type So5RewardConfig {
  arenaTickets: Int
  cardShardRewardConfigs: [CardShardRewardConfig!]
  cards: [So5RewardCardConfig!]
  coinAmount: Int
  conversionCredit: FootballConversionCredit
  deliverableItems: [So5DeliverableItemReward!]

  """
  Rewarded amount in ETH when fixed in ETH
  """
  ethAmount: Float
  experiences: [So5RewardExperience!]
  fromRank: Int
  fromSo5Ranking: So5Ranking
  fromUserRanking: UserRankingInterface
  id: ID!

  """
  Only available for carried over pool rewards
  """
  lastSo5Rewards: [So5Reward!]
  lockedBy: So5RewardConfigLock

  """
  Minimum USD amount guaranteed when prizes are in ETH
  """
  minimumGuaranteedUsdAmount: Float

  """
  If true, the pool amount is added over to the next occurence of the leaderboard when not distributed
  """
  poolAmountCarriedOver: Boolean!

  """
  Number of managers sharing the pool
  """
  poolSize: Int!
  probabilisticBundleConfigs: [ProbabilisticBundleConfig!]
  rankPct: Float
  ranks: Int
  rewardConfigs: [AnyRewardConfigInterface!]!
  rewardMultiplier: Float!
  score: Float

  """
  USD amount or conversion credit amount is shared between managers meeting the eligiblity criteria
  """
  sharedPool: Boolean!
  target: So5RewardTargetConfig
  toRank: Int
  toSo5Ranking: So5Ranking
  toUserRanking: UserRankingInterface

  """
  Rewarded amount in USD when fixed in USD
  """
  usdAmount: Float
}

type So5RewardConfigLock {
  lineupLiveFeedbacksRules(appearances: [So5AppearanceInput!]!): [So5RuleFeedback!]
  rules: [So5RuleInterface!]!
  slug: String!
}

"""
A So5 Reward config with its eligibility
"""
type So5RewardConfigWithEligibility {
  eligible: Boolean!
  reward: So5RewardConfig!
}

"""
The connection type for So5Reward.
"""
type So5RewardConnection {
  """
  A list of edges.
  """
  edges: [So5RewardEdge!]!

  """
  A list of nodes.
  """
  nodes: [So5Reward!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type So5RewardEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: So5Reward
}

"""
A So5 Leaderboard experience rewards config
"""
type So5RewardExperience {
  description: String
  pictureUrl: String
  title: String
  type: CustomRewardExperience!
}

"""
Actual So5 Reward or So5 Reward Config type
"""
union So5RewardOrConfig = So5Reward | So5RewardConfig

type So5RewardSource implements HistoryTransactionInterface {
  date: ISO8601DateTime!
  description: String
  id: String!
  label: String!
  logoUrl: String
  quantityByFlavour: [PoolKeyShardsCount!]!
  totalQuantity: Int!
}

"""
A So5 Reward target config
"""
type So5RewardTargetConfig {
  color: String!
  name: String!
  pictureUrl: String!
  slug: String!
}

"""
The So5 fields
"""
type So5Root {
  """
  Get a list of So5Fixture
  """
  allSo5Fixtures(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    eventType: So5FixtureEvent!

    """
    Returns the first _n_ elements from the list.
    """
    first: Int
    future: Boolean

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    sport: Sport!
  ): So5FixturePublicInterfaceConnection!
  campaign(slug: String!): So5Campaign
  campaigns(sport: Sport!): [So5Campaign!]!
  canImportLineups: Boolean!
  cardMaxGrade(sport: Sport!): Int!
  cardXpGradeThreshold(sport: Sport!): [CardXPGradeThreshold!]!
  cardXpLevelUpable(sport: Sport!): Boolean! @deprecated(reason: "All sports are now level upable")
  commonGameEndOfSeasonCountdown: CommonGameEndOfSeasonCountdown @deprecated(reason: "No longer used")
  composeTeamBenchObject(id: String!): ComposeTeamBenchObjectInterface!
  composeTeamBenchObjects(ids: [String!]!): [ComposeTeamBenchObjectInterface!]!
  currentManagerHasLiveGames(sport: Sport): Boolean!
  eligibleTournamentTypesForSo5UserGroups: [So5Tournament!]!
  eligibleTournamentsForSo5UserGroups: [So5UserGroupTournament!]!
  featuredSo5Fixtures(eventType: So5FixtureEvent, first: Int, sport: Sport): [So5Fixture!]!

  """
  Returns all the future leaderboards
  """
  futureLeaderboardsPaginated(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    rarities: [So5LeaderboardRarity!]
  ): So5LeaderboardConnection!
  gameDaysAfter(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    date: ISO8601Date

    """
    Returns the first _n_ elements from the list.
    """
    first: Int
    includeDate: Boolean = false

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    sport: Sport!
    timeZone: String!
  ): GameDayConnection!
  gameDaysBefore(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    date: ISO8601Date

    """
    Returns the first _n_ elements from the list.
    """
    first: Int
    includeDate: Boolean = false

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    sport: Sport!
    timeZone: String!
  ): GameDayConnection!
  id: ID!
  lineupPastSimulatedResults(last: Int, so5Appearances: [So5AppearanceInput!]!, so5LeaderboardType: So5LeaderboardType!): So5LineupSimulatedResults!
  managerTeam(id: ID!): ManagerTeam!
  myAvailableFixtureStory(sport: Sport): Story
  myFeaturedGamesWithCardsPreview(cardsPreviewLimit: Int, limit: Int, sport: Sport!): [GameWithCardsPreview!]!
  myFeaturedUniversalSo5UserGroup(sport: Sport!): So5UserGroup
  myLiveUniversalSo5UserGroup(sport: Sport!): So5UserGroup
  myOngoingAndRecentSo5Lineups: [So5Lineup!]!

  """
  Get the earliest live or upcoming So5Fixture with lineups for the current user, or the next upcoming if none
  """
  myOngoingSo5Fixture(eventType: So5FixtureEvent, sport: Sport): So5Fixture!
  myOpenedSo5LineupImportsBatch: So5LineupImportsBatch
  mySo5Cover(eventType: So5FixtureEvent, sport: Sport!): So5Cover!

  """
  The `my_so5_user_groups` field cannot be nested within a list.
  """
  mySo5UserGroups(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    statuses: [UserGroupStatus!]
  ): So5UserGroupConnection!
  myUpcomingLineupsPaginated(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    draft: Boolean

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    so5LeaderboardSlug: String
    training: Boolean
  ): So5LineupConnection!

  """
  The `my_user_groups` field cannot be nested within a list.
  """
  myUserGroups(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    statuses: [UserGroupStatus!]
  ): UserGroupInterfaceConnection!
  noCardRoute(eventType: So5FixtureEvent, sport: Sport): FootballSo5NoCardRouteRoot!
  onboardingAvailableFavoriteTeams(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    query: String
    sport: Sport!
  ): TeamInterfaceConnection!
  onboardingPromotionalEvent(sport: Sport!): So5OnboardingPromotionalEvent

  """
  Get a PlayerGameScoreInterface
  """
  playerGameScore(id: ID!): PlayerGameScoreInterface!
  seasonalityInYears(sport: Sport): [Int!]!
  seasonalityName(seasonality: So5LeaderboardSeasonality!, sport: Sport): String!

  """
  Get an So5Appearance
  """
  so5Appearance(id: ID!): So5Appearance!
  so5Competition(slug: String!): So5Competition!
  so5Competitions(scoutable: Boolean, sport: Sport!): [So5Competition!]!

  """
  Get a So5Fixture
  """
  so5Fixture(eventType: So5FixtureEvent, id: ID, slug: String, sport: Sport, type: So5State): So5Fixture

  """
  Get a list of So5Fixture
  """
  so5Fixtures(
    """
    Defaults to all except preparing and cancelled
    """
    aasmStates: [String!]

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    eventType: So5FixtureEvent

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    so5LeaderboardTypes: [So5LeaderboardType!]
    sport: Sport
  ): So5FixtureConnection!

  """
  Get a So5Leaderboard
  """
  so5Leaderboard(slug: String!): So5Leaderboard!
  so5LeaderboardContender(slug: String!): So5LeaderboardContender

  """
  Get a So5LeaderboardGroup
  """
  so5LeaderboardGroupInterface(slug: String!): So5LeaderboardGroupInterface!

  """
  Get a So5League
  """
  so5League(slug: String!): So5League!

  """
  Get a So5Lineup
  """
  so5Lineup(id: ID!): So5Lineup!
  so5LineupImportsBatch(id: String!): So5LineupImportsBatch

  """
  Get a So5Ranking
  """
  so5Ranking(id: ID!): So5Ranking!

  """
  Get a So5Reward
  """
  so5Reward(slug: String!): So5Reward!

  """
  Get a list of rewards
  """
  so5Rewards(ids: [String!]!): [So5Reward!]!

  """
  Get a So5Score
  """
  so5Score(id: ID!): So5Score!

  """
  Get a So5UserGroup
  """
  so5UserGroup(joinSecret: String, slug: String): So5UserGroup!

  """
  Get a So5UserGroupMembership
  """
  so5UserGroupMembership(id: String!): So5UserGroupMembership!

  """
  Overview of the available rewards in the upcoming leaderboard
  """
  totalUpcomingRewards(sport: Sport): RewardsOverview!

  """
  The `universal_so5_user_groups` field cannot be nested within a list.
  """
  universalSo5UserGroups(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    sport: Sport
    statuses: [UserGroupStatus!]
  ): So5UserGroupConnection!

  """
  The `universal_user_groups` field cannot be nested within a list.
  """
  universalUserGroups(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    statuses: [UserGroupStatus!]
  ): UserGroupInterfaceConnection!

  """
  Returns all the opened leaderboards
  """
  upcomingLeaderboards(competitionSlugs: [String!], rarities: [So5LeaderboardRarity!]): [So5Leaderboard!]!

  """
  Returns all the opened leaderboards
  """
  upcomingLeaderboardsPaginated(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    competitionSlugs: [String!]

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    rarities: [So5LeaderboardRarity!]
  ): So5LeaderboardConnection!
}

type So5RuleDescription {
  icon: String
  items: [So5RuleDescriptionItem!]!
  title: String!
}

type So5RuleDescriptionItem {
  icon: String
  title: String!
}

"""
The feedback message of a specific rule of a So5Leaderboard
"""
type So5RuleFeedback {
  message: String
  ruleName: String!
  state: So5RuleValidationState!
}

interface So5RuleInterface {
  descriptions: [So5RuleDescription!]!
  key: String!
}

enum So5RuleValidationState {
  INVALID
  VALID
  VALIDATABLE
}

"""
The rule set of a So5Leaderboard
"""
type So5Rules {
  activeClubStacks: [ValueOpenBoundaries!]
  activeClubs: [Club!]
  activeNationalTeams: [NationalTeam!]
  age: Age
  allowLegend: Boolean!
  anyCardTeams: [TeamInterface!]
  anyDraftTeams: [TeamInterface!]
  appearances: [AppearanceRule!]
  atLeastOfClubs: So5AtLeastOfClubs
  atLeastOfCompetitions: So5AtLeastOfCompetitions
  averageScores: AverageScoresRule
  captain: Json
  captainRarities: [String!]

  """
  Enforces restrictions on the card's editions in this leaderboard when set.
  """
  cardEditionsCount: CardEditionsCount
  cardTeams: [Team!] @deprecated(reason: "Use anyCardTeams instead")
  cardsCountAsFirstOwner: Int
  cardsCountOfCurrentUser: MaximumCardsCountOwnedByUser
  competitions: [Competition!]
  currentEditedSeason: [String!]
  currentUserGallery: GalleryCards
  dateRangeSpecific: DateRangeSpecific
  draftTeams: [Team!] @deprecated(reason: "Use anyDraftTeams instead")
  id: String!
  internationalCompetitions: [Competition!]
  leagues: [Competition!]
  lockType: LockTypeEnum!
  maximumPlayersAverageScore: AverageScoreOpenBoundaries
  minOrMaxSameNationality: ValueOpenBoundaries
  minimumPlayersAverageScore: AverageScoreOpenBoundaries
  nationalities: [Country!]
  nationalitiesCount: Nationality
  noClassicCommon: Boolean
  notDomesticCompetitions: [Competition!]
  notNationalities: [Country!]
  playerHeight: PlayerHeightRule
  rarities: [String!]
  rarityLimits: So5Rarity
  sameActiveClub: ValueOpenBoundaries
  sameNationality: Boolean
  seasonBonus: ValueOpenBoundaries @deprecated(reason: "Use seasonBonusForSpecificTeams instead")
  seasonBonusForSpecificTeams: SeasonBonus
  seasons: [Season!]
  serialNumber: String
  sport: Sport
  sumOfAverageScores: Int
}

"""
The same active club bonus of an appearance
"""
type So5SameActiveClubBonus implements So5AppearanceBonusInterface {
  bonusBasisPoints: Int!
  description: String
  iconUrl: String!
  key: String!
  maxBonusBasisPoints: Int!
  smallIconUrl: String!
  title: String!
}

type So5SameActiveClubRule implements So5RuleInterface {
  boundaries: ValueOpenBoundaries!
  descriptions: [So5RuleDescription!]!
  key: String!
}

"""
The scarcity bonus of an appearance
"""
type So5ScarcityBonus implements So5AppearanceBonusInterface {
  bonusBasisPoints: Int!
  description: String
  iconUrl: String!
  key: String!
  maxBonusBasisPoints: Int!
  smallIconUrl: String!
  title: String!
}

type So5ScarcityRule implements So5RuleInterface {
  descriptions: [So5RuleDescription!]!
  key: String!
  rarityLimits: So5Rarity!
}

"""
A SO5 Score
"""
type So5Score implements Node & PlayerGameScoreInterface {
  allAroundStats: [StatScore!]!
  anyGame: AnyGameInterface!
  anyPlayer: AnyPlayerInterface!
  anyPlayerGameStats: AnyPlayerGameStatsInterface!
  decisiveScore: StatScore
  detailedScore: [StatScore!]!
  game: Game!
  id: ID!
  negativeDecisiveStats: [StatScore!]!
  player: Player!
  playerGameStats: PlayerGameStats!
  position: String!
  positionTyped: Position!
  positiveDecisiveStats: [StatScore!]!
  projectedScore: Float!
  projection: PlayerGameScoreProjection
  score: Float!
  scoreStatus: ScoreStatus!
  scoringVersion: Int!
}

"""
The connection type for So5Score.
"""
type So5ScoreConnection {
  """
  A list of edges.
  """
  edges: [So5ScoreEdge!]!

  """
  A list of nodes.
  """
  nodes: [So5Score!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type So5ScoreEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: So5Score
}

"""
The season bonus of an appearance
"""
type So5SeasonBonus implements So5AppearanceBonusInterface {
  bonusBasisPoints: Int!
  description: String
  iconUrl: String!
  key: String!
  maxBonusBasisPoints: Int!
  smallIconUrl: String!
  title: String!
}

type So5SeasonBonusRule implements So5RuleInterface {
  boundaries: ValueOpenBoundaries!
  descriptions: [So5RuleDescription!]!
  energyCostPerAppearance: Int!
  immuneCountByRarity: [CountByRarity!]!
  key: String!
  maxEnergizedCardsCount: Int!
}

"""
The special edition card bonus of an appearance
"""
type So5SpecialEditionCardBonus implements So5AppearanceBonusInterface {
  bonusBasisPoints: Int!
  description: String
  iconUrl: String!
  key: String!
  maxBonusBasisPoints: Int!
  smallIconUrl: String!
  title: String!
}

enum So5State {
  LIVE
  LIVE_OR_PAST
  MY_ONGOING
  NEXT_WITH_TUTORIAL
  ONBOARDING
  PAST
  UPCOMING
}

type So5Tournament {
  displayName(short: Boolean): String!
  id: ID!
  so5LeaderboardType: So5LeaderboardType!
  svgLogoUrl: String!
}

"""
A trophy (card reward and/or podium) in a So5 Leaderboard
"""
type So5Trophies {
  cardRewards(rarity: Rarity): Int!

  """
  Number of rankings for closed fixtures
  """
  finalRankings: Int!
  podiumRankings(ranking: Int): Int!
  so5TournamentType: So5Tournament!
  totalMonetaryRewards(referenceCurrency: SupportedCurrency!): MonetaryAmount
}

"""
A SO5 User Group
"""
type So5UserGroup implements Node & UserGroupInterface {
  administrator: User
  canJoin: Validity!
  conversionCredit: ConversionCredit
  conversionCreditCampaign: ConversionCreditCampaign
  customEndDate: ISO8601DateTime
  description: String
  displayName: String!
  endGameWeek: Int
  endSo5Fixture: So5Fixture
  id: ID!
  joinDisabled: Boolean!
  joinRules: So5Rules!
  joinSecret: String!
  latestSo5Leaderboard: So5Leaderboard
  liveSo5Leaderboard: So5Leaderboard
  logo: SkinShopItem
  mainRarityType: Rarity
  membership(userSlug: String!): UserGroupMembershipInterface
  memberships: [UserGroupMembershipInterface!]!
  membershipsCount: Int!
  membershipsPaginated(page: Int, pageSize: Int): So5UserGroupMembershipsPaginated!
  myMembership: UserGroupMembershipInterface
  myTasks: [TaskInterface!]!

  """
  The `past_so5_leaderboards` field cannot be nested within a list.
  """
  pastSo5Leaderboards(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): So5LeaderboardConnection!
  pictureUrl: String
  publiclyAccessible: Boolean!
  rarityType: String!
  rewardsConfig: LeaderboardRewardsConfig!
  seasonality: So5LeaderboardSeasonality
  seasonalityInYears: [Int!]
  seasonalityName: String
  slug: String!
  so5LeaderboardType: So5LeaderboardType!

  """
  Get associated rewards. Empty until fixture is closed. The `so5_rewards` field cannot be nested within a list.
  """
  so5Rewards(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): So5RewardConnection!
  so5TournamentType: So5Tournament!
  startGameWeek: Int!
  startSo5Fixture: So5Fixture
  status: UserGroupStatus!
  svgLogoUrl: String!
  topScoresCount: Int
  totalRewardConfigs(highestConfigByType: Boolean): [AnyRewardConfigInterface!]!

  """
  High level overview of the rewards
  """
  totalRewards: RewardsOverview!
  tournament: So5UserGroupTournament!
  tournamentType: String!
  upcomingSo5Leaderboard: So5Leaderboard
}

"""
The connection type for So5UserGroup.
"""
type So5UserGroupConnection {
  """
  A list of edges.
  """
  edges: [So5UserGroupEdge!]!
  hasAny: Boolean!

  """
  A list of nodes.
  """
  nodes: [So5UserGroup!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type So5UserGroupEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: So5UserGroup
}

"""
A SO5 User Group membership
"""
type So5UserGroupMembership implements Node & UserGroupMembershipInterface & UserRankingInterface {
  administrator: Boolean!
  createdAt: ISO8601DateTime!
  eligibleRewards: [So5RewardConfig!]!
  id: ID!

  """
  So5Rankings for the last N game weeks ordered by descending game week, null if not existing
  """
  lastSo5Rankings(size: Int = 5): [So5Ranking]!
  liveSo5Ranking: So5Ranking
  overallRanking: Int
  overallScore: Float!
  ranking: Int
  score: Int!

  """
  So5LeaderboardContenders ordered by descending game week The
  `so5_leaderboard_contenders` field cannot be nested within a list.
  """
  so5LeaderboardContenders(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int
    includeUpcoming: Boolean = false

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): So5LeaderboardContenderConnection!

  """
  So5Rankings ordered by descending game week The `so5_rankings` field cannot be nested within a list.
  """
  so5Rankings(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): So5RankingConnection!
  so5UserGroup: So5UserGroup!
  topSo5LeaderboardContenders: [So5LeaderboardContender!]!
  topSo5Rankings: [So5Ranking!]
  user: User!
  userGroup: UserGroupInterface!
}

type So5UserGroupMembershipsPaginated {
  currentPage: Int!
  memberships: [UserGroupMembershipInterface!]!
  nodes: [UserGroupMembershipInterface!]!
  pages: Int!
  totalCount: Int!
}

"""
A user notification regarding a so5 user group
"""
type So5UserGroupNotification implements Node & NotificationInterface {
  body: String!
  createdAt: ISO8601DateTime!
  deeplinkUrl: String!
  iconUrl: String!
  id: ID!
  important: Boolean!
  markdownBody: String!
  membership: So5UserGroupMembership
  name: String!
  otherMembershipsCount: Int!
  pictureUrl: String
  read: Boolean!
  so5UserGroup: So5UserGroup!
  sport: SportOrShared
  title: String!
  user: CurrentUser!
  userGroup: UserGroupInterface!
  userGroupMembership: UserGroupMembershipInterface
}

"""
A SO5 User Group tournament
"""
type So5UserGroupTournament {
  id: ID!
  so5TournamentType: So5Tournament!
}

"""
A Social picture with all its derivative
"""
type SocialPictureDerivative {
  post: String
  square: String
  story: String
}

"""
Social pictures
"""
interface SocialPicturesInterface {
  socialPictureFingerprint: String!
  socialPictureUrls: SocialPictureDerivative!
}

"""
An encrypted private key
"""
type SorarePrivateKey {
  encryptedPrivateKey: String!
  iv: String!
  salt: String!
}

"""
An encrypted private key
"""
input SorarePrivateKeyAttributes {
  encryptedPrivateKey: String!
  iv: String!
  salt: String!
}

enum SortingOption {
  ASC
  DESC
}

type SortingType {
  description: String!
  name: String!
  readyAt: ISO8601DateTime
  relatedBenchPlayerScore: BenchPlayerScore!
  searchPlayersSorts: [String!]!
  type: BenchSortType!
}

"""
A promotional event taking place in the marketplace boosting special edition chances
"""
type SpecialEditionPromotionalEvent implements Node & PromotionalEventInterface {
  algoliaFilters: String!
  blogUrl: String
  description: String!
  eligibilityRules: EligibilityRules!
  endDate: ISO8601DateTime!
  hasInstantBuy: Boolean!
  id: ID!
  logoUrl: String
  marketBannerTitle: String!
  name: String!
  pictureUrl: String
  probableRewardConfigs: [ProbableRewardConfig!]!
  promotionType: PromotionType!
  revealableCardConfig: [RevealableCardConfig!]
  rewardsProbabilisticBundleConfig: [ProbabilisticBundleConfig!]!
  slug: String!
  sport: Sport!
  startDate: ISO8601DateTime!
  termsAndConditionsUrl: String
  title: String!
}

"""
A special event banner
"""
type SpecialWeeklyBanner implements Node {
  background: String
  cardUrl: String
  href: String
  hrefLabel: String
  id: ID!
  logoUrl: String
  pictureUrl(derivative: String = null): String
  prizeLabel: String
  sectionName: String
  slug: String!
  subtitle: String
  title: String!
}

enum Sport {
  BASEBALL
  FOOTBALL
  NBA
}

enum SportOrShared {
  BASEBALL
  FOOTBALL
  GLOBAL
  NBA
}

type SportSeason {
  endYear: Int!
  name: String!
  singleCivilYear: Boolean!
  startYear: Int!
}

"""
Stat of an entity in a sport
"""
type SportStat {
  name: String!
  unit: StatUnit!
  value: Float!
}

"""
A group of a Stage for a competition and season
"""
type StageGroup implements Node {
  contestants: [AnyContestantInterface!]!
  id: ID!
  name: String
}

input StarkSignatureInput {
  """
  Signature of the associated LimitOrder object, transported as JSON. Computed with `@sorare/crypto`.
  """
  data: String!

  """
  Mandatory if expirationTimestamp is not set
  """
  expiration: ISO8601DateTime

  """
  Required if expiration is not set
  """
  expirationTimestamp: Int

  """
  Nonce of the associated LimitOrder object. Retrieved through the `limitOrders` field.
  """
  nonce: Int!
  starkKey: String
}

input StarkexApprovalInput {
  expirationTimestamp: Int!
  nonce: Int!
  signature: StarkwareSignatureInput!
}

"""
A StarkEx limit order authorization request
"""
type StarkexLimitOrderAuthorizationRequest {
  amountBuy: WeiAmount!
  amountSell: WeiAmount!
  expirationTimestamp: Int!
  feeInfo: Fee
  nonce: Int!
  tokenBuy: String!
  tokenSell: String!
  vaultIdBuy: Int!
  vaultIdSell: Int!
}

"""
A StarkEx transfer authorization request
"""
type StarkexTransferAuthorizationRequest {
  amount: WeiAmount!
  condition: String
  expirationTimestamp: Int!
  feeInfoUser: Fee
  nonce: Int!
  receiverPublicKey: String!
  receiverVaultId: Int!
  senderVaultId: Int!
  token: String!
}

"""
A StarkexV6 Account
"""
type StarkexV6Account implements Node {
  address: String!
  id: ID!
  user: User
}

scalar StarkexV6Address

input StarkexV6TokenTransferApprovalInput {
  expirationTimestamp: Int!
  nonce: String!
  signature: String!
}

"""
A StarkExV6 token transfer authorization request
"""
type StarkexV6TokenTransferAuthorizationRequest {
  assetId: String!
  expirationTimestamp: Int!
  leafIndex: Int!
  merkleTreeAddress: StarkexV6Address!
  nonce: String!
  receiverAddress: String!
  senderAddress: String!
  transferProxyProgramAddress: StarkexV6Address!
}

"""
A Starkware Account
"""
type StarkwareAccount implements Node {
  id: ID!
  starkKey: String!
  user: User
}

"""
A Starkware Account
"""
type StarkwarePrivateAccount implements Node {
  availableBalance: WeiAmount!
  availableBalanceForWithdrawal: WeiAmount!
  id: ID!
  publicInfo: StarkwareAccount!
  totalBalance: WeiAmount!
  user: User
}

input StarkwareSignatureInput {
  r: String!
  s: String!
}

"""
Withdrawal of a token to Ethereum
"""
type StarkwareWithdrawal implements Node {
  aasmState: String!
  anyCard: AnyCardInterface
  destination: String
  ethereumTransaction: EthereumTransaction
  id: ID!
}

type StartingLineupRevealedActivity implements ActivitiesInterface & Node {
  celebratable: Boolean!
  createdAt: ISO8601DateTime!
  game: Game!
  id: ID!
  reactions: [ActivityReactionType!]!
}

enum StatCategory {
  ATTACKING
  DEFENDING
  GENERAL
  GOALKEEPING
  HITTING
  NEGATIVE_DECISIVE_STAT
  PASSING
  PITCHING
  POSITIVE_DECISIVE_STAT
  POSSESSION
  UNKNOWN
}

"""
Stat custom scoring
"""
type StatCustomScoring {
  customPoints: Float!
  points: Float!
  position: Position
  stat: String!
}

"""
Score contribution of a given stat
"""
type StatScore {
  category: StatCategory!
  points: Float!
  stat: String!
  statValue: Float!
  totalScore: Float!
}

enum StatUnit {
  FLOAT
  INTEGER
  PERCENTAGE
}

"""
Stats of a player for a competition
"""
type Stats {
  appearances: Int!
  assists: Int!
  goals: Int!
  id: String!
  minutesPlayed: Int!
  redCards: Int!
  season: Season
  substituteIn: Int!
  substituteOut: Int!
  yellowCards: Int!
}

"""
A story
"""
type Story implements Node {
  aasmState: StoryState!
  completedThresholdsStreakTasks: [ThresholdsStreakTask!]
  expiresAt: ISO8601DateTime
  id: ID!
  leveledUpCards: [LeveledUpCard!]
  readable: StoryReadable!
  userGroupMembershipShopItemUpdates: [UserGroupMembershipShopItemsUpdate!]
}

union StoryReadable = FootballRivalsChallenge | So5Fixture

enum StoryState {
  EXPIRED
  READ
  READY
}

"""
A Stripe credit card authorization request
"""
type StripeCreditCardAuthorizationRequest {
  amount: Int!
  clientSecret: String!
  currency: FiatCurrency!
  id: String!
  paymentMethod: String
  receiptUrl: String
}

"""
Object that can be subscribed to
"""
union Subscribable = BaseballCard | BaseballPlayer | Card | CardCollection | Club | Competition | Country | NBACard | NBAPlayer | Player | User | Watchlist

input SubscribableInput {
  slug: String!
  type: String!
}

enum SubscribableType {
  BASEBALL_CARD
  BASEBALL_PLAYER
  CARD
  COUNTRY
  NBA_CARD
  NBA_PLAYER
  PLAYER
  TEAM
  USER
  WATCHLIST
}

"""
Type of a subscriber to a new card, player, country or club related auction
"""
union Subscriber = CurrentUser

type Subscription {
  aGameWasUpdated(id: ID!): Game
  anyCardWasUpdated(ages: [Int!], cardEditions: [String!], events: [CardWasUpdatedEvent!], owned: Boolean, playerSlugs: [String!], positions: [Position!], rarities: [Rarity!], seasonStartYears: [Int!], serialNumbers: [Int!], shirtNumbers: [Int!], slugs: [String!], sports: [Sport!]): AnyCardSubscription
  currentUserWasUpdated: CurrentUser

  """
  Triggered on device update
  """
  deviceWasUpdated: UserDeviceEvent
  gameWasUpdated: Game

  """
  Triggered on primary offer opened/accepted/cancelled/ended
  """
  primaryOfferWasUpdated(sports: [Sport!]): TokenPrimaryOffer

  """
  Triggered on new bid or ended auction
  """
  tokenAuctionWasUpdated(sports: [Sport!]): TokenAuction

  """
  Triggered on offer accepted/cancelled/ended
  """
  tokenOfferWasUpdated(sports: [Sport!]): TokenOffer

  """
  Triggered on user card collection update
  """
  userCardCollectionWasUpdated(id: ID!): UserCardCollection
}

enum SupportedCurrency {
  EUR
  GBP
  USD
  WEI
}

"""
A player suspension
"""
type Suspension implements Node {
  active: Boolean!
  competition: Competition!
  endDate: ISO8601DateTime
  id: ID!
  kind: String
  matches: Int
  reason: String
  startDate: ISO8601DateTime!
}

"""
Task
"""
type Task implements ManagerTaskInterface & TaskInterface {
  aasmState: ManagerProgressionTaskState!
  alternativeRewardConfigs: [AlternativeRewardConfig!]
  cards: [AnyCardInterface!]!
  claimedAt: ISO8601DateTime
  color: String
  completedAt: ISO8601DateTime
  declarative: Boolean! @deprecated(reason: "Not used anymore")
  description: String!
  genre: TaskGenre!
  group: TaskGroup
  iconUrl: String
  id: String!
  name: ManagerProgressionTaskSlug!
  periodicity: ManagerTaskPeriodicity
  possibleRewardConfigsIconUrl: String
  probabilisticBundles: [ProbabilisticBundle!]!
  progress: Int!
  rarity: Rarity
  rewardConfigs(mergedConfigsByType: Boolean = false): [AnyRewardConfigInterface!]!
  target: Int!
  taskConfigSlug: String!
  templateIconUrl: String!
  title: String!
}

"""
Task Appearance
"""
type TaskAppearance implements TaskAppearanceInterface {
  card: AnyCardInterface!
  id: ID!
  index: Int!
  locked: Boolean!
  playerGameScore: PlayerGameScoreInterface
  task: TaskInterface!
}

"""
A Task Appearance - a card picked for a task
"""
input TaskAppearanceInput {
  cardSlug: String!
  index: Int!
}

interface TaskAppearanceInterface {
  card: AnyCardInterface!
  id: ID!
  index: Int!
  locked: Boolean!
  playerGameScore: PlayerGameScoreInterface
  task: TaskInterface!
}

"""
Task Campaign
"""
type TaskCampaign {
  color(variant: ColorVariant = PRIMARY): String!
  description: String!
  detailSections: [TaskCampaignDetailSection!]!
  endDate: ISO8601DateTime!
  headerUrl(mobile: Boolean): String!
  iconUrl: String!
  name: String!
  rewardConfigs(rarity: Rarity!): [AnyRewardConfigInterface!]!
  shareMessage: String
  shareUrl: String
  slug: String!
  tagIconUrl: String!
  tagLabel: String!
}

type TaskCampaignDetailSection {
  description: String!
  title: String!
}

type TaskCampaignsHomepage {
  campaigns: [TaskCampaignsHomepageCampaign!]!
  tutorial: TaskCampaignsHomepageTutorial!
}

type TaskCampaignsHomepageCampaign {
  color: String!
  description: String!
  iconUrl: String!
  slug: String!
  startDate: ISO8601DateTime
  title: String!
}

type TaskCampaignsHomepageTutorial {
  marketUrl: String!
  sections: [TaskCampaignsHomepageTutorialSection!]!
  viewStreaksUrl: String!
}

type TaskCampaignsHomepageTutorialSection {
  description: String!
  iconUrl: String!
  slug: String!
  title: String!
}

"""
Task Config
"""
type TaskConfig {
  """
  The `my_tasks` field cannot be nested within a list.
  """
  myTasks(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): TaskInterfaceConnection!
}

enum TaskGenre {
  COLLECTION
  COMMON_GAME_DAILY_CLAIM
  COMMON_GAME_DROP_CHALLENGE
  DAILY_WHEEL_TICKET
  FANTASY
  FOOTBALL_COMMON_END_OF_SEASON_2024
  HOT_STREAK
  MARKET
  MLB_COMPOSE_TEAM
  ONBOARDING_BEST_OF_EUROPE
  ONBOARDING_COMMON_GAME
  ONBOARDING_COMPOSE_FIRST_TEAM
  ONBOARDING_F2P
  PLAYOFFS_COMPOSE_TEAM
  RIVALS
}

"""
Task Group
"""
type TaskGroup {
  """
  The `campaigns` field cannot be nested within a list.
  """
  campaigns(rarity: Rarity, sport: Sport!): [TaskCampaign!]!
  myTasks(includingArchived: Boolean, rarity: Rarity, sport: Sport!, taskConfigSlug: String): [TaskInterface!]!
  slug: String!

  """
  
  """
  totalRewardConfigs(highestConfigByType: Boolean = true, sport: Sport!): [AnyRewardConfigInterface!]!
}

"""
Manager Task
"""
interface TaskInterface implements ManagerTaskInterface {
  aasmState: ManagerProgressionTaskState!
  alternativeRewardConfigs: [AlternativeRewardConfig!]
  cards: [AnyCardInterface!]!
  claimedAt: ISO8601DateTime
  color: String
  completedAt: ISO8601DateTime
  declarative: Boolean! @deprecated(reason: "Not used anymore")
  description: String!
  genre: TaskGenre!
  group: TaskGroup
  iconUrl: String
  id: String!
  name: ManagerProgressionTaskSlug!
  periodicity: ManagerTaskPeriodicity
  possibleRewardConfigsIconUrl: String
  probabilisticBundles: [ProbabilisticBundle!]!
  progress: Int!
  rarity: Rarity
  rewardConfigs(mergedConfigsByType: Boolean = false): [AnyRewardConfigInterface!]!
  target: Int!
  taskConfigSlug: String!
  templateIconUrl: String!
  title: String!
}

"""
The connection type for TaskInterface.
"""
type TaskInterfaceConnection {
  """
  A list of edges.
  """
  edges: [TaskInterfaceEdge!]!

  """
  A list of nodes.
  """
  nodes: [TaskInterface!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type TaskInterfaceEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: TaskInterface
}

"""
A user notification regarding a task.
"""
type TaskNotification implements Node & NotificationInterface {
  body: String!
  createdAt: ISO8601DateTime!
  deeplinkUrl: String!
  iconUrl: String!
  id: ID!
  important: Boolean!
  markdownBody: String!
  name: String!
  pictureUrl: String
  read: Boolean!
  sport: SportOrShared
  task: TaskInterface!
  title: String!
  user: CurrentUser!
}

type TaskSource implements HistoryTransactionInterface {
  date: ISO8601DateTime!
  description: String
  id: String!
  label: String!
  logoUrl: String
  quantityByFlavour: [PoolKeyShardsCount!]!
  totalQuantity: Int!
}

"""
Object that can be a team
"""
union Team = Club | NationalTeam

"""
A representation of team formation for a specific game
"""
type TeamFormation {
  bench: [Player!]!
  startingLineup: [[Player!]!]!
  startingLineupAvailable: Boolean!
}

interface TeamGameStatsInterface {
  id: ID!
  stats: [SportStat!]
}

interface TeamInterface implements WithSubscriptionsInterface {
  activeCompetitions: [Competition!]!

  """
  The `active_memberships` field cannot be nested within a list.
  """
  activeMemberships(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): MembershipConnection!

  """
  The `active_players` field cannot be nested within a list.
  """
  activePlayers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PlayerConnection!

  """
  The `any_active_players` field cannot be nested within a list.
  """
  anyActivePlayers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): AnyPlayerInterfaceConnection!

  """
  The `any_cards` field cannot be nested within a list.
  """
  anyCards(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String
    age: Int
    assetIds: [String!]

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    classicOnly: Boolean
    customCardEditionName: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int
    inActiveCompetitions: [String!]
    inOrderOfRarities: Boolean @deprecated(reason: "Use `sorts` instead")
    inSeasonEligible: Boolean

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    owned: Boolean
    ownedByMe: Boolean
    ownedSinceAfter: ISO8601DateTime
    playerSlugs: [String!]

    """
    positions of the card capitalized
    """
    positions: [Position!]

    """
    rarities of the card in lowercase
    """
    rarities: [Rarity!]
    recentlyOwnedFirst: Boolean @deprecated(reason: "Use `sorts` instead")
    revealable: Boolean
    revealableFirst: Boolean @deprecated(reason: "Use `sorts` instead")
    seasonStartYears: [Int!]
    serialNumber: Int
    shirtNumber: Int
    slugs: [String!]
    sorts: [CardSort!]
    sport: Sport
    teamSlugs: [String!]
    withinDeckFirst: String
  ): AnyCardInterfaceConnection!

  """
  The `any_games` field cannot be nested within a list.
  """
  anyGames(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    End time (inclusive) of the game.
    """
    endDate: ISO8601DateTime!

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Start time (inclusive) of the game.
    """
    startDate: ISO8601DateTime!
  ): AnyGameInterfaceConnection!

  """
  The `any_players` field cannot be nested within a list.
  """
  anyPlayers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): AnyPlayerInterfaceConnection!

  """
  The `any_recent_departures` field cannot be nested within a list.
  """
  anyRecentDepartures(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): AnyPlayerInterfaceConnection!
  code: String
  country: Country!
  currentUserSubscription: EmailSubscription
  dataPartner: DataPartner
  founded: String

  """
  The `games` field cannot be nested within a list.
  """
  games(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    End time (inclusive) of the game.
    """
    endDate: ISO8601DateTime!

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Start time (inclusive) of the game.
    """
    startDate: ISO8601DateTime!
  ): GameConnection!
  id: ID!
  lastFiveAnyGames: [AnyGameInterface!]!
  lastFiveGames: [Game!]!

  """
  The `latest_any_games` field cannot be nested within a list.
  """
  latestAnyGames(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int
    includingLive: Boolean

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): AnyGameInterfaceConnection!

  """
  The `latest_games` field cannot be nested within a list.
  """
  latestGames(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int
    includingLive: Boolean

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): GameConnection!
  name: String!
  officialName: String!
  optaId: String
  pictureSecondaryUrl: String
  pictureUrl(derivative: String = "low_res"): String

  """
  The `players` field cannot be nested within a list.
  """
  players(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PlayerConnection!
  ready: Boolean!

  """
  The `recent_departures` field cannot be nested within a list.
  """
  recentDepartures(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PlayerConnection!
  shortName: String!
  slug: String!
  styleGuideColor: String
  subscriptionsCount: Int!
  upcomingAnyGames(first: Int!): [AnyGameInterface]!
  upcomingGames(first: Int!): [Game]!
  withSellablePlayers(withSingleSales: Boolean): Boolean!
}

"""
The connection type for TeamInterface.
"""
type TeamInterfaceConnection {
  """
  A list of edges.
  """
  edges: [TeamInterfaceEdge!]!

  """
  A list of nodes.
  """
  nodes: [TeamInterface!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type TeamInterfaceEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: TeamInterface
}

type TeamVariantStock {
  id: String!
  outOfStock: Boolean!
  team: Team!
}

"""
Teams playing in the upcoming So5 Fixture
"""
type TeamsPlayingNextGameWeek {
  endDate: ISO8601DateTime!
  gameWeek: Int!
  longDisplayName: String!
  shortDisplayName: String!
  slug: String!
  startDate: ISO8601DateTime!
  teamSlugs: [String!]!
}

enum TermsAndConditionsStatus {
  """
  Has approved the latest TCUs
  """
  ACCEPTED

  """
  Has never approved any TCUs
  """
  INITIAL

  """
  Has approved TCUs but those are now outdated
  """
  OUTDATED
}

"""
A three dimensional asset
"""
type ThreeDimensionalAsset {
  backNormalUrl: String!
  backUrl: String!
  caseUsdzUrl: String
  frontNormalUrl: String!
  frontUrl: String!
  gltfUrl: String!
}

"""
Represents a three dimensional card layout
"""
type ThreeDimensionalCardLayout {
  backgroundNormalUrl: String
}

enum ThresholdStreakTaskCurrentThresholdState {
  CLAIMED
  COMPLETED
  FAILED
  LIVE_LINEUP_HIT
  LIVE_LINEUP_IN_PROGRESS
  LIVE_LINEUP_MISSED
  LIVE_LINEUP_NOT_SET
  NO_UPCOMING_FIXTURE
  UPCOMING_LINEUP_NOT_SET
  UPCOMING_LINEUP_SET
}

type ThresholdStreakTaskCurrentThresholdStatus {
  claimableAt: ISO8601DateTime
  liveScore: Float
  state: ThresholdStreakTaskCurrentThresholdState!
}

type ThresholdStreakTaskThreshold {
  current: Boolean!
  originalRewardConfigs: [AnyRewardConfigInterface!]
  originalScore: Int
  rewardConfigs: [AnyRewardConfigInterface!]!
  score: Int!
}

"""
Thresholds Duo Connection Task
"""
type ThresholdsDuoConnectionTask implements ManagerTaskInterface & TaskInterface {
  aasmState: ManagerProgressionTaskState!
  alternativeRewardConfigs: [AlternativeRewardConfig!]
  campaign: TaskCampaign
  cards: [AnyCardInterface!]!
  claimedAt: ISO8601DateTime
  color: String
  completedAt: ISO8601DateTime
  connectedLineup: So5Lineup
  connectedUser: User!
  declarative: Boolean! @deprecated(reason: "Not used anymore")
  description: String!
  genre: TaskGenre!
  group: TaskGroup
  iconUrl: String
  id: String!
  myLineup: So5Lineup
  name: ManagerProgressionTaskSlug!
  periodicity: ManagerTaskPeriodicity
  possibleRewardConfigsIconUrl: String
  probabilisticBundles: [ProbabilisticBundle!]!
  progress: Int!
  rarity: Rarity
  rewardConfigs(mergedConfigsByType: Boolean = false): [AnyRewardConfigInterface!]!
  target: Int!
  taskConfigSlug: String!
  templateIconUrl: String!
  title: String!
}

"""
So5 Threshold Streak Task
"""
type ThresholdsStreakTask implements ManagerTaskInterface & TaskInterface {
  aasmState: ManagerProgressionTaskState!
  alternativeRewardConfigs: [AlternativeRewardConfig!]
  cards: [AnyCardInterface!]!
  claimedAt: ISO8601DateTime
  color: String
  completedAt: ISO8601DateTime
  completedBy: So5Lineup
  currentThreshold(forNextLineup: Boolean): ThresholdStreakTaskThreshold!
  currentThresholdStatus(forNextLineup: Boolean): ThresholdStreakTaskCurrentThresholdStatus!
  declarative: Boolean! @deprecated(reason: "Not used anymore")
  description(forNextLineup: Boolean): String!
  engaged: Boolean!
  genre: TaskGenre!
  group: TaskGroup
  iconUrl: String
  id: String!
  name: ManagerProgressionTaskSlug!
  nextPlayableSo5LeagueTrack: So5LeagueTrack
  originalRewardConfigs: [AnyRewardConfigInterface!]
  periodicity: ManagerTaskPeriodicity
  possibleRewardConfigsIconUrl: String
  probabilisticBundles: [ProbabilisticBundle!]!
  progress: Int!
  rarity: Rarity!
  rewardConfigs(mergedConfigsByType: Boolean = false): [AnyRewardConfigInterface!]!
  rewardTaskCampaign: TaskCampaign
  scoreTaskCampaign: TaskCampaign
  so5LeagueTrack: So5LeagueTrack
  target: Int!
  taskConfigSlug: String!
  templateIconUrl: String!
  thresholds: [ThresholdStreakTaskThreshold!]!
  title: String!
}

"""
A tickets deliverable item interface
"""
type TicketsDeliverableItem implements DeliverableItemInterface {
  id: ID!
  mandatoryWearableSizeInput: Boolean!
  name: String!
  pictureUrl(derivative: DeliverableItemDerivative = TINIFIED): String!
  slug: String!
  sport: Sport!
  threeDimensionalAssetUrl(
    """
    Defaults to GLB
    """
    format: DeliverableItemThreeDimensionalAssetFormat
  ): String
}

"""
A title body notification rendered for mobile
"""
type TitleBodyNotificationMobileRendering {
  body: String!
  deepLinkUrl: String!
  iconUrl: String
  title: String!
}

"""
A title body notification rendering instruction
"""
type TitleBodyNotificationRendering {
  mobile: TitleBodyNotificationMobileRendering
}

"""
An auction in the Token service
"""
type TokenAuction implements DealInterface & Node & PromotionalEventsInterface & SocialPicturesInterface & TokenOperationTradeInterface {
  anyCards: [AnyCardInterface!]!
  bestBid: TokenBid
  bidToEarn: Boolean!
  bidToEarnRewards: [BidToEarnReward!]

  """
  The `bids` field cannot be nested within a list.
  """
  bids(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): TokenBidConnection!
  bidsCount: Int!
  blockchainId: String!

  """
  Return the cards if they are bundled, empty otherwise
  """
  bundledAnyCards: [AnyCardInterface!]!
  cancelled: Boolean!
  creditCardFee: Float!
  currency: SupportedCurrency!

  """
  Current price, in auction currency.
  """
  currentPrice: String!
  dealStatus: DealStatus!
  eligibleForBlueprintRewards: Boolean!
  eligiblePromotionalEvents: [PromotionalEventInterface!]!
  eligiblePromotionalEventsProbableRewards: [ProbableRewardConfig!]!
  eligibleRewardsProbabilisticBundleConfigs: [ProbabilisticBundleConfig!]!
  endDate: ISO8601DateTime!
  id: ID!

  """
  Minimum next bid amount, in auction currency.
  """
  minNextBid: String!

  """
  Best bid if the connected user is the best bidder, null otherwise
  """
  myBestBid: TokenMyBid

  """
  Last bid of the connected user if there is a connected user, null otherwise
  """
  myLastBid: TokenMyBid
  myReminder: AuctionReminder
  open: Boolean!
  privateCurrentPrice: String!
  privateMinNextBid: String!
  socialPictureFingerprint: String!
  socialPictureUrls: SocialPictureDerivative!
  startDate: ISO8601DateTime!

  """
  Team of all tokens if they all belong to the same team, null otherwise
  """
  team: String
  transactionDate: ISO8601DateTime
  updatedAt: ISO8601DateTime
  userAcceptor: User
  userBuyer: User
  userSeller: User
}

"""
The connection type for TokenAuction.
"""
type TokenAuctionConnection {
  """
  A list of edges.
  """
  edges: [TokenAuctionEdge!]!
  hasAny: Boolean!

  """
  A list of nodes.
  """
  nodes: [TokenAuction!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type TokenAuctionEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: TokenAuction
}

"""
A bid on an TokenAuction
"""
type TokenBid implements Node {
  amounts: MonetaryAmount!
  auction: TokenAuction!
  bidder: BlockchainUser @deprecated(reason: "Use userBidder instead")
  conversionCredit: ConversionCredit
  conversionCredits: [ConversionCredit!]!
  createdAt: ISO8601DateTime!
  fiatPayment: Boolean!
  id: ID!
  maximumAmount: String
  maximumAmounts: MonetaryAmount!
  userBidder: User
}

"""
The connection type for TokenBid.
"""
type TokenBidConnection {
  """
  A list of edges.
  """
  edges: [TokenBidEdge!]!
  hasAny: Boolean!

  """
  A list of nodes.
  """
  nodes: [TokenBid!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type TokenBidEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: TokenBid
}

"""
Offer, PrimaryOffer or Auction
"""
union TokenDeal = TokenAuction | TokenOffer | TokenPrimaryOffer

"""
The connection type for TokenDeal.
"""
type TokenDealConnection {
  """
  A list of edges.
  """
  edges: [TokenDealEdge]

  """
  A list of nodes.
  """
  nodes: [TokenDeal]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type TokenDealEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: TokenDeal
}

"""
Payload required to make a Starkware NFT deposit
"""
type TokenDeposit {
  assetType: String!
  starkKey: String!
  tokenId: String!
  vaultId: Int!
}

"""
A monetary reward in the Token service
"""
type TokenMonetaryReward implements Node {
  amount: WeiAmount!
  amounts: MonetaryAmount!
  id: ID!
  rewardId: String!
  sport: Sport!
}

"""
My bid on an TokenAuction
"""
type TokenMyBid implements Node {
  amounts: MonetaryAmount!
  auction: TokenAuction!
  bidder: BlockchainUser @deprecated(reason: "Use userBidder instead")
  conversionCredit: ConversionCredit
  conversionCredits: [ConversionCredit!]!
  createdAt: ISO8601DateTime!
  fiatPayment: Boolean!
  id: ID!
  maximumAmount: String
  maximumAmounts: MonetaryAmount!
  userBidder: User
}

"""
An offer in the Token service
"""
type TokenOffer implements DealInterface & Node & TokenOperationTradeInterface {
  acceptedAt: ISO8601DateTime
  actualReceiver: BlockchainUser
  blockchainId: String
  buyer: BlockchainUser @deprecated(reason: "Use userBuyer instead")
  cancelledAt: ISO8601DateTime
  counteredOffer: TokenOffer
  createdAt: ISO8601DateTime!
  dealStatus: DealStatus!
  endDate: ISO8601DateTime!
  id: ID!
  marketFeeAmounts: MonetaryAmount
  owners: [TokenOwner!]
  receiver: BlockchainUser
  receiverSide: TokenOfferSide!
  rejectionReason: TokenOfferRejectionReason
  seller: BlockchainUser @deprecated(reason: "Use userSeller instead")
  sender: BlockchainUser!
  senderSide: TokenOfferSide!
  settlementCurrencies: [SupportedCurrency!]!
  startDate: ISO8601DateTime!
  status: String!
  transactionDate: ISO8601DateTime
  type: OfferType!
  updatedAt: ISO8601DateTime
  userAcceptor: User
  userBuyer: User
  userSeller: User
}

"""
The connection type for TokenOffer.
"""
type TokenOfferConnection {
  """
  A list of edges.
  """
  edges: [TokenOfferEdge!]!
  hasAny: Boolean!

  """
  A list of nodes.
  """
  nodes: [TokenOffer!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type TokenOfferEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: TokenOffer
}

enum TokenOfferRejectionReason {
  ADD_CASH
  CARD_NOT_WANTED
  IN_A_LINEUP
  NOT_SELLING
  OFFER_TOO_LOW
  ONLY_CASH
}

"""
One side of an Offer
"""
type TokenOfferSide {
  amounts: MonetaryAmount!
  anyCards: [AnyCardInterface!]!
  id: String!
  wei: WeiAmount @deprecated(reason: "Use amounts.wei instead")
}

"""
Operation that have a trade
"""
interface TokenOperationTradeInterface {
  id: ID!
  transactionDate: ISO8601DateTime
  userAcceptor: User
  userBuyer: User
  userSeller: User
}

type TokenOwner implements Node {
  account: Account
  address: String!
  amounts: MonetaryAmount
  blockchain: Blockchain!
  card: AnyCardInterface!
  deal: TokenDeal
  from: ISO8601DateTime!
  id: ID!
  optimistic: Boolean!
  settleAt: ISO8601DateTime
  settlementDelayReason: SettlementDelayReason
  transferType: OwnerTransfer!
  user: User
}

enum TokenPaymentMethod {
  APPLE_IAP
  APPLE_PAY
  CREDIT_CARD
  GIFT_CARD
  GOOGLE_IAP
  KLARNA
  PAYPAL
  WALLET
  WALLET_AND_CREDIT_CARD
}

"""
A recorded market price for a Token
"""
type TokenPrice implements Node {
  amounts: MonetaryAmount!
  card: AnyCardInterface
  date: ISO8601DateTime!
  deal: TokenDeal!
  id: ID!
}

"""
The connection type for TokenPrice.
"""
type TokenPriceConnection {
  """
  A list of edges.
  """
  edges: [TokenPriceEdge!]!

  """
  A list of nodes.
  """
  nodes: [TokenPrice!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type TokenPriceEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: TokenPrice
}

"""
A primary offer in the Token service
"""
type TokenPrimaryOffer implements DealInterface & Node & PromotionalEventsInterface & TokenOperationTradeInterface {
  acceptedAt: ISO8601DateTime
  anyCards: [AnyCardInterface!]!
  applePrice: MonetaryAmount
  appleProductId: String
  buyer: User
  cancelledAt: ISO8601DateTime
  dealStatus: DealStatus!
  eligibleForBlueprintRewards: Boolean!
  eligiblePromotionalEvents: [PromotionalEventInterface!]!
  eligiblePromotionalEventsProbableRewards: [ProbableRewardConfig!]!
  eligibleRewardsProbabilisticBundleConfigs: [ProbabilisticBundleConfig!]!
  endDate: ISO8601DateTime!
  googlePrice(countryCode: String): String
  googleProductId: String
  id: ID!
  price: MonetaryAmount
  rewards: [AnyRewardInterface!]
  settledAt: ISO8601DateTime
  signedAmount: String
  startDate: ISO8601DateTime!
  status: String!
  transactionDate: ISO8601DateTime
  updatedAt: ISO8601DateTime
  userAcceptor: User
  userBuyer: User
  userSeller: User
}

"""
The connection type for TokenPrimaryOffer.
"""
type TokenPrimaryOfferConnection {
  """
  A list of edges.
  """
  edges: [TokenPrimaryOfferEdge!]!

  """
  A list of nodes.
  """
  nodes: [TokenPrimaryOffer!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type TokenPrimaryOfferEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: TokenPrimaryOffer
}

"""
The Tokens queries
"""
type TokenRoot {
  allCards(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    playerSlug: String
    rarities: [Rarity!]
    sport: [Sport!] = null
  ): AnyCardInterfaceConnection!
  anyCard(assetId: String!): AnyCardInterface!
  anyCards(assetIds: [String!]!): [AnyCardInterface!]!
  auction(id: String!): TokenAuction!
  auctions(ids: [String!]!): [TokenAuction!]!

  """
  Get a conversion credit campaign
  """
  conversionCreditCampaign(code: String!): ConversionCreditCampaign

  """
  Live auctions, sorted by updated time (from 10 days ago).
  """
  liveAuctions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    sport: Sport
    updatedAfter: ISO8601DateTime
  ): TokenAuctionConnection!

  """
  Live primary offers, sorted by updated time (from 8 days ago).
  """
  livePrimaryOffers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    sport: Sport
    updatedAfter: ISO8601DateTime
  ): TokenPrimaryOfferConnection!

  """
  Live single sale offers, sorted by updated time (from 8 days ago).
  """
  liveSingleSaleOffers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    playerSlug: String
    sport: Sport
    updatedAfter: ISO8601DateTime
  ): TokenOfferConnection!
  offer(id: String!): TokenOffer!
  offers(ids: [String!]!): [TokenOffer!]!
  primaryOffer(id: String!): TokenPrimaryOffer!
  primaryOffers(ids: [String!]!): [TokenPrimaryOffer!]!
  promotionalEvents(sport: Sport!): [PromotionalEventInterface!]!
  tokenPrices(first: Int, from: ISO8601DateTime, includePrivateSales: Boolean, playerSlug: String!, rarity: Rarity!, season: Int, seasonEligibility: SeasonEligibility, to: ISO8601DateTime): [TokenPrice!]!
  topGainers(days: FeaturedPageDuration!, sport: Sport!): [TopGainers!] @deprecated(reason: "Not used anymore")
  topSales(days: FeaturedPageDuration!, sport: Sport!): [TokenOwner!] @deprecated(reason: "Not used anymore")
  topVolume(days: FeaturedPageDuration!, sport: Sport!): [TopVolume!] @deprecated(reason: "Not used anymore")
}

"""
Withdrawal of an NFT to Ethereum
"""
type TokenWithdrawal implements Node {
  aasmState: String!
  destination: String
  id: ID!
}

"""
Player with its performance for a given period
"""
type TopGainers {
  anyPlayer: AnyPlayerInterface!
  lowestPriceAnyCard(inSeason: Boolean, rarity: Rarity): AnyCardInterface
  performance: Int!
  playerSlug: String!
}

"""
Player with its number of trades for a given period
"""
type TopVolume {
  anyPlayer: AnyPlayerInterface!
  numberOfTrades: Int!
  playerSlug: String!
}

enum TournamentCalendarRankType {
  PROMOTED
  RELEGATED
  STABLE
}

"""
A stage of a competition in season
"""
type TournamentCalendarStage implements Node {
  groups: [StageGroup!]!
  id: ID!
  name: String!
}

"""
User current tournament eligibility
"""
type TournamentEligibility {
  eligible: Boolean!
  maxProgress: Int!
  progress: Int!
  so5LeaderboardType: So5LeaderboardType!
}

enum Tradeable {
  """
  The card should be deposited on Sorare before being traded
  """
  DEPOSIT_REQUIRED

  """
  The card is not in the Sorare managed account, or the owner does not want to trade it
  """
  NO

  """
  The card has not yet been transferred
  """
  NOT_YET

  """
  The card has no owner or does not belong to the user
  """
  UNDEFINED

  """
  The card is transferrable
  """
  YES
}

enum TransactionStatus {
  """
  Transaction cancelled
  """
  CANCELLED

  """
  Transaction confirmed
  """
  CONFIRMED

  """
  Transaction dropped
  """
  DROPPED

  """
  Transaction failed
  """
  FAILED

  """
  Transaction is currently minting
  """
  PENDING
}

"""
Signable payload for a Starkware transfer request
"""
type TransferRequest {
  amount: WeiAmount!
  condition: String
  expirationTimestamp: Int!
  feeInfoUser: Fee
  nonce: Int!
  receiverPublicKey: String!
  receiverVaultId: Int!
  senderVaultId: Int!
  token: String!
}

"""
A summary of a user trophies (card reward and/or podium)
"""
type TrophiesSummary {
  cardRewards(rarity: Rarity): Int!

  """
  Number of rankings for closed fixtures
  """
  finalRankings: Int!
  podiumRankings(ranking: Int): Int!
  totalMonetaryRewards(referenceCurrency: SupportedCurrency!): MonetaryAmount
}

scalar UUID

"""
Autogenerated input type of UnblockEmail
"""
input UnblockEmailInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of UnblockEmail.
"""
type UnblockEmailPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  currentUser: CurrentUser
  errors: [UserError!]!
}

type UnknownSource implements HistoryTransactionInterface {
  date: ISO8601DateTime!
  description: String
  id: String!
  label: String!
  logoUrl: String
  quantityByFlavour: [PoolKeyShardsCount!]!
  totalQuantity: Int!
}

"""
A Mangopay US bank account type
"""
type UsBankAccount implements BankAccountInterface & Node {
  """
  Account number (last 4 digits)
  """
  accountNumber: String!
  country: Country!
  id: ID!
  ownerAddress: MangopayBankAccountOwnerAddress
  ownerName: String

  """
  American Banking Association routing number
  """
  routingNumber: String!
  status: MangopayBankAccountStatus
}

"""
A Sorare user
"""
type User implements Node & PublicUserInfoInterface & WithSubscriptionsInterface {
  active: Boolean
  anyPlayer: AnyPlayerInterface
  anyUserSportProfile(sport: Sport!, variant: UserSportProfileVariant): UserSportProfileInterface
  baseballUserProfile: BaseballUserSportProfile

  """
  Get a list of all blueprint cards
  """
  blueprintCards(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String
    age: Int
    assetIds: [String!]

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    classicOnly: Boolean
    customCardEditionName: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int
    inActiveCompetitions: [String!]
    inOrderOfRarities: Boolean @deprecated(reason: "Use `sorts` instead")
    inSeasonEligible: Boolean

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    owned: Boolean
    ownedByMe: Boolean
    ownedSinceAfter: ISO8601DateTime
    playerSlugs: [String!]

    """
    positions of the card capitalized
    """
    positions: [Position!]

    """
    rarities of the card in lowercase
    """
    rarities: [Rarity!]
    recentlyOwnedFirst: Boolean @deprecated(reason: "Use `sorts` instead")
    revealable: Boolean
    revealableFirst: Boolean @deprecated(reason: "Use `sorts` instead")
    seasonStartYears: [Int!]
    serialNumber: Int
    shirtNumber: Int
    slugs: [String!]
    sorts: [CardSort!]
    sport: Sport
    teamSlugs: [String!]
    withinDeckFirst: String
  ): AnyCardInterfaceConnection!

  """
  The `bought_primary_offers` field cannot be nested within a list.
  """
  boughtPrimaryOffers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    sortByEndDate: SortingOption
    sport: [Sport!]
  ): TokenPrimaryOfferConnection!

  """
  The `bought_single_sale_token_offers` field cannot be nested within a list.
  """
  boughtSingleSaleTokenOffers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    sortByEndDate: SortingOption
    sport: [Sport!]
  ): TokenOfferConnection!

  """
  The `buying_token_auctions` field cannot be nested within a list.
  """
  buyingTokenAuctions(
    """
    Returns auctions sorted by `startDate` in descending order when set.
    """
    newlyListed: Boolean
    sport: [Sport!]
  ): [TokenAuction!]!

  """
  The `card_collections` field cannot be nested within a list.
  """
  cardCollections(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int
    forCompetitions: [String!]
    inSeasonOnly: Boolean

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Full text search query to filter card collections
    """
    query: String

    """
    Default to playable rarities
    """
    rarities: [Rarity]
    seasonStartYears: [Int!]
    sortType: CardCollectionSortingOption = HIGHEST_SCORE
    sport: Sport
    startedOnly: Boolean
  ): CardCollectionConnection
  cardCounts(sport: Sport!): CardCount!

  """
  Get a list of all cards
  """
  cards(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String
    age: Int
    assetIds: [String!]

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    classicOnly: Boolean
    customCardEditionName: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int
    inActiveCompetitions: [String!]
    inOrderOfRarities: Boolean @deprecated(reason: "Use `sorts` instead")
    inSeasonEligible: Boolean

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    owned: Boolean
    ownedByMe: Boolean
    ownedSinceAfter: ISO8601DateTime
    playerSlugs: [String!]

    """
    positions of the card capitalized
    """
    positions: [Position!]

    """
    rarities of the card in lowercase
    """
    rarities: [Rarity!]
    recentlyOwnedFirst: Boolean @deprecated(reason: "Use `sorts` instead")
    revealable: Boolean
    revealableFirst: Boolean @deprecated(reason: "Use `sorts` instead")
    seasonStartYears: [Int!]
    serialNumber: Int
    shirtNumber: Int
    slugs: [String!]
    sorts: [CardSort!]
    sport: Sport
    teamSlugs: [String!]
    withinDeckFirst: String
  ): AnyCardInterfaceConnection!
  cardsCount: Int!
  createdAt: ISO8601DateTime!
  currentUserSubscription: EmailSubscription

  """
  The `ended_with_no_buyer_single_sale_token_offers` field cannot be nested within a list.
  """
  endedWithNoBuyerSingleSaleTokenOffers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    sortByEndDate: SortingOption
    sport: [Sport!]
  ): TokenOfferConnection!
  ethVaultId: Int
  ethereumAddress: EthereumAddress
  followed: EmailSubscription

  """
  The `followers` field cannot be nested within a list.
  """
  followers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserWithSubscriptionSlugConnection!
  followersCount: Int!

  """
  The `following` field cannot be nested within a list.
  """
  following(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserWithSubscriptionSlugConnection!
  followingCount: Int!

  """
  The `football_card_collections` field cannot be nested within a list.
  """
  footballCardCollections(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Full text search query to filter card collections
    """
    query: String

    """
    Default to playable rarities
    """
    rarities: [Rarity]
    seasonStartYears: [Int!]
    startedOnly: Boolean
  ): CardCollectionConnection @deprecated(reason: "Use cardCollections instead")
  footballRivalsManager: FootballRivalsManager! @deprecated(reason: "Not used anymore")
  footballUserProfile(variant: UserSportProfileVariant): FootballUserSportProfile

  """
  Typical number of hours the manager takes to answer trades
  """
  hoursToAnswerTrades: Int
  id: ID!

  """
  The `live_single_sale_token_offers` field cannot be nested within a list.
  """
  liveSingleSaleTokenOffers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    sortByEndDate: SortingOption
    sport: [Sport!]
  ): TokenOfferConnection!

  """
  The `lost_token_auctions` field cannot be nested within a list.
  """
  lostTokenAuctions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    sortByEndDate: SortingOption
    sport: [Sport!]
  ): TokenAuctionConnection!

  """
  The `manager_teams` field cannot be nested within a list.
  """
  managerTeams(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ManagerTeamConnection!
  nbaUserProfile: NBAUserSportProfile
  nickname: String!
  pictureUrl(derivative: String = "low_res"): String
  player: Player

  """
  The `podium_rankings` field cannot be nested within a list.
  """
  podiumRankings(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    ranking: Int
    so5LeaderboardType: So5LeaderboardType
    sport: Sport
  ): So5RankingConnection!

  """
  The `podiums` field cannot be nested within a list.
  """
  podiums(sport: Sport): [So5Podium!]!
  profile: UserProfile!

  """
  The `public_watchlists` field cannot be nested within a list.
  """
  publicWatchlists(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    sport: Sport!
  ): WatchlistConnection

  """
  The `recommended_managers` field cannot be nested within a list.
  """
  recommendedManagers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    sport: Sport
  ): UserConnection!

  """
  The `rewarded_rankings` field cannot be nested within a list.
  """
  rewardedRankings(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    so5LeaderboardType: So5LeaderboardType
    sport: Sport
  ): So5RankingConnection!

  """
  The `search_card_facet_values` field cannot be nested within a list.
  """
  searchCardFacetValues(advancedFilters: String, facetQuery: String!, field: String!, filters: [SearchFilterInput!], limit: Int, query: String, rarity: Rarity, refinements: [SearchRefinementInput!], sport: Sport): [SearchFacetValue!]!

  """
  The `search_cards` field cannot be nested within a list.
  """
  searchCards(
    advancedFilters: String
    duplicatedKey: String
    facets: [SearchFacetDefinitionInput!]
    filters: [SearchFilterInput!]
    page: Int
    pageSize: Int
    query: String

    """
    will only return common cards if rarity is set and equal  to common
    """
    rarity: Rarity
    refinements: [SearchRefinementInput!]
    sorts: [SearchSortInput!]
    sport: Sport
  ): SearchCards!

  """
  The `single_sale_token_offers` field cannot be nested within a list.
  """
  singleSaleTokenOffers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    sortByEndDate: SortingOption
    sport: [Sport!]
  ): TokenOfferConnection!
  slug: String!

  """
  The `so5_trophies_summary` field cannot be nested within a list.
  """
  so5TrophiesSummary(sport: Sport): TrophiesSummary!

  """
  The `sold_single_sale_token_offers` field cannot be nested within a list.
  """
  soldSingleSaleTokenOffers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    sortByEndDate: SortingOption
    sport: [Sport!]
  ): TokenOfferConnection!
  sorareAddress: EthereumAddress
  starkKey: String
  status: String
  subscriptionsCount: Int!

  """
  Set to true if the user deleted his account or was suspended
  """
  suspended: Boolean!

  """
  The `token_auctions` field cannot be nested within a list.
  """
  tokenAuctions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    sortByEndDate: SortingOption
    sport: [Sport!]
  ): TokenAuctionConnection!

  """
  The `trades` field cannot be nested within a list.
  """
  trades(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    sortByEndDate: SortingOption
    sport: [Sport!]
  ): TokenDealConnection!

  """
  The `trophies` field cannot be nested within a list.
  """
  trophies: [So5Trophies!]!
  userCardCollectionsPresence(rarity: Rarity!, sport: Sport!): Boolean!

  """
  The `won_token_auctions` field cannot be nested within a list.
  """
  wonTokenAuctions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    sortByEndDate: SortingOption
    sport: [Sport!]
  ): TokenAuctionConnection!
}

"""
A user account entry
"""
type UserAccountEntry implements Node {
  aasmState: UserAccountEntryState!
  account: Account
  amounts: MonetaryAmount!
  date: ISO8601DateTime!
  entryType: UserAccountEntryEntry!
  id: ID!
  provisional: Boolean!
  tokenOperation: UserAccountEntryTokenOperation
  user: User!
}

"""
The connection type for UserAccountEntry.
"""
type UserAccountEntryConnection {
  """
  A list of edges.
  """
  edges: [UserAccountEntryEdge!]!

  """
  A list of nodes.
  """
  nodes: [UserAccountEntry!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type UserAccountEntryEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: UserAccountEntry
}

enum UserAccountEntryEntry {
  CREDIT_CARD_FEE
  DEPOSIT
  ETH_MIGRATION_ROUNDING
  FX_FEE
  PAYMENT
  PAYMENT_FEE
  REWARD
  WITHDRAWAL
  WITHDRAWAL_FEE
}

enum UserAccountEntryState {
  CANCELLED
  CONFIRMED
  PENDING
}

"""
Object that can be an tokenOperation of a UserAccountEntry
"""
union UserAccountEntryTokenOperation = EthMigration | FastWithdrawal | FullWithdrawalRequest | MangopayWithdrawal | So5Reward | StarkwareWithdrawal | TokenBid | TokenMonetaryReward | TokenOffer | TokenPrimaryOffer | TokenWithdrawal | Withdrawal

"""
A user award
"""
type UserAward implements Node {
  award: Award!
  category: AwardCategory!
  claimableReward: Int
  claimedLevel: Int
  completed: Boolean!
  id: ID!
  level: Int!
  maxLevel: Int!
  nextLevel: Int!
  nextRequirement: String
  nextReward: Int
  progression: String
  rewards: [Int!]!
  slug: String!
  updatedAt: ISO8601DateTime
}

"""
A user notification regarding an Award event
"""
type UserAwardNotification implements Node & NotificationInterface {
  amount: Int
  award: UserAward
  body: String!
  createdAt: ISO8601DateTime!
  deeplinkUrl: String!
  iconUrl: String!
  id: ID!
  important: Boolean!
  level: Int
  markdownBody: String!
  name: String!
  pictureUrl: String
  read: Boolean!
  sport: SportOrShared
  title: String!
  user: CurrentUser!
}

"""
The cards of a user for a collection
"""
type UserCardCollection implements Node {
  bonus: Float!
  cardCollection: CardCollection!

  """
  The `card_collection_cards` field cannot be nested within a list.
  """
  cardCollectionCards: [CardCollectionCard!]!
  complete: Boolean!
  completedAt: ISO8601DateTime
  fulfilledSlotsCount: Int!
  id: ID!
  liveRanking: Int!
  liveRankingRatio(top: Boolean): Int
  score: Int!

  """
  The `slots` field cannot be nested within a list.
  """
  slots: [UserCardCollectionSlot!]!
  user: User!
}

"""
The connection type for UserCardCollection.
"""
type UserCardCollectionConnection {
  """
  A list of edges.
  """
  edges: [UserCardCollectionEdge!]!

  """
  A list of nodes.
  """
  nodes: [UserCardCollection!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type UserCardCollectionEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: UserCardCollection
}

"""
A slot in a user collection of cards
"""
type UserCardCollectionSlot {
  cardCollectionCards: [CardCollectionCard!]!
  cardCollectionCardsCount: Int!
  highlightedCardCollectionCard: CardCollectionCard
  slot: CardCollectionSlot!
  slug: String!
  snapshottedNumberOfGameWeeksPlayed: Int!
}

type UserCardsCount {
  position: Position!
  seasonality: So5LeaderboardSeasonality!
  slug: String!
  totalCount: Int!
  usedCardsCount: Int!
}

"""
The connection type for User.
"""
type UserConnection {
  """
  A list of edges.
  """
  edges: [UserEdge!]!

  """
  A list of nodes.
  """
  nodes: [User!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
A Sorare manager device
"""
type UserDevice implements Node {
  deviceType: String!
  id: ID!
  lastUsedAt: ISO8601DateTime
  os: String!
  userAgent: String!
}

"""
A Sorare manager device related event
"""
type UserDeviceEvent implements Node {
  deviceType: String!
  eventType: DeviceWasUpdatedEvent!
  id: ID!
  lastUsedAt: ISO8601DateTime
  os: String!
  userAgent: String!
}

"""
An edge in a connection.
"""
type UserEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: User
}

"""
A user-readable error
"""
type UserError {
  """
  The error code
  """
  code: Int

  """
  A description of the error
  """
  message: String!

  """
  Which input value this error came from
  """
  path: [String!]
}

type UserFixtureResults {
  eligibleOrSo5Rewards: [So5RewardOrConfig!]!
  slug: String!
  so5LeaderboardContenders(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): So5LeaderboardContenderConnection!
  totalRewardConfigs: [AnyRewardConfigInterface!]!
  user: User!
}

"""
The connection type for UserFixtureResults.
"""
type UserFixtureResultsConnection {
  """
  A list of edges.
  """
  edges: [UserFixtureResultsEdge!]!
  hasAny: Boolean!

  """
  A list of nodes.
  """
  nodes: [UserFixtureResults!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type UserFixtureResultsEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: UserFixtureResults
}

"""
A flag reflecting a warning or a ban of a user
"""
type UserFlag implements Node {
  id: ID!
  reason: UserFlagReason!
  relatedUsers: [PublicUserInfoInterface!]!
  until: ISO8601DateTime
}

enum UserFlagReason {
  ABUSIVE_LANGUAGE
  ANTICOMPETITIVE_LENDING
  EMAIL_HARD_BOUNCE
  MULTI_ACCOUNT
  REFERRAL_ABUSE
  REFERRAL_SPAM
  UNFAIR_GALLERY
}

type UserGroupCreatedActivity implements ActivitiesInterface & Node {
  celebratable: Boolean!
  createdAt: ISO8601DateTime!
  id: ID!
  reactions: [ActivityReactionType!]!
}

interface UserGroupInterface {
  administrator: User
  canJoin: Validity!
  conversionCredit: ConversionCredit
  conversionCreditCampaign: ConversionCreditCampaign
  description: String
  displayName: String!
  id: ID!
  joinDisabled: Boolean!
  joinRules: So5Rules!
  joinSecret: String!
  logo: SkinShopItem
  membership(userSlug: String!): UserGroupMembershipInterface
  memberships: [UserGroupMembershipInterface!]!
  membershipsCount: Int!
  membershipsPaginated(page: Int, pageSize: Int): So5UserGroupMembershipsPaginated!
  myMembership: UserGroupMembershipInterface
  pictureUrl: String
  publiclyAccessible: Boolean!
  rewardsConfig: LeaderboardRewardsConfig!
  slug: String!
  status: UserGroupStatus!
  totalRewardConfigs(highestConfigByType: Boolean): [AnyRewardConfigInterface!]!

  """
  High level overview of the rewards
  """
  totalRewards: RewardsOverview!
}

"""
The connection type for UserGroupInterface.
"""
type UserGroupInterfaceConnection {
  """
  A list of edges.
  """
  edges: [UserGroupInterfaceEdge!]!
  hasAny: Boolean!

  """
  A list of nodes.
  """
  nodes: [UserGroupInterface!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type UserGroupInterfaceEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: UserGroupInterface
}

type UserGroupMemberJoinedActivity implements ActivitiesInterface & Node {
  celebratable: Boolean!
  createdAt: ISO8601DateTime!
  id: ID!
  member: User!
  reactions: [ActivityReactionType!]!
}

interface UserGroupMembershipInterface {
  administrator: Boolean!
  createdAt: ISO8601DateTime!
  id: ID!
  ranking: Int
  score: Int!
  user: User!
}

type UserGroupMembershipShopItemsUpdate {
  evolution: UserGroupMembershipShopItemsUpdateEvolution!
  id: String!
  newShopItems: [ShopItemInterface!]!
  previousShopItems: [ShopItemInterface!]!
  userGroupMembership: UserGroupMembershipInterface!
}

enum UserGroupMembershipShopItemsUpdateEvolution {
  BETTER
  NOVEL
  WORSE
}

type UserGroupRankedActivity implements ActivitiesInterface & Node {
  celebratable: Boolean!
  createdAt: ISO8601DateTime!
  id: ID!
  probabilisticBundleReward: ProbabilisticBundleReward
  rank: Int!
  reactions: [ActivityReactionType!]!
  topContributor: User!
  topScorer: User!
  topScorerPoints: Int!
}

enum UserGroupStatus {
  ENDED
  STARTED
  TO_START
}

"""
A user lifecycle entry
"""
input UserLifecycleInput {
  name: String!
  value: Json
}

"""
User Offer Interface
"""
interface UserOffersInterface {
  blockedUntil: ISO8601DateTime
  blockedUsers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection!
  endedTokenOffersReceived(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    sortType: SortingOption
    sport: [Sport!] = [FOOTBALL, BASEBALL, NBA]
    states: [OfferState!]
  ): TokenOfferConnection!
  endedTokenOffersSent(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    sortType: SortingOption
    sport: [Sport!] = [FOOTBALL, BASEBALL, NBA]
    states: [OfferState!]
  ): TokenOfferConnection!
  pendingTokenOffersReceived(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    sortType: SortingOption
    sport: [Sport!] = [FOOTBALL, BASEBALL, NBA]
  ): TokenOfferConnection!
  pendingTokenOffersSent(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    sortType: SortingOption
    sport: [Sport!] = [FOOTBALL, BASEBALL, NBA]
  ): TokenOfferConnection!
  tokenOffers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    direction: OfferDirection!

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    sortType: SortingOption
    sport: [Sport!] = [FOOTBALL, BASEBALL, NBA]
    states: [OfferState!]
  ): TokenOfferConnection!
}

"""
An object representing the past or present ownership of a card by a user
"""
type UserOwner implements OwnerInterface {
  account: Account
  address: String!
  amounts: MonetaryAmount
  blockchain: String!
  card: Card!
  from: ISO8601DateTime!
  id: ID!
  optimistic: Boolean!

  """
  Card price, in wei.
  """
  price: String!
  referenceId: String
  settleAt: ISO8601DateTime
  transferType: String!
}

"""
A Sorare user profile
"""
type UserProfile implements Node {
  badge: UserProfileBadge
  clubBanner: SkinShopItem
  clubName: String!
  clubShield: SkinShopItem
  discordUsername: String
  enabledWallets: [EnabledWallet!]
  id: ID!

  """
  Get marketplace preferences
  """
  marketplacePreferences(
    """
    Sport(s) whose marketplace preferences are to be returned. All if not provided.
    """
    sports: [Sport!]
  ): [MarketplaceSportPreferences!]!
  pictureUrl(derivative: String = "low_res"): String
  status: String
  twitterUsername: String
  user: User!
  verified: Boolean!
}

"""
A Sorare user profile badge
"""
type UserProfileBadge {
  description: String!
  pictureUrl: String!
  slug: String!
}

interface UserRankingInterface {
  id: ID!
  overallRanking: Int
  overallScore: Float!
  user: User!
}

"""
A user relation
"""
type UserRelation implements Node {
  id: ID!
  knownAs: String!
  knownPhoneNumber: String
  knownUser: User
  user: User!
  userDiscoverableName: String
  userRelationsInCommonCount: Int
}

"""
The connection type for UserRelation.
"""
type UserRelationConnection {
  """
  A list of edges.
  """
  edges: [UserRelationEdge!]!

  """
  A list of nodes.
  """
  nodes: [UserRelation!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type UserRelationEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: UserRelation
}

"""
A user notification regarding a UserRelation
"""
type UserRelationNotification implements Node & NotificationInterface {
  body: String!
  createdAt: ISO8601DateTime!
  deeplinkUrl: String!
  iconUrl: String!
  id: ID!
  important: Boolean!
  markdownBody: String!
  name: String!
  pictureUrl: String
  read: Boolean!
  sport: SportOrShared
  title: String!
  user: CurrentUser!
  userRelation: UserRelation!
}

"""
A user selection for a deliverable item
"""
input UserSelectionInput {
  size: WearableSize
}

"""
A Sorare user settings
"""
type UserSettings {
  ageLimitDisclaimer: String
  autoAcceptRivalsChallenges: Boolean! @deprecated(reason: "No longer used")
  billingAddress: PostalAddress
  currency: Currency
  disableAllEmails: Boolean!
  discoverable: Boolean
  discoverableName: String
  fiatCurrency: FiatCurrency
  hideBalance: Boolean!
  hideCommonCards: Boolean!
  hideFullyCompletedTutorials: Boolean @deprecated(reason: "No longer used")
  hidePermanentTutorials: Boolean @deprecated(reason: "No longer used")
  id: ID!
  lifecycle: Json!
  locale: String
  maxDailyPushNotifications: Int!

  """
  Get notification settings. If no sport parameter is provided the football one will be returned
  """
  notificationPreferences(
    """
    Sport whose notification settings are to be returned
    """
    sport: SportOrShared
  ): [NotificationPreference!]!
  postalAddress: PostalAddress!
  rewardCurrency: Currency!
  suggestedDiscoverableName: String!

  """
  User status with regards to Sorare's TCU
  """
  tcuStatus: TermsAndConditionsStatus!
}

"""
A user shop item
"""
type UserShopItem implements Node {
  id: ID!
  shopItem: ClubShopItem!
}

"""
User social connections
"""
interface UserSocialInterface {
  followed: EmailSubscription

  """
  The `followers` field cannot be nested within a list.
  """
  followers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserWithSubscriptionSlugConnection!
  followersCount: Int!

  """
  The `following` field cannot be nested within a list.
  """
  following(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserWithSubscriptionSlugConnection!
  followingCount: Int!

  """
  The `recommended_managers` field cannot be nested within a list.
  """
  recommendedManagers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    sport: Sport
  ): UserConnection!
}

"""
An affiliate
"""
type UserSource implements Node {
  id: ID!
  name: String!
}

interface UserSportProfileInterface {
  achievementBadges: [SkinShopItem]
  availableOnboardingLeaderboards(rarity: Rarity): Boolean!
  background: SkinShopItem
  bannerColor: String
  bannerUrl: String
  blueprintCardsCount: Int!
  clubBadge: SkinShopItem
  clubName: String
  commonGameOnboarded: Boolean!

  """
  The `daily_claim_tasks` field cannot be nested within a list.
  """
  dailyClaimTasks: [FootballManagerTask!]!

  """
  Get a deck of cards
  """
  deck(name: String, slug: String): Deck

  """
  The `decks` field cannot be nested within a list.
  """
  decks(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Full text search query to filter decks
    """
    query: String
  ): DeckConnection!
  favoriteTeam: TeamInterface

  """
  The `forced_onboarding_so5_leaderboard` field cannot be nested within a list.
  """
  forcedOnboardingSo5Leaderboard: So5Leaderboard @deprecated(reason: "Not used anymore")
  gallerySocialPictureUrls: SocialPictureDerivative!

  """
  The `highlighted_deck` field cannot be nested within a list.
  """
  highlightedDeck: Deck
  id: ID!
  managerProfileSocialPictureUrls: SocialPictureDerivative!

  """
  The `my_favorite_team_onboarding_so5_leaderboard` field cannot be nested within a list.
  """
  myFavoriteTeamOnboardingSo5Leaderboard: So5Leaderboard @deprecated(reason: "Not used anymore")
  onboarded: Boolean!
  onboardingLeaderboards(rarity: Rarity): [OnboardingLeaderboard!]!
  onboardingSo5Fixture: So5Fixture

  """
  The `onboarding_so5_leaderboard` field cannot be nested within a list.
  """
  onboardingSo5Leaderboard: So5Leaderboard
  onboardingStatus: UserSportProfileOnboardingStatus! @deprecated(reason: "Not used anymore")

  """
  A frame to apply on top of user profile picture
  """
  pictureFrame: PictureFrameShopItem
  pictureFrameUrl(derivative: String = "tinified"): String @deprecated(reason: "Use pictureFrame")
  playerLoyaltyBoost(editedSeasonsCount: Int!, sealedCards: Int!): RewardBoost!
  rarityVaultBoost(rarity: Rarity!, sport: Sport!, unseals: Int = 0): RewardBoost!
  remainingUnsealsInPeriod(rarity: Rarity!): Int!
  selectedUserSportStatistics: [UserSportStatistic]!
  shieldUrl: String
  socialPictureFingerprint: String!
  tournamentEligibilities: [TournamentEligibility!]!
  userSportStatistics: [UserSportStatistic!]!
  variant: UserSportProfileVariant!
}

enum UserSportProfileOnboardingStatus {
  COMPLETED
  NONE
  RESET
  STARTED
}

enum UserSportProfileVariant {
  GLOBAL_CUP_22
  NONE
  OFF_SEASON
}

"""
Aggregated statistics for a specific user and sport
"""
type UserSportStatistic implements Node {
  format: UserSportStatisticFormat!
  id: ID!
  name: UserSportStatisticSlug!
  title: String!
  value: Int!
}

enum UserSportStatisticFormat {
  NUMBER
  TIMESTAMP
}

enum UserSportStatisticSlug {
  CARDS_OWNED
  CARDS_WON_COUNT
  FOLLOWERS
  PRO_CARDS_OWNED
  PRO_CARDS_WON_COUNT
  RIVALS_ARENA_WIN
  RIVALS_ARENA_WIN_RATE
  RIVALS_GAME_PLAYED_COUNT
  RIVALS_LONGEST_PLAYED_STREAK_COUNT
  RIVALS_LONGEST_WIN_STREAK_COUNT
  SIGNED_UP
  TOTAL_COLLECTION_SCORE
}

"""
A Sorare wallet
"""
type UserWallet implements Node {
  ethereumAddress: EthereumAddress!
  holdsValue: Boolean!
  id: ID!
  passwordEncryptedPrivateKey: PasswordEncryptedPrivateKey
  privateKeyRecoveryPayload(id: String!): PrivateKeyRecoveryPayload
  privateKeyRecoveryPayloads: [PrivateKeyRecoveryPayload!]!
  recoveryOptions: [PrivateKeyRecoveryOption!]!
  starkKey: String!
  starkKeyWithPrefix: String!
  starkexV6Address: StarkexV6Address
  status: UserWalletStatusEnum!
}

enum UserWalletStatusEnum {
  LOCKED
  READY
  RECOVERY_SENT
}

"""
A Sorare user with the subscription slug of the current user
"""
type UserWithSubscriptionSlug implements PublicUserInfoInterface & UserSocialInterface {
  active: Boolean
  anyPlayer: AnyPlayerInterface
  anyUserSportProfile(sport: Sport!, variant: UserSportProfileVariant): UserSportProfileInterface
  baseballUserProfile: BaseballUserSportProfile

  """
  Get a list of all blueprint cards
  """
  blueprintCards(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String
    age: Int
    assetIds: [String!]

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    classicOnly: Boolean
    customCardEditionName: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int
    inActiveCompetitions: [String!]
    inOrderOfRarities: Boolean @deprecated(reason: "Use `sorts` instead")
    inSeasonEligible: Boolean

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    owned: Boolean
    ownedByMe: Boolean
    ownedSinceAfter: ISO8601DateTime
    playerSlugs: [String!]

    """
    positions of the card capitalized
    """
    positions: [Position!]

    """
    rarities of the card in lowercase
    """
    rarities: [Rarity!]
    recentlyOwnedFirst: Boolean @deprecated(reason: "Use `sorts` instead")
    revealable: Boolean
    revealableFirst: Boolean @deprecated(reason: "Use `sorts` instead")
    seasonStartYears: [Int!]
    serialNumber: Int
    shirtNumber: Int
    slugs: [String!]
    sorts: [CardSort!]
    sport: Sport
    teamSlugs: [String!]
    withinDeckFirst: String
  ): AnyCardInterfaceConnection!

  """
  The `bought_primary_offers` field cannot be nested within a list.
  """
  boughtPrimaryOffers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    sortByEndDate: SortingOption
    sport: [Sport!]
  ): TokenPrimaryOfferConnection!

  """
  The `bought_single_sale_token_offers` field cannot be nested within a list.
  """
  boughtSingleSaleTokenOffers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    sortByEndDate: SortingOption
    sport: [Sport!]
  ): TokenOfferConnection!

  """
  The `buying_token_auctions` field cannot be nested within a list.
  """
  buyingTokenAuctions(
    """
    Returns auctions sorted by `startDate` in descending order when set.
    """
    newlyListed: Boolean
    sport: [Sport!]
  ): [TokenAuction!]!

  """
  The `card_collections` field cannot be nested within a list.
  """
  cardCollections(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int
    forCompetitions: [String!]
    inSeasonOnly: Boolean

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Full text search query to filter card collections
    """
    query: String

    """
    Default to playable rarities
    """
    rarities: [Rarity]
    seasonStartYears: [Int!]
    sortType: CardCollectionSortingOption = HIGHEST_SCORE
    sport: Sport
    startedOnly: Boolean
  ): CardCollectionConnection
  cardCounts(sport: Sport!): CardCount!

  """
  Get a list of all cards
  """
  cards(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String
    age: Int
    assetIds: [String!]

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    classicOnly: Boolean
    customCardEditionName: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int
    inActiveCompetitions: [String!]
    inOrderOfRarities: Boolean @deprecated(reason: "Use `sorts` instead")
    inSeasonEligible: Boolean

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    owned: Boolean
    ownedByMe: Boolean
    ownedSinceAfter: ISO8601DateTime
    playerSlugs: [String!]

    """
    positions of the card capitalized
    """
    positions: [Position!]

    """
    rarities of the card in lowercase
    """
    rarities: [Rarity!]
    recentlyOwnedFirst: Boolean @deprecated(reason: "Use `sorts` instead")
    revealable: Boolean
    revealableFirst: Boolean @deprecated(reason: "Use `sorts` instead")
    seasonStartYears: [Int!]
    serialNumber: Int
    shirtNumber: Int
    slugs: [String!]
    sorts: [CardSort!]
    sport: Sport
    teamSlugs: [String!]
    withinDeckFirst: String
  ): AnyCardInterfaceConnection!
  cardsCount: Int!
  createdAt: ISO8601DateTime!

  """
  The `ended_with_no_buyer_single_sale_token_offers` field cannot be nested within a list.
  """
  endedWithNoBuyerSingleSaleTokenOffers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    sortByEndDate: SortingOption
    sport: [Sport!]
  ): TokenOfferConnection!
  ethVaultId: Int
  ethereumAddress: EthereumAddress
  followed: EmailSubscription

  """
  The `followers` field cannot be nested within a list.
  """
  followers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserWithSubscriptionSlugConnection!
  followersCount: Int!

  """
  The `following` field cannot be nested within a list.
  """
  following(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserWithSubscriptionSlugConnection!
  followingCount: Int!

  """
  The `football_card_collections` field cannot be nested within a list.
  """
  footballCardCollections(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Full text search query to filter card collections
    """
    query: String

    """
    Default to playable rarities
    """
    rarities: [Rarity]
    seasonStartYears: [Int!]
    startedOnly: Boolean
  ): CardCollectionConnection @deprecated(reason: "Use cardCollections instead")
  footballRivalsManager: FootballRivalsManager! @deprecated(reason: "Not used anymore")
  footballUserProfile(variant: UserSportProfileVariant): FootballUserSportProfile

  """
  Typical number of hours the manager takes to answer trades
  """
  hoursToAnswerTrades: Int
  id: ID!

  """
  The `live_single_sale_token_offers` field cannot be nested within a list.
  """
  liveSingleSaleTokenOffers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    sortByEndDate: SortingOption
    sport: [Sport!]
  ): TokenOfferConnection!

  """
  The `lost_token_auctions` field cannot be nested within a list.
  """
  lostTokenAuctions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    sortByEndDate: SortingOption
    sport: [Sport!]
  ): TokenAuctionConnection!

  """
  The `manager_teams` field cannot be nested within a list.
  """
  managerTeams(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ManagerTeamConnection!
  nbaUserProfile: NBAUserSportProfile
  nickname: String!
  pictureUrl(derivative: String = "low_res"): String
  player: Player

  """
  The `podium_rankings` field cannot be nested within a list.
  """
  podiumRankings(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    ranking: Int
    so5LeaderboardType: So5LeaderboardType
    sport: Sport
  ): So5RankingConnection!

  """
  The `podiums` field cannot be nested within a list.
  """
  podiums(sport: Sport): [So5Podium!]!
  profile: UserProfile!

  """
  The `public_watchlists` field cannot be nested within a list.
  """
  publicWatchlists(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    sport: Sport!
  ): WatchlistConnection

  """
  The `recommended_managers` field cannot be nested within a list.
  """
  recommendedManagers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    sport: Sport
  ): UserConnection!

  """
  The `rewarded_rankings` field cannot be nested within a list.
  """
  rewardedRankings(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    so5LeaderboardType: So5LeaderboardType
    sport: Sport
  ): So5RankingConnection!

  """
  The `search_card_facet_values` field cannot be nested within a list.
  """
  searchCardFacetValues(advancedFilters: String, facetQuery: String!, field: String!, filters: [SearchFilterInput!], limit: Int, query: String, rarity: Rarity, refinements: [SearchRefinementInput!], sport: Sport): [SearchFacetValue!]!

  """
  The `search_cards` field cannot be nested within a list.
  """
  searchCards(
    advancedFilters: String
    duplicatedKey: String
    facets: [SearchFacetDefinitionInput!]
    filters: [SearchFilterInput!]
    page: Int
    pageSize: Int
    query: String

    """
    will only return common cards if rarity is set and equal  to common
    """
    rarity: Rarity
    refinements: [SearchRefinementInput!]
    sorts: [SearchSortInput!]
    sport: Sport
  ): SearchCards!

  """
  The `single_sale_token_offers` field cannot be nested within a list.
  """
  singleSaleTokenOffers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    sortByEndDate: SortingOption
    sport: [Sport!]
  ): TokenOfferConnection!
  slug: String!

  """
  The `so5_trophies_summary` field cannot be nested within a list.
  """
  so5TrophiesSummary(sport: Sport): TrophiesSummary!

  """
  The `sold_single_sale_token_offers` field cannot be nested within a list.
  """
  soldSingleSaleTokenOffers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    sortByEndDate: SortingOption
    sport: [Sport!]
  ): TokenOfferConnection!
  sorareAddress: EthereumAddress
  starkKey: String
  status: String
  subscriptionSlug: String

  """
  Set to true if the user deleted his account or was suspended
  """
  suspended: Boolean!

  """
  The `token_auctions` field cannot be nested within a list.
  """
  tokenAuctions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    sortByEndDate: SortingOption
    sport: [Sport!]
  ): TokenAuctionConnection!

  """
  The `trades` field cannot be nested within a list.
  """
  trades(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    sortByEndDate: SortingOption
    sport: [Sport!]
  ): TokenDealConnection!

  """
  The `trophies` field cannot be nested within a list.
  """
  trophies: [So5Trophies!]!
  userCardCollectionsPresence(rarity: Rarity!, sport: Sport!): Boolean!

  """
  The `won_token_auctions` field cannot be nested within a list.
  """
  wonTokenAuctions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    sortByEndDate: SortingOption
    sport: [Sport!]
  ): TokenAuctionConnection!
}

"""
The connection type for UserWithSubscriptionSlug.
"""
type UserWithSubscriptionSlugConnection {
  """
  A list of edges.
  """
  edges: [UserWithSubscriptionSlugEdge!]!

  """
  A list of nodes.
  """
  nodes: [UserWithSubscriptionSlug!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type UserWithSubscriptionSlugEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: UserWithSubscriptionSlug
}

"""
Preview of the so5 results of users in a fixture
"""
type UsersFixtureResultsPreview {
  totalUsersCount: Int!
  users: [User!]!
}

"""
Utm params
"""
input UtmInput {
  partner: String
  trafficCategory: String
  user: String
  utmCampaign: String
  utmContent: String
  utmMedium: String
  utmSource: String
  utmTerm: String
}

"""
A boolean value and its reason
"""
type Validity {
  missingAnyRarities: [Rarity!]!
  missingCards: Int!
  missingPositions: [Position!]!
  missingRarity(rarity: Rarity!): Int!
  missingVaultPoints: Int!
  notEnoughEligibleCards: Boolean!
  reason: String
  transferMarketFilters: String
  upcomingAt: ISO8601DateTime
  value: Boolean!
}

type ValueBoundaries {
  max: Int!
  min: Int!
}

type ValueOpenBoundaries {
  max: Int
  min: Int
}

"""
A representation of the stock count per variant on a shop item
"""
type VariantStockCount {
  currentStockCount: Int!
  initialStockCount: Int!
  size: ShirtSize
  variant: String!
}

enum VariantStockCountType {
  SHIRT_SIZE
}

"""
The vault points rule of a So5Leaderboard
"""
type VaultPointsRule implements So5RuleInterface {
  descriptions: [So5RuleDescription!]!
  key: String!
  minVaultBoost: RewardBoost!
  rarity: Rarity!
}

"""
A Stripe Verification Session
"""
type VerificationSession {
  clientSecret: String
  id: String!
}

input WalletInput {
  backupPrivateKeyRecoveries: [BackupPrivateKeyRecoveryInput!]!
  ethereumAddress: EthereumAddress!
  passwordEncryptedPrivateKey: PasswordEncryptedPrivateKeyInput!
  privateKeyRecovery: PrivateKeyRecoveryInput!
  starkKeyWithPrefix: String!
  starkexV6Address: StarkexV6Address
}

enum WalletStatus {
  """
  The card is stored in an account that is not managed by Sorare
  """
  EXTERNAL

  """
  The card is stored in the Sorare account
  """
  INTERNAL

  """
  The card has no owner or does not belong to the user
  """
  UNKNOWN
}

"""
A watchlist
"""
type Watchlist implements Node & WithSubscriptionsInterface {
  """
  The `common_players` field cannot be nested within a list.
  """
  commonPlayers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): CommonPlayerConnection!
  createdAt: ISO8601DateTime!
  currentUserSubscription: EmailSubscription
  id: ID!
  playersPanel: [CommonPlayer!]!
  public: Boolean!

  """
  The `search_player_facet_values` field cannot be nested within a list.
  """
  searchPlayerFacetValues(advancedFilters: String, facetQuery: String!, field: String!, filters: [SearchFilterInput!], limit: Int, onlyFollowed: Boolean, query: String, refinements: [SearchRefinementInput!]): [SearchFacetValue!]!

  """
  The `search_players` field cannot be nested within a list.
  """
  searchPlayers(advancedFilters: String, facets: [SearchFacetDefinitionInput!], filters: [SearchFilterInput!], onlyFollowed: Boolean, page: Int, pageSize: Int, query: String, refinements: [SearchRefinementInput!], so5LeaderboardSlug: String, sorts: [SearchSortInput!]): SearchPlayers!
  sellableCards(rarity: Rarity!): [AnyCardInterface!]
  slug: String!
  sport: Sport!
  subscriptionsCount: Int!
  title: String!
  totalPlayersCount: Int!
  updatedAt: ISO8601DateTime!
  user: User!
}

"""
The connection type for Watchlist.
"""
type WatchlistConnection {
  """
  A list of edges.
  """
  edges: [WatchlistEdge!]!

  """
  A list of nodes.
  """
  nodes: [Watchlist!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type WatchlistEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Watchlist
}

enum WatchlistFilter {
  ALL_WATCHLISTS
  FOLLOWED_WATCHLISTS
  OWNED_WATCHLISTS
}

"""
A wearable deliverable item interface
"""
type WearableDeliverableItem implements DeliverableItemInterface {
  id: ID!
  mandatoryWearableSizeInput: Boolean!
  name: String!
  pictureUrl(derivative: DeliverableItemDerivative = TINIFIED): String!
  signed: Boolean!
  slug: String!
  sport: Sport!
  threeDimensionalAssetUrl(
    """
    Defaults to GLB
    """
    format: DeliverableItemThreeDimensionalAssetFormat
  ): String
}

enum WearableSize {
  L
  M
  S
  XL
  XS
  XXL
}

"""
ETH amount expressed in wei as a string
"""
scalar WeiAmount

type WheelCost {
  currency: InGameCurrency!
  quantity: Int!
  wheelType: WheelType!
}

"""
A promotional event related to wheel costs
"""
type WheelCostPromotionalEvent implements Node & PromotionalEventInterface {
  algoliaFilters: String!
  blogUrl: String
  description: String!
  eligibilityRules: EligibilityRules!
  endDate: ISO8601DateTime!
  id: ID!
  logoUrl: String
  marketBannerTitle: String!
  name: String!
  pictureUrl: String
  probableRewardConfigs: [ProbableRewardConfig!]!
  promotionType: PromotionType!
  rewardsProbabilisticBundleConfig: [ProbabilisticBundleConfig!]!
  slug: String!
  sport: Sport
  startDate: ISO8601DateTime!
  termsAndConditionsUrl: String
  title: String!
}

enum WheelType {
  GOLDEN
  STANDARD
}

type WinningLineup {
  so5Leaderboard: So5Leaderboard!
  so5League: So5League!
  so5Lineup: So5Lineup!
}

"""
Favorites
"""
interface WithFavoriteInterface {
  mySubscriptions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    sortType: SortingOption
    types: [SubscribableType!]
  ): EmailSubscriptionConnection!
}

"""
Notifications
"""
interface WithNotifications {
  anyNotifications(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Filters notifications by the specified categories when set.
    """
    categories: [NotificationCategoryInput!]

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filters notifications by sections
    """
    sections: [String!]

    """
    Filters notifications by sports
    """
    sports: [Sport!]

    """
    Filters notifications by subsections
    """
    subsections: [String!]
  ): NotificationInterfaceConnection!

  """
  Get the last notification created_at
  """
  lastNotificationCreatedAt: ISO8601DateTime

  """
  Get notifications fields.
  """
  notificationsDetails(
    """
    Filters notifications by the specified categories when set.
    """
    categories: [NotificationCategoryInput!]

    """
    Filters notifications by sports
    """
    sports: [Sport!]
  ): Notifications!
  unreadNotificationsCount(
    """
    Filters notifications by the specified categories when set.
    """
    categories: [NotificationCategoryInput!]

    """
    Filters notifications by sports
    """
    sports: [Sport!]
  ): Int!
}

"""
With Referral Interface
"""
interface WithReferralsInterface {
  referee: Boolean!
  refereeRewards: [ReferralReward!]!
  referralAsReferee: Referral
  referralRewardsCount: Int!
  referralUrl: String!

  """
  Get the list of referrals
  """
  referrals(
    """
    Page to retrieve. Defaults to 0.
    """
    page: Int

    """
    Maximum number of referrals to return. Defaults to 50.
    """
    pageSize: Int

    """
    Filters the referrals by sport.
    """
    sport: Sport

    """
    Filters the returned referrals by `state` when set.
    """
    state: ReferralState
  ): ReferralPaginated!
  referrer: User
  unclaimedReferralRewardsCount: Int!
}

interface WithSubscriptionsInterface {
  currentUserSubscription: EmailSubscription
  slug: String!
  subscriptionsCount: Int!
}

"""
A withdrawal
"""
type Withdrawal implements Node {
  agreedFeeAmount: WeiAmount!
  amount: WeiAmount!
  createdAt: ISO8601DateTime!
  id: ID!
  quantizedAmount: String!
  status: WithdrawalStatus!
  to: String!
  transactionHash: String
}

enum WithdrawalState {
  CANCELLED
  CREATED
  FAILED
  FINALIZED
  PROCESSING
  REFUNDED
}

enum WithdrawalStatus {
  """
  Withdrawal was cancelled
  """
  CANCELLED

  """
  Withdrawal is confirmed
  """
  CONFIRMED

  """
  Withdrawal is created and should be confirmed
  """
  CREATED

  """
  Withdrawal has settled on the blockchain
  """
  SETTLED

  """
  Withdrawal has failed
  """
  SETTLEMENT_FAILED

  """
  Withdrawal has been published on the blockchain
  """
  SETTLEMENT_PUBLISHED
}

"""
A withdrawal with conversion rates
"""
type WithdrawalWithRates implements Node {
  agreedFeeAmount: WeiAmount!
  amount: WeiAmount!
  amounts: MonetaryAmount!
  createdAt: ISO8601DateTime!
  id: ID!
  quantizedAmount: String!
  status: WithdrawalStatus!
  to: String!
  transactionHash: String
}

interface XPBoosterShopItemInterface {
  endLevel: Int!
  rarity: Rarity!
  startLevel: Int!
}

"""
A promotional event that temporarily removes the cooldown of purchased cards up to a given grade
"""
type XPCooldownPromotionalEvent implements Node & PromotionalEventInterface {
  algoliaFilters: String!
  blogUrl: String
  description: String!
  eligibilityRules: EligibilityRules!
  endDate: ISO8601DateTime!
  id: ID!
  logoUrl: String
  marketBannerTitle: String!
  name: String!
  pictureUrl: String
  probableRewardConfigs: [ProbableRewardConfig!]!
  promotionType: PromotionType!
  rewardsProbabilisticBundleConfig: [ProbabilisticBundleConfig!]!
  slug: String!
  sport: Sport!
  startDate: ISO8601DateTime!
  stopCooldownUpToGrade: Int!
  termsAndConditionsUrl: String
  title: String!
}

"""
Autogenerated input type of acceptOffer
"""
input acceptOfferInput {
  approvals: [AuthorizationApprovalInput!]!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  migrationData: OfferMigrationInput

  """
  Global ID of the Offer or PrimaryOffer to accept.
  """
  offerId: ID!
  settlementInfo: AcceptorSettlementInfoInput!

  """
  The signed amount to be used for dynamic price offers
  """
  signedAmount: String
}

"""
Autogenerated return type of acceptOffer.
"""
type acceptOfferPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  currentUser: CurrentUser
  deal: TokenDeal
  errors: [UserError!]!
  rewards: [AnyRewardInterface!]

  """
  The sport-agnostic offer
  """
  tokenOffer: TokenOffer
}

"""
Autogenerated input type of acceptSo5NoCardDraftableAppearance
"""
input acceptSo5NoCardDraftableAppearanceInput {
  accessToken: String!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  so5FixtureId: ID!
}

"""
Autogenerated return type of acceptSo5NoCardDraftableAppearance.
"""
type acceptSo5NoCardDraftableAppearancePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  currentUser: CurrentUser
  draftableAppearance: So5NoCardDraftableAppearance
  errors: [UserError!]!
}

"""
Autogenerated input type of acceptSo5NoCardLineup
"""
input acceptSo5NoCardLineupInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  so5NoCardLineupId: ID!
}

"""
Autogenerated return type of acceptSo5NoCardLineup.
"""
type acceptSo5NoCardLineupPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  currentUser: CurrentUser
  errors: [UserError!]!
  so5NoCardLineup: So5NoCardLineup
}

"""
Autogenerated input type of acceptTerms
"""
input acceptTermsInput {
  acceptAgeLimit: Boolean
  acceptGameRules: Boolean!
  acceptPrivacyPolicy: Boolean!
  acceptTerms: Boolean!
  agreedToReceiveOffersFromPartners: Boolean
  agreedToReceiveOffersFromPartnersSpecific: [String!]

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  tcuToken: String
}

"""
Autogenerated input type of activateWalletRecovery
"""
input activateWalletRecoveryInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  destination: String!
  method: PrivateKeyRecoveryOptionMethodEnum!
  verificationCode: String!
}

"""
Autogenerated return type of activateWalletRecovery.
"""
type activateWalletRecoveryPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  currentUser: CurrentUser
  errors: [UserError!]!
}

"""
Autogenerated input type of addAuctionReminder
"""
input addAuctionReminderInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  tokenAuctionId: ID!
}

"""
Autogenerated return type of addAuctionReminder.
"""
type addAuctionReminderPayload {
  auction: TokenAuction
  auctionReminder: AuctionReminder

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  currentUser: CurrentUser
  errors: [UserError!]!
}

"""
Autogenerated input type of addDevice
"""
input addDeviceInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  verificationType: DeviceVerificationMode = LINK
}

"""
Autogenerated return type of addDevice.
"""
type addDevicePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  currentUser: CurrentUser
  deliveryType: [Delivery!]
  errors: [UserError!]!
}

"""
Autogenerated input type of addRecommendedLineupToCart
"""
input addRecommendedLineupToCartInput {
  amount: AmountInput!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  so5LeaderboardSlug: String!
  sport: Sport!
  teamSlugs: [String!]
}

"""
Autogenerated return type of addRecommendedLineupToCart.
"""
type addRecommendedLineupToCartPayload {
  cart: Cart

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  currentUser: CurrentUser
  errors: [UserError!]!
  teamSlugsFilterDropped: Boolean
}

"""
Autogenerated input type of addStarkexV6Address
"""
input addStarkexV6AddressInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  starkexV6Address: StarkexV6Address!
}

"""
Autogenerated return type of addStarkexV6Address.
"""
type addStarkexV6AddressPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  currentUser: CurrentUser
  errors: [UserError!]!
}

"""
Autogenerated input type of addToCart
"""
input addToCartInput {
  cardSlugs: [String!]
  cartItemIds: [ID!]

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  sport: Sport!
}

"""
Autogenerated return type of addToCart.
"""
type addToCartPayload {
  cart: Cart

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  currentUser: CurrentUser
  errors: [UserError!]!
}

"""
Autogenerated input type of addToWatchlist
"""
input addToWatchlistInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  printablePlayerIds: [ID!]!
  watchlistId: ID
}

"""
Autogenerated return type of addToWatchlist.
"""
type addToWatchlistPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  currentUser: CurrentUser
  errors: [UserError!]!
  watchlist: Watchlist
}

"""
Autogenerated input type of addTokensToDeck
"""
input addTokensToDeckInput {
  assetIds: [String!]

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  deckSlug: String!
  slugs: [String!]
}

"""
Autogenerated return type of addTokensToDeck.
"""
type addTokensToDeckPayload {
  cards: [AnyCardInterface!]

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  currentUser: CurrentUser
  deck: Deck
  errors: [UserError!]!
}

"""
Autogenerated input type of addWalletRecovery
"""
input addWalletRecoveryInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  otpAttempt: String = null
  privateKeyRecovery: PrivateKeyRecoveryInput!
}

"""
Autogenerated return type of addWalletRecovery.
"""
type addWalletRecoveryPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  currentUser: CurrentUser
  errors: [UserError!]!
}

"""
Autogenerated input type of approveMigrator
"""
input approveMigratorInput {
  address: String!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  nonce: Int!
  signature: String!
}

"""
Autogenerated return type of approveMigrator.
"""
type approveMigratorPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [UserError!]!
}

"""
Autogenerated input type of bid
"""
input bidInput {
  """
  Amount in the currency provided in settlement info
  """
  amount: String!
  approvals: [AuthorizationApprovalInput!]!

  """
  Global ID of the english auction to bid on
  """
  auctionId: ID!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  settlementInfo: AcceptorSettlementInfoInput!
}

"""
Autogenerated return type of bid.
"""
type bidPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  currentUser: CurrentUser
  errors: [UserError!]!

  """
  The sport-agnostic bid
  """
  tokenBid: TokenBid
}

"""
Autogenerated input type of blockUserOffers
"""
input blockUserOffersInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  userSlug: String!
}

"""
Autogenerated return type of blockUserOffers.
"""
type blockUserOffersPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  currentUser: CurrentUser
  errors: [UserError!]!
}

"""
Autogenerated input type of buyCardPack
"""
input buyCardPackInput {
  cardPackSlug: String!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  interactionContext: String
  sport: Sport!
}

"""
Autogenerated return type of buyCardPack.
"""
type buyCardPackPayload {
  cards: [AnyCardInterface!]

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  currentUser: CurrentUser
  errors: [UserError!]!
  pack: Pack
}

"""
Autogenerated input type of buyDeliverableShopItem
"""
input buyDeliverableShopItemInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  postalAddress: PostalAddressInput!
  recaptchaToken: String
  recaptchaTokenIos: String
  recaptchaTokenV2: String
  shirtSize: ShirtSize
  shopItemId: ID!
  variant: String
}

"""
Autogenerated return type of buyDeliverableShopItem.
"""
type buyDeliverableShopItemPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  currentUser: CurrentUser
  errors: [UserError!]!
  shopItem: DeliverableShopItem
}

"""
Autogenerated input type of buyShopItem
"""
input buyShopItemInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  shopItemId: ID!
}

"""
Autogenerated return type of buyShopItem.
"""
type buyShopItemPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  currentUser: CurrentUser
  errors: [UserError!]!
  shopItem: ClubShopItem
}

"""
Autogenerated input type of cancelBaseWithdrawal
"""
input cancelBaseWithdrawalInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  withdrawalId: ID!
}

"""
Autogenerated return type of cancelBaseWithdrawal.
"""
type cancelBaseWithdrawalPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  currentUser: CurrentUser
  errors: [UserError!]!
  withdrawal: BaseChainWithdrawal
}

"""
Autogenerated input type of cancelEthBankWithdrawals
"""
input cancelEthBankWithdrawalsInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of cancelEthBankWithdrawals.
"""
type cancelEthBankWithdrawalsPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  currentUser: CurrentUser
  errors: [UserError!]!
}

"""
Autogenerated input type of cancelFastWithdrawal
"""
input cancelFastWithdrawalInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  fastWithdrawalId: ID!
}

"""
Autogenerated return type of cancelFastWithdrawal.
"""
type cancelFastWithdrawalPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  currentUser: CurrentUser
  errors: [UserError!]!
  fastWithdrawal: FastWithdrawal
}

"""
Autogenerated input type of cancelMobilePurchase
"""
input cancelMobilePurchaseInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Global ID of the Offer or PrimaryOffer or GoogleProductId to cancel.
  """
  offerId: ID!
}

"""
Autogenerated return type of cancelMobilePurchase.
"""
type cancelMobilePurchasePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  deal: TokenPrimaryOffer
  errors: [UserError!]!
}

"""
Autogenerated input type of cancelOffer
"""
input cancelOfferInput {
  blockchainId: String!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of cancelOffer.
"""
type cancelOfferPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  currentUser: CurrentUser
  errors: [UserError!]!

  """
  The sport-agnostic offer
  """
  tokenOffer: TokenOffer
}

"""
Autogenerated input type of cancelWithdrawal
"""
input cancelWithdrawalInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  withdrawalId: ID!
}

"""
Autogenerated return type of cancelWithdrawal.
"""
type cancelWithdrawalPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  currentUser: CurrentUser
  errors: [UserError!]!
  withdrawal: Withdrawal
}

"""
Autogenerated input type of celebrateActivity
"""
input celebrateActivityInput {
  activityId: ID!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  emote: Emote
  giphySlug: String
}

"""
Autogenerated return type of celebrateActivity.
"""
type celebrateActivityPayload {
  activity: ActivitiesInterface

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [UserError!]!
}

"""
Autogenerated input type of changePassword
"""
input changePasswordInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  newPasswordHash: String!
  passwordEncryptedPrivateKey: PasswordEncryptedPrivateKeyInput!
  passwordHash: String!
}

"""
Autogenerated return type of changePassword.
"""
type changePasswordPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  currentUser: CurrentUser
  errors: [UserError!]!
}

"""
Autogenerated input type of checkPhoneNumberVerificationCode
"""
input checkPhoneNumberVerificationCodeInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  code: String!
  privateKeyRecovery: PrivateKeyRecoveryInput
}

"""
Autogenerated return type of checkPhoneNumberVerificationCode.
"""
type checkPhoneNumberVerificationCodePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  currentUser: CurrentUser
  errors: [UserError!]!
}

"""
Autogenerated input type of claimAnyReward
"""
input claimAnyRewardInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  rewardId: ID!
}

"""
Autogenerated return type of claimAnyReward.
"""
type claimAnyRewardPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  currentUser: CurrentUser
  errors: [UserError!]!
  reward: AnyRewardInterface
}

"""
Autogenerated input type of claimCardsFromPack
"""
input claimCardsFromPackInput {
  chosenCardSlugs: [String!]!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  packId: ID!
}

"""
Autogenerated return type of claimCardsFromPack.
"""
type claimCardsFromPackPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  currentUser: CurrentUser
  errors: [UserError!]!
  pack: Pack
}

"""
Autogenerated input type of claimConversionCredit
"""
input claimConversionCreditInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  conversionCreditId: ID
  promoCode: String
}

"""
Autogenerated return type of claimConversionCredit.
"""
type claimConversionCreditPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  conversionCredit: ConversionCredit
  currentUser: CurrentUser
  errors: [UserError!]!
}

"""
Autogenerated input type of claimDeliverableItemOrder
"""
input claimDeliverableItemOrderInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  deliverableItemOrderId: ID!
  postalAddress: PostalAddressInput!
  userSelection: UserSelectionInput!
}

"""
Autogenerated return type of claimDeliverableItemOrder.
"""
type claimDeliverableItemOrderPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  deliverableItemOrder: DeliverableItemOrder
  errors: [UserError!]!
}

"""
Autogenerated input type of claimFootballManagerTask
"""
input claimFootballManagerTaskInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  footballManagerTaskId: ID!
}

"""
Autogenerated return type of claimFootballManagerTask.
"""
type claimFootballManagerTaskPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  currentUser: CurrentUser
  errors: [UserError!]!
  footballManagerTask: FootballManagerTask
}

"""
Autogenerated input type of claimOnboardingEnergyGift
"""
input claimOnboardingEnergyGiftInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  sport: Sport!
}

"""
Autogenerated return type of claimOnboardingEnergyGift.
"""
type claimOnboardingEnergyGiftPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  currentUser: CurrentUser
  errors: [UserError!]!
  giftedEnergies: [InGameCurrencyBalance!]!
}

"""
Autogenerated input type of claimPromotionalEventAirdrop
"""
input claimPromotionalEventAirdropInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  promotionalEventId: ID!
}

"""
Autogenerated return type of claimPromotionalEventAirdrop.
"""
type claimPromotionalEventAirdropPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  currentUser: CurrentUser
  errors: [UserError!]!
  promotionalEvent: AirdropPromotionalEvent
}

"""
Autogenerated input type of claimReferralReward
"""
input claimReferralRewardInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  referralRewardId: ID!
}

"""
Autogenerated return type of claimReferralReward.
"""
type claimReferralRewardPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  currentUser: CurrentUser
  errors: [UserError!]!
  referralReward: ReferralReward
}

"""
Autogenerated input type of claimReward
"""
input claimRewardInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  signedAlternativeRewardConfigs: String
  so5RewardId: ID!
}

"""
Autogenerated return type of claimReward.
"""
type claimRewardPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  currentUser: CurrentUser
  errors: [UserError!]!
  so5Reward: So5Reward
}

"""
Autogenerated input type of claimRewards
"""
input claimRewardsInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  so5RewardIds: [ID!]!
}

"""
Autogenerated return type of claimRewards.
"""
type claimRewardsPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  currentUser: CurrentUser
  errors: [UserError!]!
  so5Rewards: [So5Reward!]
}

"""
Autogenerated input type of claimStarterPack
"""
input claimStarterPackInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  favoriteTeamSlug: String
  onboardingSo5LeaderboardId: ID
  sport: Sport!
  starPlayerSlug: String
}

"""
Autogenerated return type of claimStarterPack.
"""
type claimStarterPackPayload {
  cards: [AnyCardInterface!]

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  currentUser: CurrentUser
  errors: [UserError!]!
  onboardingPack: Pack
  pack: CardPack
}

"""
Autogenerated input type of claimTask
"""
input claimTaskInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  signedAlternativeRewardConfigs: String
  taskId: ID!
}

"""
Autogenerated return type of claimTask.
"""
type claimTaskPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  currentUser: CurrentUser
  errors: [UserError!]!
  managerProgressionTask: ManagerTaskInterface @deprecated(reason: "Use task instead")
  rewards: [AnyRewardInterface!]
  task: TaskInterface
}

"""
Autogenerated input type of completeDropChallenge
"""
input completeDropChallengeInput {
  cardSlugs: [String!]!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  taskId: ID!
}

"""
Autogenerated return type of completeDropChallenge.
"""
type completeDropChallengePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  currentUser: CurrentUser
  errors: [UserError!]!
  rewards: [AnyRewardInterface!]
  task: DropChallengeTask
}

"""
Autogenerated input type of confirmCardPull
"""
input confirmCardPullInput {
  cardPullId: ID!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of confirmCardPull.
"""
type confirmCardPullPayload {
  cardPull: CardPull

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  confirmedCard: AnyCardInterface
  currentUser: CurrentUser
  errors: [UserError!]!
}

"""
Autogenerated input type of confirmDevice
"""
input confirmDeviceInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  token: String!
}

"""
Autogenerated input type of confirmDeviceWithCode
"""
input confirmDeviceWithCodeInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  code: String!
}

"""
Autogenerated return type of confirmDeviceWithCode.
"""
type confirmDeviceWithCodePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  currentUser: CurrentUser
  errors: [UserError!]!
}

"""
Autogenerated input type of confirmEmail
"""
input confirmEmailInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  token: String!
}

"""
Autogenerated input type of confirmSo5LineupImportsBatch
"""
input confirmSo5LineupImportsBatchInput {
  batchId: String!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of confirmSo5LineupImportsBatch.
"""
type confirmSo5LineupImportsBatchPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [UserError!]!
}

"""
Autogenerated input type of confirmSo5Lineups
"""
input confirmSo5LineupsInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  so5LeagueIds: [ID!]
  so5LineupIds: [ID!]
  targetedRewardSlug: String
}

"""
Autogenerated return type of confirmSo5Lineups.
"""
type confirmSo5LineupsPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  currentUser: CurrentUser
  errors: [UserError!]!
  so5Lineups: [So5Lineup!]
}

"""
Autogenerated input type of confirmSo5NoCardLineup
"""
input confirmSo5NoCardLineupInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  so5LeaderboardId: ID!
  so5NoCardLineupId: ID!
}

"""
Autogenerated return type of confirmSo5NoCardLineup.
"""
type confirmSo5NoCardLineupPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  currentUser: CurrentUser
  errors: [UserError!]!
  so5NoCardLineup: So5NoCardLineup
}

"""
Autogenerated input type of consumeCardBooster
"""
input consumeCardBoosterInput {
  cardId: ID!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  userShopItemId: ID!
}

"""
Autogenerated return type of consumeCardBooster.
"""
type consumeCardBoosterPayload {
  card: Card

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [UserError!]!
}

"""
Autogenerated input type of consumeEphemeralToken
"""
input consumeEphemeralTokenInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  token: String!
}

"""
Autogenerated input type of createBaseWithdrawal
"""
input createBaseWithdrawalInput {
  """
  Amount to withdraw, in wei.
  """
  amount: WeiAmount!
  approval: AuthorizationApprovalInput!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Destination Ethereum address.
  """
  destination: String!
}

"""
Autogenerated return type of createBaseWithdrawal.
"""
type createBaseWithdrawalPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  currentUser: CurrentUser
  errors: [UserError!]!
  withdrawal: BaseChainWithdrawal
}

"""
Autogenerated input type of createCardAuthorization
"""
input createCardAuthorizationInput {
  authorizationId: String!
  browserInfo: BrowserInfoInput!
  cardId: String!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of createCardAuthorization.
"""
type createCardAuthorizationPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [UserError!]!
  providerErrorCode: String
  providerId: String
  secureModeRedirectUrl: String
}

"""
Autogenerated input type of createCardRegistration
"""
input createCardRegistrationInput {
  cardType: CreditCardType

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of createCardRegistration.
"""
type createCardRegistrationPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [UserError!]!
  preRegistrationData: PreRegistrationData
}

"""
Autogenerated input type of createCardWithdrawal
"""
input createCardWithdrawalInput {
  assetId: String
  cardSlug: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  destination: String!

  """
  List of signed LimitOrder objects.
  """
  starkSignatures: [StarkSignatureInput!]!
}

"""
Autogenerated return type of createCardWithdrawal.
"""
type createCardWithdrawalPayload {
  anyCard: AnyCardInterface

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [UserError!]!
}

"""
Autogenerated input type of createConnectedTasks
"""
input createConnectedTasksInput {
  campaignSlug: String!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  connectedUserSlug: String!
  simulate: Boolean
}

"""
Autogenerated return type of createConnectedTasks.
"""
type createConnectedTasksPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [UserError!]!
  tasks: [TaskInterface!]
}

"""
Autogenerated input type of createDeck
"""
input createDeckInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  name: String!
  sport: Sport!
  visible: Boolean!
}

"""
Autogenerated return type of createDeck.
"""
type createDeckPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  currentUser: CurrentUser
  deck: Deck
  errors: [UserError!]!
  userSportProfile: AnyUserSportProfile
}

"""
Autogenerated input type of createDepositBankAccountMutation
"""
input createDepositBankAccountMutationInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of createDepositBankAccountMutation.
"""
type createDepositBankAccountMutationPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  currentUser: CurrentUser
  errors: [UserError!]!
}

"""
Autogenerated input type of createDirectOffer
"""
input createDirectOfferInput {
  approvals: [AuthorizationApprovalInput!]!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  counteredOfferId: String

  """
  ID used as unique deal identifier. Consider using `crypto.getRandomValues(new Uint32Array(4)).join()` to generate one.
  """
  dealId: String!

  """
  Number of seconds this offer should be valid. Will be rounded to
                                     86400 (1 day) if given a lower value.
  """
  duration: Int
  migrationData: OfferMigrationInput

  """
  Amount to receive and its currency. if set, must be one of the proposer wallet currencies.
  """
  receiveAmount: AmountInput
  receiveAssetIds: [String!]
  receiverSlug: String!

  """
  Amount to send and its currency. If set, must be one of the proposer wallet currencies.
  """
  sendAmount: AmountInput
  sendAssetIds: [String!]
}

"""
Autogenerated return type of createDirectOffer.
"""
type createDirectOfferPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  currentUser: CurrentUser
  errors: [UserError!]!

  """
  The sport-agnostic offer
  """
  tokenOffer: TokenOffer
}

"""
Autogenerated input type of createEphemeralLink
"""
input createEphemeralLinkInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  tokenAsQueryParam: Boolean = true
  url: String!
}

"""
Autogenerated return type of createEphemeralLink.
"""
type createEphemeralLinkPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [UserError!]!

  """
  The resulting URL if there was no error
  """
  url: String
}

"""
Autogenerated input type of createEthBankWithdrawalIntent
"""
input createEthBankWithdrawalIntentInput {
  amount: String!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of createEthBankWithdrawalIntent.
"""
type createEthBankWithdrawalIntentPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [UserError!]!
  ethBankWithdrawalIntent: EthBankWithdrawalIntent
}

"""
Autogenerated input type of createEthDeposit
"""
input createEthDepositInput {
  """
  Pending deposit amount, in wei
  """
  amount: WeiAmount!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Transaction hash of the deposit
  """
  transactionHash: String!
}

"""
Autogenerated return type of createEthDeposit.
"""
type createEthDepositPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  currentUser: CurrentUser
  errors: [UserError!]!
}

"""
Autogenerated input type of createEthMigration
"""
input createEthMigrationInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  nonce: String!
  signature: String!
  weiAmount: WeiAmount!
}

"""
Autogenerated return type of createEthMigration.
"""
type createEthMigrationPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  currentUser: CurrentUser
  errors: [UserError!]!
}

"""
Autogenerated input type of createEthVault
"""
input createEthVaultInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of createEthVault.
"""
type createEthVaultPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  currentUser: CurrentUser
  errors: [UserError!]!
}

"""
Autogenerated input type of createFastWithdrawal
"""
input createFastWithdrawalInput {
  amount: WeiAmount!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  salt: String!

  """
  List of signed LimitOrder objects.
  """
  starkSignatures: [StarkSignatureInput!]!
  to: String!
}

"""
Autogenerated return type of createFastWithdrawal.
"""
type createFastWithdrawalPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  currentUser: CurrentUser
  errors: [UserError!]!
}

"""
Autogenerated input type of createFiatPayer
"""
input createFiatPayerInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  firstName: String!
  lastName: String!
}

"""
Autogenerated return type of createFiatPayer.
"""
type createFiatPayerPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  currentUser: CurrentUser
  errors: [UserError!]!
}

"""
Autogenerated input type of createFiatWallet
"""
input createFiatWalletInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  countryOfResidenceCode: String!
  currency: FiatCurrency!
  dob: ISO8601Date!
  firstName: String!
  lastName: String!
  mangopayTermsAndConditionsAccepted: Boolean!
  nationalityCode: String!

  """
  URL to redirect the user to after the enrollment process is completed. 
  """
  returnUrl: String
}

"""
Autogenerated return type of createFiatWallet.
"""
type createFiatWalletPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  currentUser: CurrentUser
  errors: [UserError!]!
  redirectUrl: String
}

"""
Autogenerated input type of createFiatWithdrawal
"""
input createFiatWithdrawalInput {
  """
  Amount to withdraw and its currency
  """
  amounts: AmountInput!
  attemptReference: String
  bankAccountId: String!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of createFiatWithdrawal.
"""
type createFiatWithdrawalPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  currentUser: CurrentUser
  errors: [UserError!]!
  withdrawal: MangopayWithdrawal
}

"""
Autogenerated input type of createIdentityVerificationSession
"""
input createIdentityVerificationSessionInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  userIdentityVerificationId: String!
}

"""
Autogenerated return type of createIdentityVerificationSession.
"""
type createIdentityVerificationSessionPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [UserError!]!
  verificationSession: VerificationSession
}

"""
Autogenerated input type of createJwtToken
"""
input createJwtTokenInput {
  """
  Audience claim identifies the intended audience for this token. Consider using
  a value that uniquely identifies your use case.
  """
  aud: String!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of createJwtToken.
"""
type createJwtTokenPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  currentUser: CurrentUser
  errors: [UserError!]!

  """
  Generate a JWT Token. null if, and only if, currentUser is null.
  """
  jwtToken: JwtToken
}

"""
Autogenerated input type of createOnboardingSo5Lineup
"""
input createOnboardingSo5LineupInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  draft: Boolean = false
  name: String
  so5Appearances: [So5AppearanceInput!]!
  so5LeaderboardId: ID!
  so5LineupId: ID
}

"""
Autogenerated return type of createOnboardingSo5Lineup.
"""
type createOnboardingSo5LineupPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  currentUser: CurrentUser
  errors: [UserError!]!
  probabilisticBundle: ProbabilisticBundle
  so5LeaderboardContender: So5LeaderboardContender
  so5Lineup: So5Lineup
}

"""
Autogenerated input type of createOrUpdateSingleBuyOfferMinPrice
"""
input createOrUpdateSingleBuyOfferMinPriceInput {
  assetId: String!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  isPrivate: Boolean!

  """
  Min price to set and its currency.
  """
  minPrice: AmountInput
}

"""
Autogenerated return type of createOrUpdateSingleBuyOfferMinPrice.
"""
type createOrUpdateSingleBuyOfferMinPricePayload {
  card: AnyCardInterface

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [UserError!]!
}

"""
Autogenerated input type of createOrUpdateSo5Lineup
"""
input createOrUpdateSo5LineupInput {
  addedCards: [AddCardInput!] = []

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  composeSessionId: String
  draft: Boolean = false
  droppedCards: [DropCardInput!] = []
  entryItemId: ID
  managerTeamId: ID
  name: String
  shouldCreateManagerTeam: Boolean
  so5Appearances: [So5AppearanceInput!]!
  so5LeaderboardId: ID!
  so5LineupId: ID
  targetedRewardSlug: String
}

"""
Autogenerated input type of createPasskey
"""
input createPasskeyInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  nickname: String
  passkeyCredential: PasskeyCredentialForCreateInput!
  passkeyEncryptedPrivateKey: PasswordEncryptedPrivateKeyInput
}

"""
Autogenerated return type of createPasskey.
"""
type createPasskeyPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  currentUser: CurrentUser
  errors: [UserError!]!
  passkey: Passkey
}

"""
Autogenerated input type of createSingleSaleOffer
"""
input createSingleSaleOfferInput {
  approvals: [AuthorizationApprovalInput!]!
  assetId: String!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  ID used as unique deal identifier. Consider using `crypto.getRandomValues(new Uint32Array(4)).join()` to generate one.
  """
  dealId: String!

  """
  Number of seconds this offer should be valid
  """
  duration: Int
  migrationData: OfferMigrationInput

  """
  Reference amount to receive and its currency. Must be one of the settlement currencies.
  """
  receiveAmount: AmountInput!

  """
  List of accepted currencies. Must match the proposer wallet currencies (e.g:
  you cannot receive fiat without a fiat wallet).
  """
  settlementCurrencies: [SupportedCurrency!]
  startDate: ISO8601DateTime
}

"""
Autogenerated return type of createSingleSaleOffer.
"""
type createSingleSaleOfferPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [UserError!]!

  """
  The sport-agnostic offer
  """
  tokenOffer: TokenOffer
}

"""
Autogenerated input type of createSo5LineupImportsBatch
"""
input createSo5LineupImportsBatchInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  so5Lineups: [So5LineupImportInput!]!
  sport: Sport = FOOTBALL
}

"""
Autogenerated return type of createSo5LineupImportsBatch.
"""
type createSo5LineupImportsBatchPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [UserError!]!
  so5LineupImportsBatch: So5LineupImportsBatch
}

"""
Autogenerated input type of createSo5UserGroup
"""
input createSo5UserGroupInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  description: String
  displayName: String!
  endGameWeek: Int
  gameMode: GameMode = PRO
  logoId: ID
  publiclyAccessible: Boolean = true
  so5LeaderboardType: So5LeaderboardType
  startGameWeek: Int
}

"""
Autogenerated return type of createSo5UserGroup.
"""
type createSo5UserGroupPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [UserError!]!
  so5UserGroup: So5UserGroup
  userGroup: UserGroupInterface
}

"""
Autogenerated input type of createSubscription
"""
input createSubscriptionInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  interactionContext: String
  subscribable: SubscribableInput!
}

"""
Autogenerated return type of createSubscription.
"""
type createSubscriptionPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [UserError!]!
  subscription: EmailSubscription
}

"""
Autogenerated input type of createWallet
"""
input createWalletInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  passwordHash: String!
  wallet: WalletInput!
}

"""
Autogenerated return type of createWallet.
"""
type createWalletPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  currentUser: CurrentUser
  errors: [UserError!]!
}

"""
Autogenerated input type of createWireTransferDeposit
"""
input createWireTransferDepositInput {
  """
  Amount to deposit and its currency
  """
  amounts: AmountInput!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of createWireTransferDeposit.
"""
type createWireTransferDepositPayload {
  bankAccount: BankAccount

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [UserError!]!
  wireReference: String
}

"""
Autogenerated input type of createWithdrawalBankAccount
"""
input createWithdrawalBankAccountInput {
  accountIdentifier: String!
  bankAccountType: BankAccountType!
  bankIdentifier: String!
  bankName: String
  branchCode: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  countryCode: String!
  ownerAddress: BankAccountOwnerAddressInput!
  ownerName: String @deprecated(reason: "Prefilled from the current user name")

  """
  URL to redirect to after SCA verification
  """
  returnUrl: String
}

"""
Autogenerated return type of createWithdrawalBankAccount.
"""
type createWithdrawalBankAccountPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  currentUser: CurrentUser
  errors: [UserError!]!
  mangopayBankAccount: BankAccount

  """
  URL to redirect to for Strong customer authentication (SCA)
  """
  redirectUrl: String
}

"""
Autogenerated input type of createWithdrawal
"""
input createWithdrawalInput {
  agreedFeeAmount: String
  amount: WeiAmount!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  dealId: String!
  signature: String!
  to: String!
}

"""
Autogenerated return type of createWithdrawal.
"""
type createWithdrawalPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  currentUser: CurrentUser
  errors: [UserError!]!
  withdrawal: Withdrawal
}

"""
Autogenerated input type of deactivateWalletRecovery
"""
input deactivateWalletRecoveryInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  destination: String!
  method: PrivateKeyRecoveryOptionMethodEnum!
}

"""
Autogenerated return type of deactivateWalletRecovery.
"""
type deactivateWalletRecoveryPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  currentUser: CurrentUser
  errors: [UserError!]!
}

"""
Autogenerated input type of declineSo5LineupImportsBatch
"""
input declineSo5LineupImportsBatchInput {
  batchId: String!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of declineSo5LineupImportsBatch.
"""
type declineSo5LineupImportsBatchPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [UserError!]!
}

"""
Autogenerated input type of declineSo5NoCardLineup
"""
input declineSo5NoCardLineupInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  so5NoCardLineupId: ID!
}

"""
Autogenerated return type of declineSo5NoCardLineup.
"""
type declineSo5NoCardLineupPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  currentUser: CurrentUser
  errors: [UserError!]!
  so5NoCardLineup: So5NoCardLineup
}

"""
Autogenerated input type of deleteDeck
"""
input deleteDeckInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  deckSlug: String!
}

"""
Autogenerated return type of deleteDeck.
"""
type deleteDeckPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  currentUser: CurrentUser
  deck: Deck
  errors: [UserError!]!
  userSportProfile: AnyUserSportProfile
}

"""
Autogenerated input type of deletePasskey
"""
input deletePasskeyInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  passkeyId: ID!
}

"""
Autogenerated return type of deletePasskey.
"""
type deletePasskeyPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  currentUser: CurrentUser
  errors: [UserError!]!
}

"""
Autogenerated input type of deletePostalAddress
"""
input deletePostalAddressInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of deletePostalAddress.
"""
type deletePostalAddressPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  currentUser: CurrentUser
  errors: [UserError!]!
}

"""
Autogenerated input type of deleteSo5Lineup
"""
input deleteSo5LineupInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  so5LineupId: ID!
}

"""
Autogenerated return type of deleteSo5Lineup.
"""
type deleteSo5LineupPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  currentUser: CurrentUser
  errors: [UserError!]!
  so5Leaderboard: So5Leaderboard
  so5LeaderboardContender: So5LeaderboardContender
}

"""
Autogenerated input type of deleteSo5UserGroup
"""
input deleteSo5UserGroupInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  so5UserGroupId: ID!
}

"""
Autogenerated return type of deleteSo5UserGroup.
"""
type deleteSo5UserGroupPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [UserError!]!
}

"""
Autogenerated input type of deleteSubscription
"""
input deleteSubscriptionInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  slug: String!
}

"""
Autogenerated return type of deleteSubscription.
"""
type deleteSubscriptionPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [UserError!]!
  subscribable: Subscribable
  subscription: EmailSubscription
}

"""
Autogenerated input type of deleteWithdrawalBankAccount
"""
input deleteWithdrawalBankAccountInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  mangopayBankAccountId: String!
}

"""
Autogenerated return type of deleteWithdrawalBankAccount.
"""
type deleteWithdrawalBankAccountPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  currentUser: CurrentUser
  errors: [UserError!]!
}

"""
Autogenerated input type of depositWithApplePay
"""
input depositWithApplePayInput {
  """
  Amount to deposit and its currency
  """
  amounts: AmountInput!

  """
  ApplePay payment data
  """
  applePaymentData: ApplePayPaymentDataInput!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of depositWithApplePay.
"""
type depositWithApplePayPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  currentUser: CurrentUser
  deposit: PendingDeposit
  errors: [UserError!]!
  providerId: String
}

"""
Autogenerated input type of destroyAccount
"""
input destroyAccountInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  password: String!
}

"""
Autogenerated return type of destroyAccount.
"""
type destroyAccountPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  currentUser: CurrentUser
  errors: [UserError!]!
}

"""
Autogenerated input type of destroyReferral
"""
input destroyReferralInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  referralId: ID!
}

"""
Autogenerated return type of destroyReferral.
"""
type destroyReferralPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  currentUser: CurrentUser
  errors: [UserError!]!
}

"""
Autogenerated input type of destroyWatchlist
"""
input destroyWatchlistInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  watchlistId: ID
}

"""
Autogenerated return type of destroyWatchlist.
"""
type destroyWatchlistPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  currentUser: CurrentUser
  errors: [UserError!]!
}

"""
Autogenerated input type of detachPaymentMethod
"""
input detachPaymentMethodInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  paymentMethod: String!
  provider: PaymentMethodProvider
}

"""
Autogenerated return type of detachPaymentMethod.
"""
type detachPaymentMethodPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  currentUser: CurrentUser
  errors: [UserError!]!
}

"""
Autogenerated input type of disable2fa
"""
input disable2faInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  otpAttempt: String!
  password: String!
}

"""
Autogenerated return type of disable2fa.
"""
type disable2faPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  currentUser: CurrentUser
  errors: [UserError!]!
}

"""
Autogenerated input type of disconnectOmniauthProvider
"""
input disconnectOmniauthProviderInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  email: String
  provider: String!
}

"""
Autogenerated return type of disconnectOmniauthProvider.
"""
type disconnectOmniauthProviderPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  currentUser: CurrentUser
  errors: [UserError!]!
  userProfile: UserProfile
}

"""
Autogenerated input type of dropAndAddCards
"""
input dropAndAddCardsInput {
  addedCards: [AddCardInput!] = []
  attachCardsToUserCollections: Boolean = false @deprecated(reason: "Cards are now always attached to the user collection")

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  droppedCards: [DropCardInput!] = []
  interactionContext: String
}

"""
Autogenerated return type of dropAndAddCards.
"""
type dropAndAddCardsPayload {
  addedCards: [AnyCardInterface!]

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  currentUser: CurrentUser
  droppedCards: [AnyCardInterface!]
  errors: [UserError!]!
}

"""
Autogenerated input type of editDeck
"""
input editDeckInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  deckSlug: String!
  name: String!
  newIndex: Int
  visible: Boolean!
}

"""
Autogenerated return type of editDeck.
"""
type editDeckPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  currentUser: CurrentUser
  deck: Deck
  errors: [UserError!]!
}

"""
Autogenerated input type of enable2fa
"""
input enable2faInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  otpAttempt: String!
}

"""
Autogenerated return type of enable2fa.
"""
type enable2faPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  currentUser: CurrentUser
  errors: [UserError!]!
  otpBackupCodes: [String!]
}

"""
Autogenerated input type of enrollSCA
"""
input enrollSCAInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  URL to redirect the user to after the enrollment process is completed. 
  """
  returnUrl: String!
}

"""
Autogenerated return type of enrollSCA.
"""
type enrollSCAPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [UserError!]!
  redirectUrl: String
}

"""
Autogenerated input type of fetchEncryptedPrivateKey
"""
input fetchEncryptedPrivateKeyInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  otpAttempt: String = null
}

"""
Autogenerated return type of fetchEncryptedPrivateKey.
"""
type fetchEncryptedPrivateKeyPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [UserError!]!
  sorarePrivateKey: SorarePrivateKey
}

"""
Autogenerated input type of footballRivalsAppearanceSubstitute
"""
input footballRivalsAppearanceSubstituteInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  newAppearance: FootballRivalsAppearanceInput!
  previousAppearanceId: ID!
}

"""
Autogenerated return type of footballRivalsAppearanceSubstitute.
"""
type footballRivalsAppearanceSubstitutePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  currentManager: FootballRivalsCurrentManager
  errors: [UserError!]!
  lineup: FootballRivalsLineup
}

"""
Autogenerated input type of footballRivalsArenaRequestCreate
"""
input footballRivalsArenaRequestCreateInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  lineupId: ID!
}

"""
Autogenerated return type of footballRivalsArenaRequestCreate.
"""
type footballRivalsArenaRequestCreatePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  currentManager: FootballRivalsCurrentManager
  errors: [UserError!]!
  game: FootballRivalsGame
}

"""
Autogenerated input type of footballRivalsGameSendNudge
"""
input footballRivalsGameSendNudgeInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  gameId: ID!
  receiverId: ID!
}

"""
Autogenerated return type of footballRivalsGameSendNudge.
"""
type footballRivalsGameSendNudgePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  currentManager: FootballRivalsCurrentManager
  errors: [UserError!]!
}

"""
Autogenerated input type of footballRivalsLineupUpsert
"""
input footballRivalsLineupUpsertInput {
  acceptInviteIds: [ID!] @deprecated(reason: "Rivals invites are deprecated")
  acceptJoinSecrets: [String!] @deprecated(reason: "Rivals invites are deprecated")
  appearances: [FootballRivalsAppearanceInput!]!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  gameId: ID!
  invitedManagerId: ID @deprecated(reason: "Rivals invites are deprecated")
  joinArena: Boolean = true @deprecated(reason: "Always true now")
  source: ComposeLineupSource = RIVALS
  tacticSlug: String!
}

"""
Autogenerated return type of footballRivalsLineupUpsert.
"""
type footballRivalsLineupUpsertPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  currentManager: FootballRivalsCurrentManager
  errors: [UserError!]!
  game: FootballRivalsGame
  lineup: FootballRivalsLineup
}

"""
Autogenerated input type of footballRivalsRemindGame
"""
input footballRivalsRemindGameInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  gameId: ID!
  shouldNotify: Boolean!
}

"""
Autogenerated return type of footballRivalsRemindGame.
"""
type footballRivalsRemindGamePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [UserError!]!
  game: FootballRivalsGame
}

"""
Autogenerated input type of footballRivalsUpdateFavoriteTeam
"""
input footballRivalsUpdateFavoriteTeamInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  teamId: ID!
}

"""
Autogenerated return type of footballRivalsUpdateFavoriteTeam.
"""
type footballRivalsUpdateFavoriteTeamPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  currentManager: FootballRivalsCurrentManager
  errors: [UserError!]!
}

"""
Autogenerated input type of generateAccountingExtract
"""
input generateAccountingExtractInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  endDate: ISO8601Date
  includeCardRewards: Boolean = false
  includeCreditCardPayments: Boolean = false
  includeFiatEntries: Boolean = false
  includeLostBids: Boolean = false
  startDate: ISO8601Date
}

"""
Autogenerated return type of generateAccountingExtract.
"""
type generateAccountingExtractPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  currentUser: CurrentUser
  errors: [UserError!]!
}

"""
Autogenerated input type of generateOtpBackupCodes
"""
input generateOtpBackupCodesInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  otpAttempt: String = null
}

"""
Autogenerated return type of generateOtpBackupCodes.
"""
type generateOtpBackupCodesPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  currentUser: CurrentUser
  errors: [UserError!]!
  otpBackupCodes: [String!]
}

"""
Autogenerated input type of generateOtpProvisioningUri
"""
input generateOtpProvisioningUriInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of generateOtpProvisioningUri.
"""
type generateOtpProvisioningUriPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  currentUser: CurrentUser
  errors: [UserError!]!
  otpProvisioningUri: String
}

"""
Autogenerated input type of generatePasskeyChallengeForCreate
"""
input generatePasskeyChallengeForCreateInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of generatePasskeyChallengeForCreate.
"""
type generatePasskeyChallengeForCreatePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [UserError!]!
  passkeyChallenge: PasskeyChallenge
}

"""
Autogenerated input type of generatePasskeyChallengeForSignIn
"""
input generatePasskeyChallengeForSignInInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of generatePasskeyChallengeForSignIn.
"""
type generatePasskeyChallengeForSignInPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [UserError!]!
  passkeyChallenge: PasskeyChallenge
}

"""
Autogenerated input type of generateSo5NoCardLineup
"""
input generateSo5NoCardLineupInput {
  accessToken: String!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  proofOfResidencyPresignedKey: String
  recaptchaToken: String
  recaptchaTokenIos: String
  recaptchaTokenV2: String
  so5FixtureId: ID!
}

"""
Autogenerated return type of generateSo5NoCardLineup.
"""
type generateSo5NoCardLineupPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  currentUser: CurrentUser
  errors: [UserError!]!
}

"""
Autogenerated input type of hideMyFeaturedSo5LeaderboardGroup
"""
input hideMyFeaturedSo5LeaderboardGroupInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  so5FixtureId: ID!
}

"""
Autogenerated return type of hideMyFeaturedSo5LeaderboardGroup.
"""
type hideMyFeaturedSo5LeaderboardGroupPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [UserError!]!
  so5Fixture: So5Fixture
}

"""
Autogenerated input type of joinSo5UserGroup
"""
input joinSo5UserGroupInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  joinSecret: String
  userGroupId: ID
}

"""
Autogenerated return type of joinSo5UserGroup.
"""
type joinSo5UserGroupPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  currentUser: CurrentUser
  errors: [UserError!]!
  so5UserGroup: So5UserGroup
  userGroup: UserGroupInterface
}

"""
Autogenerated input type of levelUpCardWithXpCurrency
"""
input levelUpCardWithXpCurrencyInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  levelUpCard: LevelUpCardInput!
}

"""
Autogenerated return type of levelUpCardWithXpCurrency.
"""
type levelUpCardWithXpCurrencyPayload {
  card: AnyCardInterface

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  currentUser: CurrentUser
  errors: [UserError!]!
  recomputedBonusSo5Lineups: [So5Lineup!]
}

"""
Autogenerated input type of levelUpCardsWithXpCurrency
"""
input levelUpCardsWithXpCurrencyInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  levelUpCards: [LevelUpCardInput!]!
}

"""
Autogenerated return type of levelUpCardsWithXpCurrency.
"""
type levelUpCardsWithXpCurrencyPayload {
  cards: [AnyCardInterface!]

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  currentUser: CurrentUser
  errors: [UserError!]!
  recomputedBonusSo5Lineups: [So5Lineup!]
}

"""
Autogenerated input type of linkEthereumAddress
"""
input linkEthereumAddressInput {
  address: String!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  signature: String!
}

"""
Autogenerated return type of linkEthereumAddress.
"""
type linkEthereumAddressPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  currentUser: CurrentUser
  errors: [UserError!]!
}

"""
Autogenerated input type of loadPreviousLineup
"""
input loadPreviousLineupInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  managerTeamId: ID!
  previousSo5LineupId: ID!
  so5LeaderboardId: ID!
}

"""
Autogenerated return type of loadPreviousLineup.
"""
type loadPreviousLineupPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  currentUser: CurrentUser
  errors: [UserError!]!
  so5LeaderboardContender: So5LeaderboardContender
  so5Lineup: So5Lineup
}

"""
Autogenerated input type of loadSuggestedLineup
"""
input loadSuggestedLineupInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  managerTeamId: ID
  shouldCreateManagerTeam: Boolean
  so5LeaderboardId: ID!
}

"""
Autogenerated return type of loadSuggestedLineup.
"""
type loadSuggestedLineupPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  currentUser: CurrentUser
  errors: [UserError!]!
  so5LeaderboardContender: So5LeaderboardContender
  so5Lineup: So5Lineup
}

"""
Autogenerated input type of lockProMode
"""
input lockProModeInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  interactionContext: String
  sport: Sport!
}

"""
Autogenerated return type of lockProMode.
"""
type lockProModePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  currentUser: CurrentUser
  errors: [UserError!]!
}

"""
Autogenerated input type of markCardShardsChestUnlockedThresholdAsSeen
"""
input markCardShardsChestUnlockedThresholdAsSeenInput {
  cardShardsChestId: ID!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of markCardShardsChestUnlockedThresholdAsSeen.
"""
type markCardShardsChestUnlockedThresholdAsSeenPayload {
  cardShardsChest: CardShardsChest

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [UserError!]!
}

"""
Autogenerated input type of markItemAsSeen
"""
input markItemAsSeenInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  shopItemId: ID!
}

"""
Autogenerated return type of markItemAsSeen.
"""
type markItemAsSeenPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  currentUser: CurrentUser
  errors: [UserError!]!
  shopItem: ShopItem
}

"""
Autogenerated input type of markNotificationsAsRead
"""
input markNotificationsAsReadInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  notificationId: String
  notificationIds: [String!]
}

"""
Autogenerated return type of markNotificationsAsRead.
"""
type markNotificationsAsReadPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  currentUser: CurrentUser
  errors: [UserError!]!
  notifications: [NotificationInterface!]!
}

"""
Autogenerated input type of markStoriesAsRead
"""
input markStoriesAsReadInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  storyIds: [String!]!
}

"""
Autogenerated return type of markStoriesAsRead.
"""
type markStoriesAsReadPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  currentRivalsManager: FootballRivalsCurrentManager @deprecated(reason: "Not used anymore")
  currentUser: CurrentUser
  errors: [UserError!]!
  stories: [Story!]
}

"""
Autogenerated input type of migrateEth
"""
input migrateEthInput {
  approval: AuthorizationApprovalInput!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  weiAmount: WeiAmount!
}

"""
Autogenerated return type of migrateEth.
"""
type migrateEthPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  currentUser: CurrentUser
  errors: [UserError!]!
}

"""
Autogenerated input type of pickPulledCard
"""
input pickPulledCardInput {
  cardPullCardId: ID!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of pickPulledCard.
"""
type pickPulledCardPayload {
  cardPull: CardPull

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  currentUser: CurrentUser
  errors: [UserError!]!
}

"""
Autogenerated input type of prepareAcceptOffer
"""
input prepareAcceptOfferInput {
  attemptReference: String
  cartId: ID

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Global ID of the Offer or PrimaryOffer to accept.
  """
  offerId: ID
  settlementInfo: AcceptorSettlementInfoInput!

  """
  The signed amount to be used for dynamic price offers
  """
  signedAmount: String
}

"""
Autogenerated return type of prepareAcceptOffer.
"""
type prepareAcceptOfferPayload {
  authorizations: [AuthorizationRequest!]
  cart: Cart

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [UserError!]!
}

"""
Autogenerated input type of prepareAcceptTradeWithWalletAndCreditCard
"""
input prepareAcceptTradeWithWalletAndCreditCardInput {
  """
  The amount to be used when bidding, in the currency provided in settlement info
  """
  amount: String

  """
  The wallet approval to be used in addition to the credit card payment.
  """
  approval: AuthorizationApprovalInput!

  """
  The intent id corresponding to a credit card authorization
  """
  authorizationId: String!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  settlementInfo: AcceptorSettlementInfoInput!

  """
  The signed amount to be used for dynamic price offers
  """
  signedAmount: String
}

"""
Autogenerated return type of prepareAcceptTradeWithWalletAndCreditCard.
"""
type prepareAcceptTradeWithWalletAndCreditCardPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [UserError!]!
}

"""
Autogenerated input type of prepareBaseWithdrawal
"""
input prepareBaseWithdrawalInput {
  """
  Amount to withdraw, in wei.
  """
  amount: WeiAmount!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Destination Ethereum address.
  """
  destination: String!
}

"""
Autogenerated return type of prepareBaseWithdrawal.
"""
type prepareBaseWithdrawalPayload {
  authorization: AuthorizationRequest

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  currentUser: CurrentUser
  errors: [UserError!]!
}

"""
Autogenerated input type of prepareBid
"""
input prepareBidInput {
  amount: String!
  attemptReference: String

  """
  Global ID of the english auction to bid on
  """
  auctionId: String!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  settlementInfo: AcceptorSettlementInfoInput!
}

"""
Autogenerated return type of prepareBid.
"""
type prepareBidPayload {
  authorizations: [AuthorizationRequest!]

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [UserError!]!
}

"""
Autogenerated input type of prepareBuyInGameCurrencyPackWithCreditCard
"""
input prepareBuyInGameCurrencyPackWithCreditCardInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The id of the pack to be purchased
  """
  packId: ID!
  settlementInfo: AcceptorSettlementInfoInput!
}

"""
Autogenerated return type of prepareBuyInGameCurrencyPackWithCreditCard.
"""
type prepareBuyInGameCurrencyPackWithCreditCardPayload {
  authorization: AuthorizationRequest

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [UserError!]!
}

"""
Autogenerated input type of prepareCardWithdrawal
"""
input prepareCardWithdrawalInput {
  assetId: String
  cardSlug: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  destination: String
}

"""
Autogenerated return type of prepareCardWithdrawal.
"""
type prepareCardWithdrawalPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [UserError!]!
  transferRequest: TransferRequest
}

"""
Autogenerated input type of prepareDeposit
"""
input prepareDepositInput {
  amount: Int!
  attemptReference: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  saveCard: Boolean!
}

"""
Autogenerated return type of prepareDeposit.
"""
type prepareDepositPayload {
  authorization: MangopayCreditCardAuthorizationRequest

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  creditCardAuthorization: CreditCardAuthorizationRequest
  errors: [UserError!]!
}

"""
Autogenerated input type of prepareEthDeposit
"""
input prepareEthDepositInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  weiAmount: WeiAmount!
}

"""
Autogenerated return type of prepareEthDeposit.
"""
type prepareEthDepositPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [UserError!]!
  ethDeposit: EthDeposit
}

"""
Autogenerated input type of prepareFastWithdrawal
"""
input prepareFastWithdrawalInput {
  """
  Amount to withdraw, in wei.
  """
  amount: WeiAmount!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Destination Ethereum address.
  """
  to: String!
}

"""
Autogenerated return type of prepareFastWithdrawal.
"""
type prepareFastWithdrawalPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  currentUser: CurrentUser
  errors: [UserError!]!
  fastWithdrawal: FastWithdrawal
}

"""
Autogenerated input type of prepareIdealDeposit
"""
input prepareIdealDepositInput {
  """
  Amount to deposit and its currency
  """
  amounts: AmountInput!
  attemptReference: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  URL to redirect the user to after the deposit is completed
  """
  returnUrl: String
}

"""
Autogenerated return type of prepareIdealDeposit.
"""
type prepareIdealDepositPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [UserError!]!
  redirectUrl: String
}

"""
Autogenerated input type of prepareMigrateEth
"""
input prepareMigrateEthInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of prepareMigrateEth.
"""
type prepareMigrateEthPayload {
  authorization: AuthorizationRequest

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [UserError!]!
  weiAmount: WeiAmount!
}

"""
Autogenerated input type of prepareOffer
"""
input prepareOfferInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Amount to receive and its currency. Must be one of the settlement currencies.
  """
  receiveAmount: AmountInput
  receiveAssetIds: [String!]!
  receiverSlug: String

  """
  Amount to send and its currency. Must be one of the settlement currencies.
  """
  sendAmount: AmountInput
  sendAssetIds: [String!]!

  """
  List of accepted currencies. Must match the proposer wallet currencies (e.g:
  you cannot receive fiat without a fiat wallet).
  """
  settlementCurrencies: [SupportedCurrency!]
}

"""
Autogenerated return type of prepareOffer.
"""
type prepareOfferPayload {
  authorizations: [AuthorizationRequest!]

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [UserError!]!
}

"""
Autogenerated input type of preparePaypalDeposit
"""
input preparePaypalDepositInput {
  """
  Amount to deposit and its currency
  """
  amounts: AmountInput!
  attemptReference: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  URL to redirect the user to after the deposit is completed
  """
  returnUrl: String
}

"""
Autogenerated return type of preparePaypalDeposit.
"""
type preparePaypalDepositPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [UserError!]!
  redirectUrl: String
}

"""
Autogenerated input type of prepareTokenDeposit
"""
input prepareTokenDepositInput {
  assetId: String!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of prepareTokenDeposit.
"""
type prepareTokenDepositPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [UserError!]!
  tokenDeposit: TokenDeposit
}

"""
Autogenerated input type of probabilisticBundlesOpen
"""
input probabilisticBundlesOpenInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  probabilisticBundleId: ID!
}

"""
Autogenerated return type of probabilisticBundlesOpen.
"""
type probabilisticBundlesOpenPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  currentUser: CurrentUser
  errors: [UserError!]!
  probabilisticBundle: ProbabilisticBundle
}

"""
Autogenerated input type of pullCards
"""
input pullCardsInput {
  cardShardsChestId: ID!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of pullCards.
"""
type pullCardsPayload {
  cardPull: CardPull
  cardShardsChest: CardShardsChest

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  currentUser: CurrentUser
  errors: [UserError!]!
}

"""
Autogenerated input type of reactActivity
"""
input reactActivityInput {
  activityId: ID!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  emoji: Emoji!
}

"""
Autogenerated return type of reactActivity.
"""
type reactActivityPayload {
  activity: ActivitiesInterface

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [UserError!]!
}

"""
Autogenerated input type of refreshCart
"""
input refreshCartInput {
  cartId: ID!
  cartItemIds: [ID!]

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of refreshCart.
"""
type refreshCartPayload {
  cart: Cart
  cartItems: [CartItem!]

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  currentUser: CurrentUser
  errors: [UserError!]!
}

"""
Autogenerated input type of rejectCardPull
"""
input rejectCardPullInput {
  cardPullId: ID!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of rejectCardPull.
"""
type rejectCardPullPayload {
  cardPull: CardPull

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  currentUser: CurrentUser
  errors: [UserError!]!
}

"""
Autogenerated input type of rejectOffer
"""
input rejectOfferInput {
  block: Boolean
  blockchainId: String!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  rejectionReason: TokenOfferRejectionReason
}

"""
Autogenerated return type of rejectOffer.
"""
type rejectOfferPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [UserError!]!

  """
  The sport-agnostic offer
  """
  tokenOffer: TokenOffer
}

"""
Autogenerated input type of relayCall
"""
input relayCallInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  encodedFunction: String!
  extraGas: Int!
  signature: String!
}

"""
Autogenerated return type of relayCall.
"""
type relayCallPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  currentUser: CurrentUser
  errors: [UserError!]!
  transaction: EthereumTransaction
}

"""
Autogenerated input type of removeAuctionReminder
"""
input removeAuctionReminderInput {
  auctionReminderId: ID!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of removeAuctionReminder.
"""
type removeAuctionReminderPayload {
  auction: TokenAuction
  auctionReminder: AuctionReminder

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  currentUser: CurrentUser
  errors: [UserError!]!
}

"""
Autogenerated input type of removeFromCart
"""
input removeFromCartInput {
  cartId: ID!
  cartItemIds: [ID!]!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of removeFromCart.
"""
type removeFromCartPayload {
  cart: Cart

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  currentUser: CurrentUser
  errors: [UserError!]!
}

"""
Autogenerated input type of removeFromWatchlist
"""
input removeFromWatchlistInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  printablePlayerIds: [ID!]!
  watchlistId: ID
}

"""
Autogenerated return type of removeFromWatchlist.
"""
type removeFromWatchlistPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  currentUser: CurrentUser
  errors: [UserError!]!
  watchlist: Watchlist
}

"""
Autogenerated input type of removeTokenFromDeck
"""
input removeTokenFromDeckInput {
  assetId: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  deckSlug: String!
  slug: String
}

"""
Autogenerated return type of removeTokenFromDeck.
"""
type removeTokenFromDeckPayload {
  card: AnyCardInterface

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  currentUser: CurrentUser
  deck: Deck
  errors: [UserError!]!
}

"""
Autogenerated input type of removeUserFromSo5UserGroup
"""
input removeUserFromSo5UserGroupInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  so5UserGroupId: String!
  userId: String!
}

"""
Autogenerated return type of removeUserFromSo5UserGroup.
"""
type removeUserFromSo5UserGroupPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  currentUser: CurrentUser
  errors: [UserError!]!
  so5UserGroup: So5UserGroup
  userGroup: UserGroupInterface
}

"""
Autogenerated input type of reportTelemetry
"""
input reportTelemetryInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  operations: [OperationInput!]!
}

"""
Autogenerated return type of reportTelemetry.
"""
type reportTelemetryPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [UserError!]!
}

"""
Autogenerated input type of requestSo5NoCardDraftableAppearance
"""
input requestSo5NoCardDraftableAppearanceInput {
  accessToken: String!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  configSignature: String
  so5FixtureId: ID!
}

"""
Autogenerated return type of requestSo5NoCardDraftableAppearance.
"""
type requestSo5NoCardDraftableAppearancePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  currentUser: CurrentUser
  draftableAppearance: So5NoCardDraftableAppearance
  eligibleSlotIndex: Int
  errors: [UserError!]!
}

"""
Autogenerated input type of requestSo5NoCardLineupEligibleLeaderboards
"""
input requestSo5NoCardLineupEligibleLeaderboardsInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  so5NoCardLineupId: ID!
}

"""
Autogenerated return type of requestSo5NoCardLineupEligibleLeaderboards.
"""
type requestSo5NoCardLineupEligibleLeaderboardsPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  currentUser: CurrentUser
  errors: [UserError!]!
  so5NoCardLineup: So5NoCardLineup
}

"""
Autogenerated input type of resendConfirmationInstructions
"""
input resendConfirmationInstructionsInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The path where the user should be redirected after email confirmation
  """
  fromPath: String
  recaptchaToken: String
  recaptchaTokenIos: String
  recaptchaTokenV2: String
}

"""
Autogenerated return type of resendConfirmationInstructions.
"""
type resendConfirmationInstructionsPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  currentUser: CurrentUser
  errors: [UserError!]!
}

"""
Autogenerated input type of resendVerificationCode
"""
input resendVerificationCodeInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  reference: String!
}

"""
Autogenerated return type of resendVerificationCode.
"""
type resendVerificationCodePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  currentUser: CurrentUser
  errors: [UserError!]!
}

"""
Autogenerated input type of resetPrivateKey
"""
input resetPrivateKeyInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  starkKey: String
}

"""
Autogenerated return type of resetPrivateKey.
"""
type resetPrivateKeyPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  currentUser: CurrentUser
  errors: [UserError!]!
}

"""
Autogenerated input type of resetSo5NoCardDraftedAppearances
"""
input resetSo5NoCardDraftedAppearancesInput {
  accessToken: String!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  so5FixtureId: ID!
}

"""
Autogenerated return type of resetSo5NoCardDraftedAppearances.
"""
type resetSo5NoCardDraftedAppearancesPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  currentUser: CurrentUser
  errors: [UserError!]!
}

"""
Autogenerated input type of restoreWallet
"""
input restoreWalletInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  passwordEncryptedPrivateKey: PasswordEncryptedPrivateKeyInput!
  passwordHash: String!
}

"""
Autogenerated return type of restoreWallet.
"""
type restoreWalletPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  currentUser: CurrentUser
  errors: [UserError!]!
}

"""
Autogenerated input type of revealBlueprints
"""
input revealBlueprintsInput {
  cardSlugs: [String!]!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of revealBlueprints.
"""
type revealBlueprintsPayload {
  cards: [AnyCardInterface!]

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  currentUser: CurrentUser
  errors: [UserError!]!
  nonRevealableCards: [AnyCardInterface!]
}

"""
Autogenerated input type of revealProperty
"""
input revealPropertyInput {
  cardPullId: ID!
  cardShardsChestId: ID!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  propertyName: RevealableProperty!
}

"""
Autogenerated return type of revealProperty.
"""
type revealPropertyPayload {
  cardPull: CardPull

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  currentUser: CurrentUser
  errors: [UserError!]!
}

"""
Autogenerated input type of revokeDevice
"""
input revokeDeviceInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  deviceId: String!
}

"""
Autogenerated return type of revokeDevice.
"""
type revokeDevicePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  currentUser: CurrentUser
  errors: [UserError!]!
}

"""
Autogenerated input type of revokeOAuthAccessTokenForApplication
"""
input revokeOAuthAccessTokenForApplicationInput {
  applicationId: String!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of revokeOAuthAccessTokenForApplication.
"""
type revokeOAuthAccessTokenForApplicationPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  currentUser: CurrentUser
  errors: [UserError!]!
}

"""
Autogenerated input type of revokeOAuthAccessToken
"""
input revokeOAuthAccessTokenInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: String!
}

"""
Autogenerated return type of revokeOAuthAccessToken.
"""
type revokeOAuthAccessTokenPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  currentUser: CurrentUser
  errors: [UserError!]!
}

"""
Autogenerated input type of saveForLater
"""
input saveForLaterInput {
  cartId: ID!
  cartItemIds: [ID!]!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of saveForLater.
"""
type saveForLaterPayload {
  cart: Cart

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  currentUser: CurrentUser
  errors: [UserError!]!
}

"""
Autogenerated input type of sealCards
"""
input sealCardsInput {
  cardSlugs: [String!]!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of sealCards.
"""
type sealCardsPayload {
  cards: [AnyCardInterface!]

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  currentUser: CurrentUser
  errors: [UserError!]!
}

"""
Autogenerated input type of sendWalletRecovery
"""
input sendWalletRecoveryInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  destination: String!
  method: PrivateKeyRecoveryOptionMethodEnum!
}

"""
Autogenerated return type of sendWalletRecovery.
"""
type sendWalletRecoveryPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  currentUser: CurrentUser
  errors: [UserError!]!
}

"""
Autogenerated input type of setDeviceToken
"""
input setDeviceTokenInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  devicePlatform: String!
  deviceToken: String!
  disable: Boolean = false
}

"""
Autogenerated return type of setDeviceToken.
"""
type setDeviceTokenPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [UserError!]!
}

"""
Autogenerated input type of setTokenTradeStatus
"""
input setTokenTradeStatusInput {
  assetId: String!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  tradeable: Boolean!
}

"""
Autogenerated return type of setTokenTradeStatus.
"""
type setTokenTradeStatusPayload {
  card: AnyCardInterface

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [UserError!]!
}

"""
Autogenerated input type of signIn
"""
input signInInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  deviceFingerprint: String
  email: String
  gaClientId: String
  otpAttempt: String
  otpSessionChallenge: String
  passkeyChallenge: String
  passkeyCredential: PasskeyCredentialForGetInput
  password: String
}

"""
Autogenerated input type of signInWithOAuth
"""
input signInWithOAuthInput {
  acceptAgeLimit: Boolean
  acceptGameRules: Boolean
  acceptPrivacyPolicy: Boolean
  acceptTerms: Boolean
  agreedToReceiveOffersFromPartners: Boolean
  agreedToReceiveOffersFromPartnersSpecific: [String!]

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  facebookClickId: String
  googleClickId: String
  idToken: String!
  impactClickId: String
  nickname: String
  platform: Platform
  provider: OAuthProvider!
  redditClickId: String
  referrer: String
  signupPlatform: SignupPlatform @deprecated(reason: "Use platform instead")
  signupSport: Sport
  snapchatClickId: String
  tikTokClickId: String
  twitterClickId: String
  utmParams: UtmInput
}

"""
Autogenerated input type of signOutFromAllDevices
"""
input signOutFromAllDevicesInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of signOutFromAllDevices.
"""
type signOutFromAllDevicesPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [UserError!]!
}

"""
Autogenerated input type of signUp
"""
input signUpInput {
  acceptAgeLimit: Boolean!
  acceptGameRules: Boolean!
  acceptPrivacyPolicy: Boolean!
  acceptTerms: Boolean!
  agreedToReceiveOffersFromPartners: Boolean
  agreedToReceiveOffersFromPartnersSpecific: [String!]
  certified: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  email: String!
  facebookClickId: String

  """
  The path the new User is from (to be used to redirect him after email confirmation)
  """
  fromPath: String
  gaClientId: String
  googleClickId: String
  impactClickId: String
  nickname: String!
  password: String!
  platform: Platform
  promoCode: String
  recaptchaToken: String
  recaptchaTokenIos: String
  recaptchaTokenV2: String
  redditClickId: String
  referrer: String
  signupPlatform: SignupPlatform @deprecated(reason: "Use platform instead")
  signupSport: Sport
  snapchatClickId: String
  sorareAddress: EthereumAddress
  sorarePrivateKey: SorarePrivateKeyAttributes
  sorarePrivateKeyBackup: String
  starkKey: String
  tikTokClickId: String
  twitterClickId: String
  utmParams: UtmInput
  wallet: WalletInput
}

"""
Autogenerated input type of skipOnboarding
"""
input skipOnboardingInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  interactionContext: String
  sport: Sport!
}

"""
Autogenerated return type of skipOnboarding.
"""
type skipOnboardingPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  currentUser: CurrentUser
  errors: [UserError!]!
}

"""
Autogenerated input type of spendCardShardsChest
"""
input spendCardShardsChestInput {
  cardShardsChestId: ID!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of spendCardShardsChest.
"""
type spendCardShardsChestPayload {
  cardShardsChest: CardShardsChest

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  currentUser: CurrentUser
  errors: [UserError!]!
}

"""
Autogenerated input type of spinWheel
"""
input spinWheelInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  sport: Sport!
  wheelType: WheelType!
}

"""
Autogenerated return type of spinWheel.
"""
type spinWheelPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  currentUser: CurrentUser
  errors: [UserError!]!
  reward: ProbabilisticBundle
}

"""
Autogenerated input type of stopAutoBid
"""
input stopAutoBidInput {
  bidId: ID!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of stopAutoBid.
"""
type stopAutoBidPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [UserError!]!

  """
  The sport-agnostic bid
  """
  tokenBid: TokenBid
}

"""
Autogenerated input type of storeApplePurchaseToken
"""
input storeApplePurchaseTokenInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  token: String!
}

"""
Autogenerated return type of storeApplePurchaseToken.
"""
type storeApplePurchaseTokenPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  currentUser: CurrentUser
  errors: [UserError!]!
  token: ApplePurchaseToken
}

"""
Autogenerated input type of suggestLineup
"""
input suggestLineupInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  so5LeaderboardId: ID!
  so5LineupId: ID
}

"""
Autogenerated return type of suggestLineup.
"""
type suggestLineupPayload {
  captainIndex: Int

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  composeTeamBenchObjects: [ComposeTeamBenchObjectInterface!]
  errors: [UserError!]!
}

"""
Autogenerated input type of unblockFiatWallet
"""
input unblockFiatWalletInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  files: [DocumentInput!]!
}

"""
Autogenerated return type of unblockFiatWallet.
"""
type unblockFiatWalletPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  currentUser: CurrentUser
  errors: [UserError!]!
}

"""
Autogenerated input type of unblockUserOffers
"""
input unblockUserOffersInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  userSlug: String!
}

"""
Autogenerated return type of unblockUserOffers.
"""
type unblockUserOffersPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  currentUser: CurrentUser
  errors: [UserError!]!
}

"""
Autogenerated input type of unlockProMode
"""
input unlockProModeInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  interactionContext: String
  rarity: Rarity
  sport: Sport!
}

"""
Autogenerated return type of unlockProMode.
"""
type unlockProModePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  currentUser: CurrentUser
  errors: [UserError!]!
}

"""
Autogenerated input type of unsealCards
"""
input unsealCardsInput {
  cardSlugs: [String!]!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of unsealCards.
"""
type unsealCardsPayload {
  cards: [AnyCardInterface!]

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  currentUser: CurrentUser
  errors: [UserError!]!
}

"""
Autogenerated input type of updateCardFilters
"""
input updateCardFiltersInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  filters: Json!
  sport: Sport!
}

"""
Autogenerated return type of updateCardFilters.
"""
type updateCardFiltersPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  currentUser: CurrentUser
  errors: [UserError!]!
}

"""
Autogenerated input type of updateExternalEthDeposit
"""
input updateExternalEthDepositInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  ID of the deposit
  """
  id: ID!

  """
  Transaction hash of the deposit to the bridge
  """
  transactionHash: String!
}

"""
Autogenerated return type of updateExternalEthDeposit.
"""
type updateExternalEthDepositPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  currentUser: CurrentUser
  errors: [UserError!]!
}

"""
Autogenerated input type of updateFavoriteTeam
"""
input updateFavoriteTeamInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  favoriteTeamSlug: ID!
  sport: Sport!
}

"""
Autogenerated return type of updateFavoriteTeam.
"""
type updateFavoriteTeamPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [UserError!]!
  team: TeamInterface
  userSportProfile: UserSportProfileInterface
}

"""
Autogenerated input type of updateFiatWallet
"""
input updateFiatWalletInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  dob: ISO8601Date
  firstName: String
  lastName: String
}

"""
Autogenerated return type of updateFiatWallet.
"""
type updateFiatWalletPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  currentUser: CurrentUser
  errors: [UserError!]!
}

"""
Autogenerated input type of updateHighlightedCard
"""
input updateHighlightedCardInput {
  cardCollectionCardId: ID!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of updateHighlightedCard.
"""
type updateHighlightedCardPayload {
  cardCollectionCard: CardCollectionCard
  cardCollectionSlot: CardCollectionSlot

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [UserError!]!
}

"""
Autogenerated input type of updateManagerTeam
"""
input updateManagerTeamInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  hidden: Boolean
  managerTeamId: ID!
  name: String
}

"""
Autogenerated return type of updateManagerTeam.
"""
type updateManagerTeamPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  currentUser: CurrentUser
  errors: [UserError!]!
  managerTeam: ManagerTeam
}

"""
Autogenerated input type of updateOnboardingSo5Leaderboard
"""
input updateOnboardingSo5LeaderboardInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  onboardingSo5LeaderboardId: ID!
}

"""
Autogenerated return type of updateOnboardingSo5Leaderboard.
"""
type updateOnboardingSo5LeaderboardPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  currentUser: CurrentUser
  errors: [UserError!]!
}

"""
Autogenerated input type of updatePartnerOffersAgreement
"""
input updatePartnerOffersAgreementInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  partner: String!
  value: Boolean!
}

"""
Autogenerated return type of updatePartnerOffersAgreement.
"""
type updatePartnerOffersAgreementPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  currentUser: CurrentUser
  errors: [UserError!]!
}

"""
Autogenerated input type of updateSectionNotificationPreferences
"""
input updateSectionNotificationPreferencesInput {
  channels: [NotificationPreferenceChannel!]!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  section: String!
  sport: SportOrShared!
}

"""
Autogenerated return type of updateSectionNotificationPreferences.
"""
type updateSectionNotificationPreferencesPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  currentUser: CurrentUser
  errors: [UserError!]!
  section: NotificationSection
}

"""
Autogenerated input type of updateSo5UserGroup
"""
input updateSo5UserGroupInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  description: String
  displayName: String
  joinDisabled: Boolean
  logoId: ID
  newAdminId: ID
  publiclyAccessible: Boolean
  so5UserGroupId: ID!
}

"""
Autogenerated return type of updateSo5UserGroup.
"""
type updateSo5UserGroupPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [UserError!]!
  so5UserGroup: So5UserGroup
  userGroup: UserGroupInterface
}

"""
Autogenerated input type of updateSportProfile
"""
input updateSportProfileInput {
  achievementBadgesIds: [ID]
  backgroundId: ID
  bannerColor: String
  bannerUrl: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  clubBadgeId: ID
  clubName: String

  """
  pass an empty value to unset
  """
  highlightedDeckId: ID
  selectedStatistics: [UserSportStatisticSlug]
  shieldUrl: String
  sport: Sport!
}

"""
Autogenerated return type of updateSportProfile.
"""
type updateSportProfilePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [UserError!]!
  userSportProfile: AnyUserSportProfile
}

"""
Autogenerated input type of updateSubscription
"""
input updateSubscriptionInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  enabled: Boolean!
  rarities: [String!]!
  slug: String!
}

"""
Autogenerated return type of updateSubscription.
"""
type updateSubscriptionPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [UserError!]!
  subscription: EmailSubscription
}

"""
Autogenerated input type of updateUserEmail
"""
input updateUserEmailInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  email: String!
  otpAttempt: String = null
  passwordHash: String
  privateKeyRecovery: PrivateKeyRecoveryInput!
  recaptchaToken: String
  recaptchaTokenIos: String
  recaptchaTokenV2: String
}

"""
Autogenerated return type of updateUserEmail.
"""
type updateUserEmailPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  currentUser: CurrentUser
  errors: [UserError!]!
}

"""
Autogenerated input type of updateUserProfile
"""
input updateUserProfileInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  clubBannerId: ID
  clubName: String
  clubShieldId: ID
  enabledWallets: [EnabledWallet!]
  marketplacePreferences: [MarketplacePreferenceInput!]
  nickname: String
  picturePresignedKey: String
  status: String
}

"""
Autogenerated return type of updateUserProfile.
"""
type updateUserProfilePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [UserError!]!
  userProfile: UserProfile
}

"""
Autogenerated input type of updateUserSettings
"""
input updateUserSettingsInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  currency: Currency
  discoverable: Boolean
  discoverableName: String
  fiatCurrency: FiatCurrency
  hideBalance: Boolean
  lastWeb3Provider: String
  lifecycle: UserLifecycleInput
  locale: String
  maxDailyPushNotifications: Int
  notificationPreference: NotificationPreferenceInput
  postalAddress: PostalAddressInput
  rewardCurrency: Currency
}

"""
Autogenerated return type of updateUserSettings.
"""
type updateUserSettingsPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  currentUser: CurrentUser
  errors: [UserError!]!
  userSettings: UserSettings
}

"""
Autogenerated input type of upsertTaskAppearances
"""
input upsertTaskAppearancesInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  taskAppearances: [TaskAppearanceInput!]!
  taskId: ID!
}

"""
Autogenerated return type of upsertTaskAppearances.
"""
type upsertTaskAppearancesPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  currentUser: CurrentUser
  errors: [UserError!]!
  task: TaskInterface
}

"""
Autogenerated input type of upsertWatchlist
"""
input upsertWatchlistInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  public: Boolean = false
  sport: Sport!
  title: String
  watchlistId: ID
}

"""
Autogenerated return type of upsertWatchlist.
"""
type upsertWatchlistPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  currentUser: CurrentUser
  errors: [UserError!]!
  watchlist: Watchlist
}

"""
Autogenerated input type of validateApplePayMerchantSession
"""
input validateApplePayMerchantSessionInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  merchantValidationUrl: String!
}

"""
Autogenerated return type of validateApplePayMerchantSession.
"""
type validateApplePayMerchantSessionPayload {
  applePaySessionData: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [UserError!]!
}

"""
Autogenerated input type of validateFiatWallet
"""
input validateFiatWalletInput {
  backPagePresignedKey: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  frontPagePresignedKey: String!
}

"""
Autogenerated return type of validateFiatWallet.
"""
type validateFiatWalletPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  currentUser: CurrentUser
  errors: [UserError!]!
}

"""
Autogenerated input type of verifyInGameCurrencyPackMobilePurchase
"""
input verifyInGameCurrencyPackMobilePurchaseInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  packageName: String
  paymentMethod: TokenPaymentMethod!
  paymentToken: String!
  productId: String
}

"""
Autogenerated return type of verifyInGameCurrencyPackMobilePurchase.
"""
type verifyInGameCurrencyPackMobilePurchasePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  currentUser: CurrentUser
  errors: [UserError!]!
}

"""
Autogenerated input type of verifyMobilePurchase
"""
input verifyMobilePurchaseInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  packageName: String
  paymentMethod: TokenPaymentMethod!
  paymentToken: String!
  productId: String
}

"""
Autogenerated return type of verifyMobilePurchase.
"""
type verifyMobilePurchasePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  deal: TokenPrimaryOffer
  errors: [UserError!]!
}

"""
Autogenerated input type of verifyPhoneNumber
"""
input verifyPhoneNumberInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  discoverable: Boolean
  phoneNumber: String!
}

"""
Autogenerated return type of verifyPhoneNumber.
"""
type verifyPhoneNumberPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  currentUser: CurrentUser
  errors: [UserError!]!
}

"""
Autogenerated input type of visitCampaignPage
"""
input visitCampaignPageInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  url: String!
}

"""
Autogenerated return type of visitCampaignPage.
"""
type visitCampaignPagePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  currentUser: CurrentUser
  errors: [UserError!]!
}
